
BLDC_stm32f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f08  08003f08  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f10  08003f10  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08003f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000098  08003fac  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003fac  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166c3  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a72  00000000  00000000  00036787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011c20  00000000  00000000  000391f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0004ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001dd8  00000000  00000000  0004b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242ec  00000000  00000000  0004d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a50  00000000  00000000  00071a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df0ba  00000000  00000000  0008a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169526  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d84  00000000  00000000  00169578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e34 	.word	0x08003e34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08003e34 	.word	0x08003e34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:

int _write(int file, char *ptr, int len)
{
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
  for(i=0 ; i<len ; i++)
 80005b4:	1e10      	subs	r0, r2, #0
 80005b6:	dd2b      	ble.n	8000610 <_write+0x5c>
 80005b8:	eb01 0c00 	add.w	ip, r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 80005c4:	07d2      	lsls	r2, r2, #31
    ITM_SendChar((*ptr++));
 80005c6:	f101 0101 	add.w	r1, r1, #1
 80005ca:	d51e      	bpl.n	800060a <_write+0x56>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	07d2      	lsls	r2, r2, #31
 80005d2:	d51a      	bpl.n	800060a <_write+0x56>
{
 80005d4:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d6:	681a      	ldr	r2, [r3, #0]
    ITM_SendChar((*ptr++));
 80005d8:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 80005dc:	b91a      	cbnz	r2, 80005e6 <_write+0x32>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d0fb      	beq.n	80005de <_write+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f883 e000 	strb.w	lr, [r3]
  for(i=0 ; i<len ; i++)
 80005ea:	4561      	cmp	r1, ip
 80005ec:	d00b      	beq.n	8000606 <_write+0x52>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ee:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 80005f2:	07d2      	lsls	r2, r2, #31
    ITM_SendChar((*ptr++));
 80005f4:	f101 0101 	add.w	r1, r1, #1
 80005f8:	d5f7      	bpl.n	80005ea <_write+0x36>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005fa:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005fe:	07d2      	lsls	r2, r2, #31
 8000600:	d4e9      	bmi.n	80005d6 <_write+0x22>
  for(i=0 ; i<len ; i++)
 8000602:	4561      	cmp	r1, ip
 8000604:	d1f3      	bne.n	80005ee <_write+0x3a>
  return len;
}
 8000606:	f85d fb04 	ldr.w	pc, [sp], #4
  for(i=0 ; i<len ; i++)
 800060a:	4561      	cmp	r1, ip
 800060c:	d1d8      	bne.n	80005c0 <_write+0xc>
 800060e:	4770      	bx	lr
}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <readHall_L>:
		}
	}
}

 void readHall_L(struct hall *hall)
{
 8000614:	b538      	push	{r3, r4, r5, lr}
	hall->h1=HAL_GPIO_ReadPin(H1_L_GPIO_Port, H1_L_Pin);
 8000616:	4d09      	ldr	r5, [pc, #36]	; (800063c <readHall_L+0x28>)
{
 8000618:	4604      	mov	r4, r0
	hall->h1=HAL_GPIO_ReadPin(H1_L_GPIO_Port, H1_L_Pin);
 800061a:	2104      	movs	r1, #4
 800061c:	4628      	mov	r0, r5
 800061e:	f001 fb79 	bl	8001d14 <HAL_GPIO_ReadPin>
	hall->h2=HAL_GPIO_ReadPin(H2_L_GPIO_Port, H2_L_Pin);
 8000622:	2120      	movs	r1, #32
	hall->h1=HAL_GPIO_ReadPin(H1_L_GPIO_Port, H1_L_Pin);
 8000624:	7020      	strb	r0, [r4, #0]
	hall->h2=HAL_GPIO_ReadPin(H2_L_GPIO_Port, H2_L_Pin);
 8000626:	4628      	mov	r0, r5
 8000628:	f001 fb74 	bl	8001d14 <HAL_GPIO_ReadPin>
	hall->h3=HAL_GPIO_ReadPin(H3_L_GPIO_Port, H3_L_Pin);
 800062c:	2140      	movs	r1, #64	; 0x40
	hall->h2=HAL_GPIO_ReadPin(H2_L_GPIO_Port, H2_L_Pin);
 800062e:	7060      	strb	r0, [r4, #1]
	hall->h3=HAL_GPIO_ReadPin(H3_L_GPIO_Port, H3_L_Pin);
 8000630:	4628      	mov	r0, r5
 8000632:	f001 fb6f 	bl	8001d14 <HAL_GPIO_ReadPin>
 8000636:	70a0      	strb	r0, [r4, #2]
}
 8000638:	bd38      	pop	{r3, r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	40020400 	.word	0x40020400

08000640 <readHall_R>:

  void readHall_R(struct hall *hall)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
	hall->h1=HAL_GPIO_ReadPin(H1_R_GPIO_Port, H1_R_Pin);
 8000642:	4d0a      	ldr	r5, [pc, #40]	; (800066c <readHall_R+0x2c>)
{
 8000644:	4604      	mov	r4, r0
	hall->h1=HAL_GPIO_ReadPin(H1_R_GPIO_Port, H1_R_Pin);
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	4628      	mov	r0, r5
 800064a:	f001 fb63 	bl	8001d14 <HAL_GPIO_ReadPin>
	hall->h2=HAL_GPIO_ReadPin(H2_R_GPIO_Port, H2_R_Pin);
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
	hall->h1=HAL_GPIO_ReadPin(H1_R_GPIO_Port, H1_R_Pin);
 8000652:	7020      	strb	r0, [r4, #0]
	hall->h2=HAL_GPIO_ReadPin(H2_R_GPIO_Port, H2_R_Pin);
 8000654:	4628      	mov	r0, r5
 8000656:	f001 fb5d 	bl	8001d14 <HAL_GPIO_ReadPin>
	hall->h3=HAL_GPIO_ReadPin(H3_R_GPIO_Port, H3_R_Pin);
 800065a:	f44f 7100 	mov.w	r1, #512	; 0x200
	hall->h2=HAL_GPIO_ReadPin(H2_R_GPIO_Port, H2_R_Pin);
 800065e:	7060      	strb	r0, [r4, #1]
	hall->h3=HAL_GPIO_ReadPin(H3_R_GPIO_Port, H3_R_Pin);
 8000660:	4628      	mov	r0, r5
 8000662:	f001 fb57 	bl	8001d14 <HAL_GPIO_ReadPin>
 8000666:	70a0      	strb	r0, [r4, #2]
}
 8000668:	bd38      	pop	{r3, r4, r5, pc}
 800066a:	bf00      	nop
 800066c:	40020400 	.word	0x40020400

08000670 <decodeHall>:

  void decodeHall(struct hall *hall,struct PWM *PWM)
{
 8000670:	b470      	push	{r4, r5, r6}
    /*
    Commutation sequence for MAXON EC45 BLDC MOTOR
    */

	hall->h123= (hall->h1<<2) | (hall->h2<<1) | hall->h3; //for motor sense reading
 8000672:	7844      	ldrb	r4, [r0, #1]
 8000674:	7806      	ldrb	r6, [r0, #0]
 8000676:	7882      	ldrb	r2, [r0, #2]
 8000678:	0063      	lsls	r3, r4, #1
 800067a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 800067e:	4313      	orrs	r3, r2
 8000680:	fa5f fc83 	uxtb.w	ip, r3
 8000684:	f880 c003 	strb.w	ip, [r0, #3]

	if (PWM->sense) //clockwise
 8000688:	798d      	ldrb	r5, [r1, #6]
	hall->h123= (hall->h1<<2) | (hall->h2<<1) | hall->h3; //for motor sense reading
 800068a:	b25b      	sxtb	r3, r3
	if (PWM->sense) //clockwise
 800068c:	b1bd      	cbz	r5, 80006be <decodeHall+0x4e>
	{
		PWM->aH= (hall->h1)&&(!hall->h2);	PWM->aL= (!hall->h1)&&(hall->h2);	PWM->bH= (hall->h2)&&(!hall->h3);	PWM->bL= (!hall->h2)&&(hall->h3);	PWM->cH= (!hall->h1)&&(hall->h3);	PWM->cL= (hall->h1)&&(!hall->h3);
 800068e:	b386      	cbz	r6, 80006f2 <decodeHall+0x82>
 8000690:	2c00      	cmp	r4, #0
 8000692:	d139      	bne.n	8000708 <decodeHall+0x98>
 8000694:	f8a1 4001 	strh.w	r4, [r1, #1]
 8000698:	2401      	movs	r4, #1
 800069a:	700c      	strb	r4, [r1, #0]
 800069c:	2a00      	cmp	r2, #0
 800069e:	d07d      	beq.n	800079c <decodeHall+0x12c>
 80006a0:	70cc      	strb	r4, [r1, #3]
 80006a2:	2200      	movs	r2, #0
 80006a4:	710a      	strb	r2, [r1, #4]
 80006a6:	714a      	strb	r2, [r1, #5]
	else //anti-clockwise
	{
		PWM->aH= (!hall->h1)&&(hall->h2);	PWM->aL= (hall->h1)&&(!hall->h2);	PWM->bH= (!hall->h2)&&(hall->h3);	PWM->bL= (hall->h2)&&(!hall->h3);	PWM->cH= (hall->h1)&&(!hall->h3);	PWM->cL= (!hall->h1)&&(hall->h3);
	}

	if (hall->h123 != hall->prev_h123){ //for sense sign reading
 80006a8:	7902      	ldrb	r2, [r0, #4]
 80006aa:	4594      	cmp	ip, r2
 80006ac:	d051      	beq.n	8000752 <decodeHall+0xe2>
		switch(hall->h123) // 101 -> 100 -> 110 -> 010 -> 011 -> 001 clockwise
 80006ae:	3b01      	subs	r3, #1
 80006b0:	2b05      	cmp	r3, #5
 80006b2:	d84e      	bhi.n	8000752 <decodeHall+0xe2>
 80006b4:	e8df f003 	tbb	[pc, r3]
 80006b8:	63515d5a 	.word	0x63515d5a
 80006bc:	4860      	.short	0x4860
		PWM->aH= (!hall->h1)&&(hall->h2);	PWM->aL= (hall->h1)&&(!hall->h2);	PWM->bH= (!hall->h2)&&(hall->h3);	PWM->bL= (hall->h2)&&(!hall->h3);	PWM->cH= (hall->h1)&&(!hall->h3);	PWM->cL= (!hall->h1)&&(hall->h3);
 80006be:	b96e      	cbnz	r6, 80006dc <decodeHall+0x6c>
 80006c0:	bbac      	cbnz	r4, 800072e <decodeHall+0xbe>
 80006c2:	800c      	strh	r4, [r1, #0]
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d05d      	beq.n	8000784 <decodeHall+0x114>
 80006c8:	70cc      	strb	r4, [r1, #3]
 80006ca:	2401      	movs	r4, #1
 80006cc:	708c      	strb	r4, [r1, #2]
 80006ce:	1e15      	subs	r5, r2, #0
 80006d0:	bf18      	it	ne
 80006d2:	2501      	movne	r5, #1
 80006d4:	2200      	movs	r2, #0
 80006d6:	710a      	strb	r2, [r1, #4]
 80006d8:	714d      	strb	r5, [r1, #5]
 80006da:	e7e5      	b.n	80006a8 <decodeHall+0x38>
 80006dc:	700d      	strb	r5, [r1, #0]
 80006de:	b36c      	cbz	r4, 800073c <decodeHall+0xcc>
 80006e0:	f8a1 5001 	strh.w	r5, [r1, #1]
 80006e4:	bb72      	cbnz	r2, 8000744 <decodeHall+0xd4>
 80006e6:	2201      	movs	r2, #1
 80006e8:	70ca      	strb	r2, [r1, #3]
 80006ea:	2201      	movs	r2, #1
 80006ec:	710a      	strb	r2, [r1, #4]
 80006ee:	714d      	strb	r5, [r1, #5]
 80006f0:	e7da      	b.n	80006a8 <decodeHall+0x38>
		PWM->aH= (hall->h1)&&(!hall->h2);	PWM->aL= (!hall->h1)&&(hall->h2);	PWM->bH= (hall->h2)&&(!hall->h3);	PWM->bL= (!hall->h2)&&(hall->h3);	PWM->cH= (!hall->h1)&&(hall->h3);	PWM->cL= (hall->h1)&&(!hall->h3);
 80006f2:	700e      	strb	r6, [r1, #0]
 80006f4:	b9ac      	cbnz	r4, 8000722 <decodeHall+0xb2>
 80006f6:	f8a1 4001 	strh.w	r4, [r1, #1]
 80006fa:	b1b2      	cbz	r2, 800072a <decodeHall+0xba>
 80006fc:	2201      	movs	r2, #1
 80006fe:	70ca      	strb	r2, [r1, #3]
 8000700:	2201      	movs	r2, #1
 8000702:	710a      	strb	r2, [r1, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	e7ce      	b.n	80006a6 <decodeHall+0x36>
 8000708:	2400      	movs	r4, #0
 800070a:	800c      	strh	r4, [r1, #0]
 800070c:	2a00      	cmp	r2, #0
 800070e:	d13f      	bne.n	8000790 <decodeHall+0x120>
 8000710:	2401      	movs	r4, #1
 8000712:	70ca      	strb	r2, [r1, #3]
 8000714:	708c      	strb	r4, [r1, #2]
 8000716:	fab2 f282 	clz	r2, r2
 800071a:	2400      	movs	r4, #0
 800071c:	0952      	lsrs	r2, r2, #5
 800071e:	710c      	strb	r4, [r1, #4]
 8000720:	e7c1      	b.n	80006a6 <decodeHall+0x36>
 8000722:	2401      	movs	r4, #1
 8000724:	704c      	strb	r4, [r1, #1]
 8000726:	bb9a      	cbnz	r2, 8000790 <decodeHall+0x120>
 8000728:	708c      	strb	r4, [r1, #2]
 800072a:	70ca      	strb	r2, [r1, #3]
 800072c:	e7b9      	b.n	80006a2 <decodeHall+0x32>
		PWM->aH= (!hall->h1)&&(hall->h2);	PWM->aL= (hall->h1)&&(!hall->h2);	PWM->bH= (!hall->h2)&&(hall->h3);	PWM->bL= (hall->h2)&&(!hall->h3);	PWM->cH= (hall->h1)&&(!hall->h3);	PWM->cL= (!hall->h1)&&(hall->h3);
 800072e:	2401      	movs	r4, #1
 8000730:	f8a1 6001 	strh.w	r6, [r1, #1]
 8000734:	700c      	strb	r4, [r1, #0]
 8000736:	bb9a      	cbnz	r2, 80007a0 <decodeHall+0x130>
 8000738:	70cc      	strb	r4, [r1, #3]
 800073a:	e7cb      	b.n	80006d4 <decodeHall+0x64>
 800073c:	2401      	movs	r4, #1
 800073e:	704c      	strb	r4, [r1, #1]
 8000740:	b302      	cbz	r2, 8000784 <decodeHall+0x114>
 8000742:	708c      	strb	r4, [r1, #2]
 8000744:	70cd      	strb	r5, [r1, #3]
 8000746:	e7c5      	b.n	80006d4 <decodeHall+0x64>
			case 5:
				if(hall->prev_h123 == 1) 	(hall->tickS)++;
				else	(hall->tickS)--;
				break;
			case 6:
				if(hall->prev_h123 == 4) 	(hall->tickS)++;
 8000748:	2a04      	cmp	r2, #4
 800074a:	d008      	beq.n	800075e <decodeHall+0xee>
				else	(hall->tickS)--;
 800074c:	88c3      	ldrh	r3, [r0, #6]
 800074e:	3b01      	subs	r3, #1
 8000750:	80c3      	strh	r3, [r0, #6]
			default:
				break;
		}
	}
	hall->prev_h123 = hall->h123;
}
 8000752:	bc70      	pop	{r4, r5, r6}
	hall->prev_h123 = hall->h123;
 8000754:	f880 c004 	strb.w	ip, [r0, #4]
}
 8000758:	4770      	bx	lr
				if(hall->prev_h123 == 2)  	(hall->tickS)++;
 800075a:	2a02      	cmp	r2, #2
 800075c:	d1f6      	bne.n	800074c <decodeHall+0xdc>
				if(hall->prev_h123 == 3)	(hall->tickS)++;	//clockwise
 800075e:	88c3      	ldrh	r3, [r0, #6]
	hall->prev_h123 = hall->h123;
 8000760:	f880 c004 	strb.w	ip, [r0, #4]
				if(hall->prev_h123 == 3)	(hall->tickS)++;	//clockwise
 8000764:	3301      	adds	r3, #1
}
 8000766:	bc70      	pop	{r4, r5, r6}
				if(hall->prev_h123 == 3)	(hall->tickS)++;	//clockwise
 8000768:	80c3      	strh	r3, [r0, #6]
}
 800076a:	4770      	bx	lr
				if(hall->prev_h123 == 3)	(hall->tickS)++;	//clockwise
 800076c:	2a03      	cmp	r2, #3
 800076e:	d1ed      	bne.n	800074c <decodeHall+0xdc>
 8000770:	e7f5      	b.n	800075e <decodeHall+0xee>
				if(hall->prev_h123 == 6)	(hall->tickS)++;
 8000772:	2a06      	cmp	r2, #6
 8000774:	d1ea      	bne.n	800074c <decodeHall+0xdc>
 8000776:	e7f2      	b.n	800075e <decodeHall+0xee>
				if(hall->prev_h123 == 1) 	(hall->tickS)++;
 8000778:	2a01      	cmp	r2, #1
 800077a:	d1e7      	bne.n	800074c <decodeHall+0xdc>
 800077c:	e7ef      	b.n	800075e <decodeHall+0xee>
				if(hall->prev_h123 == 5) 	(hall->tickS)++;
 800077e:	2a05      	cmp	r2, #5
 8000780:	d1e4      	bne.n	800074c <decodeHall+0xdc>
 8000782:	e7ec      	b.n	800075e <decodeHall+0xee>
		PWM->aH= (!hall->h1)&&(hall->h2);	PWM->aL= (hall->h1)&&(!hall->h2);	PWM->bH= (!hall->h2)&&(hall->h3);	PWM->bL= (hall->h2)&&(!hall->h3);	PWM->cH= (hall->h1)&&(!hall->h3);	PWM->cL= (!hall->h1)&&(hall->h3);
 8000784:	2400      	movs	r4, #0
 8000786:	708c      	strb	r4, [r1, #2]
 8000788:	70cc      	strb	r4, [r1, #3]
 800078a:	2e00      	cmp	r6, #0
 800078c:	d09f      	beq.n	80006ce <decodeHall+0x5e>
 800078e:	e7ac      	b.n	80006ea <decodeHall+0x7a>
		PWM->aH= (hall->h1)&&(!hall->h2);	PWM->aL= (!hall->h1)&&(hall->h2);	PWM->bH= (hall->h2)&&(!hall->h3);	PWM->bL= (!hall->h2)&&(hall->h3);	PWM->cH= (!hall->h1)&&(hall->h3);	PWM->cL= (hall->h1)&&(!hall->h3);
 8000790:	2400      	movs	r4, #0
 8000792:	708c      	strb	r4, [r1, #2]
 8000794:	70cc      	strb	r4, [r1, #3]
 8000796:	2e00      	cmp	r6, #0
 8000798:	d0b2      	beq.n	8000700 <decodeHall+0x90>
 800079a:	e7bc      	b.n	8000716 <decodeHall+0xa6>
 800079c:	70ca      	strb	r2, [r1, #3]
 800079e:	e7ba      	b.n	8000716 <decodeHall+0xa6>
		PWM->aH= (!hall->h1)&&(hall->h2);	PWM->aL= (hall->h1)&&(!hall->h2);	PWM->bH= (!hall->h2)&&(hall->h3);	PWM->bL= (hall->h2)&&(!hall->h3);	PWM->cH= (hall->h1)&&(!hall->h3);	PWM->cL= (!hall->h1)&&(hall->h3);
 80007a0:	70ce      	strb	r6, [r1, #3]
 80007a2:	e794      	b.n	80006ce <decodeHall+0x5e>

080007a4 <updateOutput_L>:
	hall->prev_h123=hall->h123;
}


void updateOutput_L(struct PWM PWM)
{
 80007a4:	b082      	sub	sp, #8
 80007a6:	ab02      	add	r3, sp, #8
 80007a8:	e903 0003 	stmdb	r3, {r0, r1}
	if (PWM.aH)	TIM1->CCER |= TIM_CCER_CC1E; 	//CC1E=1
 80007ac:	f89d 3000 	ldrb.w	r3, [sp]
 80007b0:	4a34      	ldr	r2, [pc, #208]	; (8000884 <updateOutput_L+0xe0>)
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d032      	beq.n	800081c <updateOutput_L+0x78>
 80007b6:	6a13      	ldr	r3, [r2, #32]
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6213      	str	r3, [r2, #32]
	else	TIM1->CCER &= ~(TIM_CCER_CC1E); 	//CC1E=0

	if (PWM.aL)	TIM1->CCER |= TIM_CCER_CC1NE; 	//CC1NE=1
 80007be:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80007c2:	4a30      	ldr	r2, [pc, #192]	; (8000884 <updateOutput_L+0xe0>)
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d032      	beq.n	800082e <updateOutput_L+0x8a>
 80007c8:	6a13      	ldr	r3, [r2, #32]
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6213      	str	r3, [r2, #32]
	else	TIM1->CCER &= ~(TIM_CCER_CC1NE); 	//CC1NE=0

	if (PWM.bH)	TIM1->CCER |= TIM_CCER_CC2E;
 80007d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80007d4:	4a2b      	ldr	r2, [pc, #172]	; (8000884 <updateOutput_L+0xe0>)
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d032      	beq.n	8000840 <updateOutput_L+0x9c>
 80007da:	6a13      	ldr	r3, [r2, #32]
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6213      	str	r3, [r2, #32]
	else	TIM1->CCER &= ~(TIM_CCER_CC2E);

	if (PWM.bL)	TIM1->CCER |= TIM_CCER_CC2NE;
 80007e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80007e6:	4a27      	ldr	r2, [pc, #156]	; (8000884 <updateOutput_L+0xe0>)
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d032      	beq.n	8000852 <updateOutput_L+0xae>
 80007ec:	6a13      	ldr	r3, [r2, #32]
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	6213      	str	r3, [r2, #32]
	else	TIM1->CCER &= ~(TIM_CCER_CC2NE);

	if (PWM.cH)	TIM1->CCER |= TIM_CCER_CC3E;
 80007f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80007f8:	4a22      	ldr	r2, [pc, #136]	; (8000884 <updateOutput_L+0xe0>)
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d032      	beq.n	8000864 <updateOutput_L+0xc0>
 80007fe:	6a13      	ldr	r3, [r2, #32]
 8000800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000804:	6213      	str	r3, [r2, #32]
	else	TIM1->CCER &= ~(TIM_CCER_CC3E);

	if (PWM.cL)	TIM1->CCER |= TIM_CCER_CC3NE;
 8000806:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <updateOutput_L+0xe0>)
 800080c:	2b00      	cmp	r3, #0
 800080e:	d032      	beq.n	8000876 <updateOutput_L+0xd2>
 8000810:	6a13      	ldr	r3, [r2, #32]
 8000812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000816:	6213      	str	r3, [r2, #32]
	else	TIM1->CCER &= ~(TIM_CCER_CC3NE);
}
 8000818:	b002      	add	sp, #8
 800081a:	4770      	bx	lr
	else	TIM1->CCER &= ~(TIM_CCER_CC1E); 	//CC1E=0
 800081c:	6a13      	ldr	r3, [r2, #32]
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	6213      	str	r3, [r2, #32]
	if (PWM.aL)	TIM1->CCER |= TIM_CCER_CC1NE; 	//CC1NE=1
 8000824:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000828:	4a16      	ldr	r2, [pc, #88]	; (8000884 <updateOutput_L+0xe0>)
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1cc      	bne.n	80007c8 <updateOutput_L+0x24>
	else	TIM1->CCER &= ~(TIM_CCER_CC1NE); 	//CC1NE=0
 800082e:	6a13      	ldr	r3, [r2, #32]
 8000830:	f023 0304 	bic.w	r3, r3, #4
 8000834:	6213      	str	r3, [r2, #32]
	if (PWM.bH)	TIM1->CCER |= TIM_CCER_CC2E;
 8000836:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <updateOutput_L+0xe0>)
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1cc      	bne.n	80007da <updateOutput_L+0x36>
	else	TIM1->CCER &= ~(TIM_CCER_CC2E);
 8000840:	6a13      	ldr	r3, [r2, #32]
 8000842:	f023 0310 	bic.w	r3, r3, #16
 8000846:	6213      	str	r3, [r2, #32]
	if (PWM.bL)	TIM1->CCER |= TIM_CCER_CC2NE;
 8000848:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <updateOutput_L+0xe0>)
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1cc      	bne.n	80007ec <updateOutput_L+0x48>
	else	TIM1->CCER &= ~(TIM_CCER_CC2NE);
 8000852:	6a13      	ldr	r3, [r2, #32]
 8000854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000858:	6213      	str	r3, [r2, #32]
	if (PWM.cH)	TIM1->CCER |= TIM_CCER_CC3E;
 800085a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <updateOutput_L+0xe0>)
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1cc      	bne.n	80007fe <updateOutput_L+0x5a>
	else	TIM1->CCER &= ~(TIM_CCER_CC3E);
 8000864:	6a13      	ldr	r3, [r2, #32]
 8000866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800086a:	6213      	str	r3, [r2, #32]
	if (PWM.cL)	TIM1->CCER |= TIM_CCER_CC3NE;
 800086c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <updateOutput_L+0xe0>)
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1cc      	bne.n	8000810 <updateOutput_L+0x6c>
	else	TIM1->CCER &= ~(TIM_CCER_CC3NE);
 8000876:	6a13      	ldr	r3, [r2, #32]
 8000878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800087c:	6213      	str	r3, [r2, #32]
}
 800087e:	b002      	add	sp, #8
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40010000 	.word	0x40010000

08000888 <updateOutput_R>:

void updateOutput_R(struct PWM PWM)
{
 8000888:	b082      	sub	sp, #8
 800088a:	ab02      	add	r3, sp, #8
 800088c:	e903 0003 	stmdb	r3, {r0, r1}
	if (PWM.aH)	TIM8->CCER |= TIM_CCER_CC1E; 	//CC1E=1
 8000890:	f89d 3000 	ldrb.w	r3, [sp]
 8000894:	4a34      	ldr	r2, [pc, #208]	; (8000968 <updateOutput_R+0xe0>)
 8000896:	2b00      	cmp	r3, #0
 8000898:	d032      	beq.n	8000900 <updateOutput_R+0x78>
 800089a:	6a13      	ldr	r3, [r2, #32]
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6213      	str	r3, [r2, #32]
	else	TIM8->CCER &= ~(TIM_CCER_CC1E); 	//CC1E=0

	if (PWM.aL)	TIM8->CCER |= TIM_CCER_CC1NE; 	//CC1NE=1
 80008a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80008a6:	4a30      	ldr	r2, [pc, #192]	; (8000968 <updateOutput_R+0xe0>)
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d032      	beq.n	8000912 <updateOutput_R+0x8a>
 80008ac:	6a13      	ldr	r3, [r2, #32]
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6213      	str	r3, [r2, #32]
	else	TIM8->CCER &= ~(TIM_CCER_CC1NE); 	//CC1NE=0

	if (PWM.bH)	TIM8->CCER |= TIM_CCER_CC2E;
 80008b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80008b8:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <updateOutput_R+0xe0>)
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d032      	beq.n	8000924 <updateOutput_R+0x9c>
 80008be:	6a13      	ldr	r3, [r2, #32]
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6213      	str	r3, [r2, #32]
	else	TIM8->CCER &= ~(TIM_CCER_CC2E);

	if (PWM.bL)	TIM8->CCER |= TIM_CCER_CC2NE;
 80008c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80008ca:	4a27      	ldr	r2, [pc, #156]	; (8000968 <updateOutput_R+0xe0>)
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d032      	beq.n	8000936 <updateOutput_R+0xae>
 80008d0:	6a13      	ldr	r3, [r2, #32]
 80008d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d6:	6213      	str	r3, [r2, #32]
	else	TIM8->CCER &= ~(TIM_CCER_CC2NE);

	if (PWM.cH)	TIM8->CCER |= TIM_CCER_CC3E;
 80008d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80008dc:	4a22      	ldr	r2, [pc, #136]	; (8000968 <updateOutput_R+0xe0>)
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d032      	beq.n	8000948 <updateOutput_R+0xc0>
 80008e2:	6a13      	ldr	r3, [r2, #32]
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6213      	str	r3, [r2, #32]
	else	TIM8->CCER &= ~(TIM_CCER_CC3E);

	if (PWM.cL)	TIM8->CCER |= TIM_CCER_CC3NE;
 80008ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80008ee:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <updateOutput_R+0xe0>)
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d032      	beq.n	800095a <updateOutput_R+0xd2>
 80008f4:	6a13      	ldr	r3, [r2, #32]
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	6213      	str	r3, [r2, #32]
	else	TIM8->CCER &= ~(TIM_CCER_CC3NE);
}
 80008fc:	b002      	add	sp, #8
 80008fe:	4770      	bx	lr
	else	TIM8->CCER &= ~(TIM_CCER_CC1E); 	//CC1E=0
 8000900:	6a13      	ldr	r3, [r2, #32]
 8000902:	f023 0301 	bic.w	r3, r3, #1
 8000906:	6213      	str	r3, [r2, #32]
	if (PWM.aL)	TIM8->CCER |= TIM_CCER_CC1NE; 	//CC1NE=1
 8000908:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <updateOutput_R+0xe0>)
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1cc      	bne.n	80008ac <updateOutput_R+0x24>
	else	TIM8->CCER &= ~(TIM_CCER_CC1NE); 	//CC1NE=0
 8000912:	6a13      	ldr	r3, [r2, #32]
 8000914:	f023 0304 	bic.w	r3, r3, #4
 8000918:	6213      	str	r3, [r2, #32]
	if (PWM.bH)	TIM8->CCER |= TIM_CCER_CC2E;
 800091a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <updateOutput_R+0xe0>)
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1cc      	bne.n	80008be <updateOutput_R+0x36>
	else	TIM8->CCER &= ~(TIM_CCER_CC2E);
 8000924:	6a13      	ldr	r3, [r2, #32]
 8000926:	f023 0310 	bic.w	r3, r3, #16
 800092a:	6213      	str	r3, [r2, #32]
	if (PWM.bL)	TIM8->CCER |= TIM_CCER_CC2NE;
 800092c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <updateOutput_R+0xe0>)
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1cc      	bne.n	80008d0 <updateOutput_R+0x48>
	else	TIM8->CCER &= ~(TIM_CCER_CC2NE);
 8000936:	6a13      	ldr	r3, [r2, #32]
 8000938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800093c:	6213      	str	r3, [r2, #32]
	if (PWM.cH)	TIM8->CCER |= TIM_CCER_CC3E;
 800093e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <updateOutput_R+0xe0>)
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1cc      	bne.n	80008e2 <updateOutput_R+0x5a>
	else	TIM8->CCER &= ~(TIM_CCER_CC3E);
 8000948:	6a13      	ldr	r3, [r2, #32]
 800094a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800094e:	6213      	str	r3, [r2, #32]
	if (PWM.cL)	TIM8->CCER |= TIM_CCER_CC3NE;
 8000950:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <updateOutput_R+0xe0>)
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1cc      	bne.n	80008f4 <updateOutput_R+0x6c>
	else	TIM8->CCER &= ~(TIM_CCER_CC3NE);
 800095a:	6a13      	ldr	r3, [r2, #32]
 800095c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000960:	6213      	str	r3, [r2, #32]
}
 8000962:	b002      	add	sp, #8
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40010400 	.word	0x40010400

0800096c <writeCommand_L>:
		return 100*hall->tickS;
}

void writeCommand_L(struct PWM *PWM, struct dataSpeed *data)
{
	if ((data->cmdsat >= 0) && (data->cmdsat <=DC_MAX))			//clockwise
 800096c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000970:	b29a      	uxth	r2, r3
 8000972:	2a5a      	cmp	r2, #90	; 0x5a
 8000974:	d806      	bhi.n	8000984 <writeCommand_L+0x18>
	{
		PWM->sense=1;	TIM1->CCR1=data->cmdsat;	TIM1->CCR2=data->cmdsat;	TIM1->CCR3=data->cmdsat;
 8000976:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <writeCommand_L+0x40>)
 8000978:	2101      	movs	r1, #1
 800097a:	7181      	strb	r1, [r0, #6]
 800097c:	6353      	str	r3, [r2, #52]	; 0x34
 800097e:	6393      	str	r3, [r2, #56]	; 0x38
 8000980:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000982:	4770      	bx	lr
	}
	else if ((data->cmdsat >= DC_MIN) && (data->cmdsat < 0))	//anti clockwise
 8000984:	325a      	adds	r2, #90	; 0x5a
 8000986:	b292      	uxth	r2, r2
 8000988:	2a59      	cmp	r2, #89	; 0x59
 800098a:	d807      	bhi.n	800099c <writeCommand_L+0x30>
	{
		PWM->sense=0;	TIM1->CCR1=-data->cmdsat;	TIM1->CCR2=-data->cmdsat;	TIM1->CCR3=-data->cmdsat;
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <writeCommand_L+0x40>)
 800098e:	425b      	negs	r3, r3
 8000990:	2100      	movs	r1, #0
 8000992:	7181      	strb	r1, [r0, #6]
 8000994:	6353      	str	r3, [r2, #52]	; 0x34
 8000996:	6393      	str	r3, [r2, #56]	; 0x38
 8000998:	63d3      	str	r3, [r2, #60]	; 0x3c
 800099a:	4770      	bx	lr
	}
	else														//error state --> PWM off
	{
		PWM->sense=1;	TIM1->CCR1=0;	TIM1->CCR2=0;	TIM1->CCR3=0;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <writeCommand_L+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	7181      	strb	r1, [r0, #6]
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 80009aa:	4770      	bx	lr
 80009ac:	40010000 	.word	0x40010000

080009b0 <writeCommand_R>:

void writeCommand_R(struct PWM *PWM, struct dataSpeed *data)
{
	if ((data->cmdsat >= 0) && (data->cmdsat <=DC_MAX))			//clockwise
 80009b0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	2a5a      	cmp	r2, #90	; 0x5a
 80009b8:	d806      	bhi.n	80009c8 <writeCommand_R+0x18>
	{
		PWM->sense=1;	TIM8->CCR1=data->cmdsat;	TIM8->CCR2=data->cmdsat;	TIM8->CCR3=data->cmdsat;
 80009ba:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <writeCommand_R+0x40>)
 80009bc:	2101      	movs	r1, #1
 80009be:	7181      	strb	r1, [r0, #6]
 80009c0:	6353      	str	r3, [r2, #52]	; 0x34
 80009c2:	6393      	str	r3, [r2, #56]	; 0x38
 80009c4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009c6:	4770      	bx	lr
	}
	else if ((data->cmdsat >= DC_MIN) && (data->cmdsat < 0))	//anti clockwise
 80009c8:	325a      	adds	r2, #90	; 0x5a
 80009ca:	b292      	uxth	r2, r2
 80009cc:	2a59      	cmp	r2, #89	; 0x59
 80009ce:	d807      	bhi.n	80009e0 <writeCommand_R+0x30>
	{
		PWM->sense=0;	TIM8->CCR1=-data->cmdsat;	TIM8->CCR2=-data->cmdsat;	TIM8->CCR3=-data->cmdsat;
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <writeCommand_R+0x40>)
 80009d2:	425b      	negs	r3, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	7181      	strb	r1, [r0, #6]
 80009d8:	6353      	str	r3, [r2, #52]	; 0x34
 80009da:	6393      	str	r3, [r2, #56]	; 0x38
 80009dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009de:	4770      	bx	lr
	}
	else														//error state --> PWM off
	{
		PWM->sense=1;	TIM8->CCR1=0;	TIM8->CCR2=0;	TIM8->CCR3=0;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <writeCommand_R+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	2101      	movs	r1, #1
 80009e6:	7181      	strb	r1, [r0, #6]
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ea:	639a      	str	r2, [r3, #56]	; 0x38
 80009ec:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 80009ee:	4770      	bx	lr
 80009f0:	40010400 	.word	0x40010400

080009f4 <PIDS_Prop>:
	if (hall->tickS > 240)
 80009f4:	f9b3 c006 	ldrsh.w	ip, [r3, #6]

void PIDS_Prop(struct PID *Prop, struct dataSpeed *data_L,struct dataSpeed *data_R, struct hall *hall_L, struct hall *hall_R){
 80009f8:	b510      	push	{r4, lr}
	if (hall->tickS > 240)
 80009fa:	f1bc 0ff0 	cmp.w	ip, #240	; 0xf0
void PIDS_Prop(struct PID *Prop, struct dataSpeed *data_L,struct dataSpeed *data_R, struct hall *hall_L, struct hall *hall_R){
 80009fe:	9c02      	ldr	r4, [sp, #8]
	if (hall->tickS > 240)
 8000a00:	dc65      	bgt.n	8000ace <PIDS_Prop+0xda>
	else if (hall->tickS < -240)
 8000a02:	f11c 0ff0 	cmn.w	ip, #240	; 0xf0
 8000a06:	db6d      	blt.n	8000ae4 <PIDS_Prop+0xf0>
		return 100*hall->tickS;
 8000a08:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8000a0c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8000a10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a14:	fa0f fc8c 	sxth.w	ip, ip

	//read speed
	data_L->speed=calculateSpeed(hall_L);	hall_L->tickS=0;
 8000a18:	f8a1 c002 	strh.w	ip, [r1, #2]
 8000a1c:	f04f 0c00 	mov.w	ip, #0
 8000a20:	f8a3 c006 	strh.w	ip, [r3, #6]
	if (hall->tickS > 240)
 8000a24:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8000a28:	2bf0      	cmp	r3, #240	; 0xf0
 8000a2a:	dc53      	bgt.n	8000ad4 <PIDS_Prop+0xe0>
	else if (hall->tickS < -240)
 8000a2c:	f113 0ff0 	cmn.w	r3, #240	; 0xf0
 8000a30:	db54      	blt.n	8000adc <PIDS_Prop+0xe8>
		return 100*hall->tickS;
 8000a32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	fa1f fc83 	uxth.w	ip, r3
 8000a40:	b21b      	sxth	r3, r3
	data_R->speed=calculateSpeed(hall_R);	hall_R->tickS=0;

	//Left
	data_L->error = data_L->speed_ref - data_L->speed;
	data_L->cmd = (int16_t)((float)data_L->error)*Prop->Kp;
 8000a42:	ed90 7a00 	vldr	s14, [r0]

	//Right
	data_R->error = data_R->speed_ref - data_R->speed;
 8000a46:	8810      	ldrh	r0, [r2, #0]
	data_R->speed=calculateSpeed(hall_R);	hall_R->tickS=0;
 8000a48:	8053      	strh	r3, [r2, #2]
	data_R->error = data_R->speed_ref - data_R->speed;
 8000a4a:	eba0 000c 	sub.w	r0, r0, ip
 8000a4e:	b200      	sxth	r0, r0
	data_R->cmd = (int16_t)((float)data_R->error)*Prop->Kp;
 8000a50:	ee07 0a90 	vmov	s15, r0
 8000a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	data_L->error = data_L->speed_ref - data_L->speed;
 8000a58:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8000a5c:	f8b1 c000 	ldrh.w	ip, [r1]
	data_R->cmd = (int16_t)((float)data_R->error)*Prop->Kp;
 8000a60:	ee67 7a87 	vmul.f32	s15, s15, s14
	data_L->error = data_L->speed_ref - data_L->speed;
 8000a64:	ebac 0c0e 	sub.w	ip, ip, lr
	data_R->cmd = (int16_t)((float)data_R->error)*Prop->Kp;
 8000a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	data_L->error = data_L->speed_ref - data_L->speed;
 8000a6c:	fa0f fc8c 	sxth.w	ip, ip
	data_R->cmd = (int16_t)((float)data_R->error)*Prop->Kp;
 8000a70:	ee17 3a90 	vmov	r3, s15
	data_L->cmd = (int16_t)((float)data_L->error)*Prop->Kp;
 8000a74:	ee07 ca90 	vmov	s15, ip
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	data_R->speed=calculateSpeed(hall_R);	hall_R->tickS=0;
 8000a7c:	f04f 0e00 	mov.w	lr, #0
	data_L->cmd = (int16_t)((float)data_L->error)*Prop->Kp;
 8000a80:	ee67 7a87 	vmul.f32	s15, s15, s14
	data_R->speed=calculateSpeed(hall_R);	hall_R->tickS=0;
 8000a84:	f8a4 e006 	strh.w	lr, [r4, #6]
	data_L->cmd = (int16_t)((float)data_L->error)*Prop->Kp;
 8000a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	data_R->cmd = (int16_t)((float)data_R->error)*Prop->Kp;
 8000a8c:	b21b      	sxth	r3, r3
	data_L->cmd = (int16_t)((float)data_L->error)*Prop->Kp;
 8000a8e:	ee17 4a90 	vmov	r4, s15
	data_L->error = data_L->speed_ref - data_L->speed;
 8000a92:	f8a1 c004 	strh.w	ip, [r1, #4]
	data_L->cmd = (int16_t)((float)data_L->error)*Prop->Kp;
 8000a96:	810c      	strh	r4, [r1, #8]
	data_R->cmd = (int16_t)((float)data_R->error)*Prop->Kp;
 8000a98:	8113      	strh	r3, [r2, #8]
	data_R->error = data_R->speed_ref - data_R->speed;
 8000a9a:	8090      	strh	r0, [r2, #4]

	//Saturation left
	if (data_L->cmd < DC_MIN)	data_L->cmdsat = (int16_t) DC_MIN;
 8000a9c:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8000aa0:	f110 0f5a 	cmn.w	r0, #90	; 0x5a
 8000aa4:	da0e      	bge.n	8000ac4 <PIDS_Prop+0xd0>
 8000aa6:	f64f 70a6 	movw	r0, #65446	; 0xffa6
 8000aaa:	8188      	strh	r0, [r1, #12]
	else if (data_L->cmd > DC_MAX)	data_L->cmdsat = (int16_t) DC_MAX;
	else	data_L->cmdsat = data_L->cmd;

	//Saturation right
	if (data_R->cmd < DC_MIN)	data_R->cmdsat = (int16_t) DC_MIN;
 8000aac:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8000ab0:	da03      	bge.n	8000aba <PIDS_Prop+0xc6>
 8000ab2:	f64f 73a6 	movw	r3, #65446	; 0xffa6
 8000ab6:	8193      	strh	r3, [r2, #12]
	else if (data_R->cmd > DC_MAX)	data_R->cmdsat = (int16_t) DC_MAX;
	else	data_R->cmdsat = data_R->cmd;
}
 8000ab8:	bd10      	pop	{r4, pc}
	else if (data_R->cmd > DC_MAX)	data_R->cmdsat = (int16_t) DC_MAX;
 8000aba:	2b5a      	cmp	r3, #90	; 0x5a
 8000abc:	bfc8      	it	gt
 8000abe:	235a      	movgt	r3, #90	; 0x5a
	else	data_R->cmdsat = data_R->cmd;
 8000ac0:	8193      	strh	r3, [r2, #12]
}
 8000ac2:	bd10      	pop	{r4, pc}
	else if (data_L->cmd > DC_MAX)	data_L->cmdsat = (int16_t) DC_MAX;
 8000ac4:	285a      	cmp	r0, #90	; 0x5a
 8000ac6:	bfc8      	it	gt
 8000ac8:	205a      	movgt	r0, #90	; 0x5a
	else	data_L->cmdsat = data_L->cmd;
 8000aca:	8188      	strh	r0, [r1, #12]
 8000acc:	e7ee      	b.n	8000aac <PIDS_Prop+0xb8>
		return (int16_t) MAX_SPEED;
 8000ace:	f644 6c20 	movw	ip, #20000	; 0x4e20
 8000ad2:	e7a1      	b.n	8000a18 <PIDS_Prop+0x24>
 8000ad4:	f644 6c20 	movw	ip, #20000	; 0x4e20
 8000ad8:	4663      	mov	r3, ip
 8000ada:	e7b2      	b.n	8000a42 <PIDS_Prop+0x4e>
		return (int16_t) MIN_SPEED;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <PIDS_Prop+0xf8>)
 8000ade:	f24b 1ce0 	movw	ip, #45536	; 0xb1e0
 8000ae2:	e7ae      	b.n	8000a42 <PIDS_Prop+0x4e>
 8000ae4:	f8df c004 	ldr.w	ip, [pc, #4]	; 8000aec <PIDS_Prop+0xf8>
 8000ae8:	e796      	b.n	8000a18 <PIDS_Prop+0x24>
 8000aea:	bf00      	nop
 8000aec:	ffffb1e0 	.word	0xffffb1e0

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	2300      	movs	r3, #0
{
 8000af4:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000afa:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000b02:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4928      	ldr	r1, [pc, #160]	; (8000ba8 <SystemClock_Config+0xb8>)
 8000b08:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0a:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b0e:	4a27      	ldr	r2, [pc, #156]	; (8000bac <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000b14:	6408      	str	r0, [r1, #64]	; 0x40
 8000b16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b18:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000b1c:	9100      	str	r1, [sp, #0]
 8000b1e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b30:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000b90 <SystemClock_Config+0xa0>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b38:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b3a:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3c:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b3e:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b40:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b46:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b48:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b50:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b54:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b58:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f001 f9f8 	bl	8001f50 <HAL_RCC_OscConfig>
 8000b60:	b108      	cbz	r0, 8000b66 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000b98 <SystemClock_Config+0xa8>
 8000b6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000b6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000ba0 <SystemClock_Config+0xb0>
 8000b72:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b74:	4621      	mov	r1, r4
 8000b76:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7e:	f001 f8d3 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000b82:	b108      	cbz	r0, 8000b88 <SystemClock_Config+0x98>
 8000b84:	b672      	cpsid	i
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <SystemClock_Config+0x96>
}
 8000b88:	b016      	add	sp, #88	; 0x58
 8000b8a:	bd10      	pop	{r4, pc}
 8000b8c:	f3af 8000 	nop.w
 8000b90:	00000001 	.word	0x00000001
 8000b94:	00010000 	.word	0x00010000
 8000b98:	0000000f 	.word	0x0000000f
 8000b9c:	00000002 	.word	0x00000002
 8000ba0:	00000080 	.word	0x00000080
 8000ba4:	00001000 	.word	0x00001000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <main>:
{
 8000bb0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	2400      	movs	r4, #0
{
 8000bb6:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 8000bb8:	f000 fd8a 	bl	80016d0 <HAL_Init>
  SystemClock_Config();
 8000bbc:	f7ff ff98 	bl	8000af0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000bc4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	4ba3      	ldr	r3, [pc, #652]	; (8000e58 <main+0x2a8>)
 8000bca:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd0:	48a2      	ldr	r0, [pc, #648]	; (8000e5c <main+0x2ac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	f042 0204 	orr.w	r2, r2, #4
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bda:	f002 0204 	and.w	r2, r2, #4
 8000bde:	9201      	str	r2, [sp, #4]
 8000be0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	9402      	str	r4, [sp, #8]
 8000be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
 8000bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000bf2:	9202      	str	r2, [sp, #8]
 8000bf4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	9403      	str	r4, [sp, #12]
 8000bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bfa:	f042 0201 	orr.w	r2, r2, #1
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8000c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c02:	f002 0201 	and.w	r2, r2, #1
 8000c06:	9203      	str	r2, [sp, #12]
 8000c08:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	9404      	str	r4, [sp, #16]
 8000c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0e:	f042 0202 	orr.w	r2, r2, #2
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
 8000c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c16:	f002 0202 	and.w	r2, r2, #2
 8000c1a:	9204      	str	r2, [sp, #16]
 8000c1c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	9405      	str	r4, [sp, #20]
 8000c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c22:	f042 0208 	orr.w	r2, r2, #8
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c30:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c32:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c34:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c36:	f001 f873 	bl	8001d20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN_B2_Pin|EN_B3_Pin, GPIO_PIN_RESET);
 8000c3a:	4889      	ldr	r0, [pc, #548]	; (8000e60 <main+0x2b0>)
 8000c3c:	4622      	mov	r2, r4
 8000c3e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000c42:	f001 f86d 	bl	8001d20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PUSHER_GPIO_Port, PUSHER_Pin, GPIO_PIN_RESET);
 8000c46:	4887      	ldr	r0, [pc, #540]	; (8000e64 <main+0x2b4>)
 8000c48:	4622      	mov	r2, r4
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	f001 f868 	bl	8001d20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000c50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	4881      	ldr	r0, [pc, #516]	; (8000e60 <main+0x2b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f000 ff45 	bl	8001af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c66:	2220      	movs	r2, #32
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	487b      	ldr	r0, [pc, #492]	; (8000e5c <main+0x2ac>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c70:	2200      	movs	r2, #0
 8000c72:	2300      	movs	r3, #0
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c74:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c76:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f000 ff39 	bl	8001af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = H1_L_Pin|H2_L_Pin|H3_L_Pin|H1_R_Pin
 8000c7e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8000c82:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	4878      	ldr	r0, [pc, #480]	; (8000e68 <main+0x2b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = H1_L_Pin|H2_L_Pin|H3_L_Pin|H1_R_Pin
 8000c8a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f000 ff2f 	bl	8001af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BAT_INT_Pin;
 8000c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c96:	2300      	movs	r3, #0
  HAL_GPIO_Init(BAT_INT_GPIO_Port, &GPIO_InitStruct);
 8000c98:	4871      	ldr	r0, [pc, #452]	; (8000e60 <main+0x2b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(BAT_INT_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = BAT_INT_Pin;
 8000c9e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = EN_B2_Pin|EN_B3_Pin;
 8000ca2:	2602      	movs	r6, #2
  HAL_GPIO_Init(BAT_INT_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f000 ff24 	bl	8001af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_B2_Pin|EN_B3_Pin;
 8000ca8:	2700      	movs	r7, #0
 8000caa:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000cae:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	486b      	ldr	r0, [pc, #428]	; (8000e60 <main+0x2b0>)
 8000cb2:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = EN_B2_Pin|EN_B3_Pin;
 8000cb4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000cb8:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f000 ff18 	bl	8001af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PUSHER_Pin;
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	2301      	movs	r3, #1
  HAL_GPIO_Init(PUSHER_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	4867      	ldr	r0, [pc, #412]	; (8000e64 <main+0x2b4>)
 8000cc6:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = PUSHER_Pin;
 8000cc8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000ccc:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(PUSHER_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f000 ff0e 	bl	8001af0 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000cd4:	4865      	ldr	r0, [pc, #404]	; (8000e6c <main+0x2bc>)
  huart2.Init.BaudRate = 115200;
 8000cd6:	4a66      	ldr	r2, [pc, #408]	; (8000e70 <main+0x2c0>)
 8000cd8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cdc:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce6:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cea:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cee:	f002 f847 	bl	8002d80 <HAL_UART_Init>
 8000cf2:	b108      	cbz	r0, 8000cf8 <main+0x148>
 8000cf4:	b672      	cpsid	i
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <main+0x146>
  hadc1.Instance = ADC1;
 8000cf8:	4c5e      	ldr	r4, [pc, #376]	; (8000e74 <main+0x2c4>)
 8000cfa:	495f      	ldr	r1, [pc, #380]	; (8000e78 <main+0x2c8>)
 8000cfc:	6021      	str	r1, [r4, #0]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4603      	mov	r3, r0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d02:	e9c4 2204 	strd	r2, r2, [r4, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d06:	4a5d      	ldr	r2, [pc, #372]	; (8000e7c <main+0x2cc>)
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d08:	7623      	strb	r3, [r4, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d0a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d0e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d12:	60e3      	str	r3, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d14:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d18:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 8000d1e:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d22:	e9c4 1001 	strd	r1, r0, [r4, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000d26:	2608      	movs	r6, #8
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d28:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2c:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 8;
 8000d2e:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d30:	f000 fcfa 	bl	8001728 <HAL_ADC_Init>
 8000d34:	b108      	cbz	r0, 8000d3a <main+0x18a>
 8000d36:	b672      	cpsid	i
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x188>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d3a:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.Channel = ADC_CHANNEL_10;
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d40:	a914      	add	r1, sp, #80	; 0x50
 8000d42:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_10;
 8000d44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	f000 fd9c 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000d4c:	b108      	cbz	r0, 8000d52 <main+0x1a2>
 8000d4e:	b672      	cpsid	i
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <main+0x1a0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000d52:	2204      	movs	r2, #4
 8000d54:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	a914      	add	r1, sp, #80	; 0x50
 8000d58:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8000d5a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5e:	f000 fd91 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000d62:	b108      	cbz	r0, 8000d68 <main+0x1b8>
 8000d64:	b672      	cpsid	i
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <main+0x1b6>
  sConfig.Rank = 3;
 8000d68:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	a914      	add	r1, sp, #80	; 0x50
 8000d6c:	4620      	mov	r0, r4
  sConfig.Rank = 3;
 8000d6e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	f000 fd88 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000d74:	b108      	cbz	r0, 8000d7a <main+0x1ca>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <main+0x1c8>
  sConfig.Rank = 4;
 8000d7a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7c:	a914      	add	r1, sp, #80	; 0x50
 8000d7e:	4620      	mov	r0, r4
  sConfig.Rank = 4;
 8000d80:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	f000 fd7f 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000d86:	b108      	cbz	r0, 8000d8c <main+0x1dc>
 8000d88:	b672      	cpsid	i
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <main+0x1da>
  sConfig.Rank = 5;
 8000d8c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	a914      	add	r1, sp, #80	; 0x50
 8000d90:	4620      	mov	r0, r4
  sConfig.Rank = 5;
 8000d92:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d94:	f000 fd76 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000d98:	b108      	cbz	r0, 8000d9e <main+0x1ee>
 8000d9a:	b672      	cpsid	i
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <main+0x1ec>
  sConfig.Rank = 6;
 8000d9e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da0:	a914      	add	r1, sp, #80	; 0x50
 8000da2:	4620      	mov	r0, r4
  sConfig.Rank = 6;
 8000da4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	f000 fd6d 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000daa:	b108      	cbz	r0, 8000db0 <main+0x200>
 8000dac:	b672      	cpsid	i
  while (1)
 8000dae:	e7fe      	b.n	8000dae <main+0x1fe>
  sConfig.Rank = 7;
 8000db0:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	a914      	add	r1, sp, #80	; 0x50
 8000db4:	4620      	mov	r0, r4
  sConfig.Rank = 7;
 8000db6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	f000 fd64 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000dbc:	b108      	cbz	r0, 8000dc2 <main+0x212>
 8000dbe:	b672      	cpsid	i
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <main+0x210>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	a914      	add	r1, sp, #80	; 0x50
 8000dc4:	4620      	mov	r0, r4
  sConfig.Rank = 8;
 8000dc6:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc8:	f000 fd5c 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000dcc:	b108      	cbz	r0, 8000dd2 <main+0x222>
 8000dce:	b672      	cpsid	i
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <main+0x220>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8000dd4:	4e2a      	ldr	r6, [pc, #168]	; (8000e80 <main+0x2d0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	9408      	str	r4, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dd8:	2220      	movs	r2, #32
 8000dda:	4621      	mov	r1, r4
 8000ddc:	a814      	add	r0, sp, #80	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000de6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000dea:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df0:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df6:	f002 f887 	bl	8002f08 <memset>
  htim1.Init.Prescaler = 28-1;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <main+0x2d4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	60b4      	str	r4, [r6, #8]
  htim1.Init.Prescaler = 28-1;
 8000dfe:	f04f 081b 	mov.w	r8, #27
  htim1.Init.Period = 100-1;
 8000e02:	2563      	movs	r5, #99	; 0x63
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e04:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 28-1;
 8000e06:	e9c6 3800 	strd	r3, r8, [r6]
  htim1.Init.RepetitionCounter = 0;
 8000e0a:	e9c6 4404 	strd	r4, r4, [r6, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	61b4      	str	r4, [r6, #24]
  htim1.Init.Period = 100-1;
 8000e10:	60f5      	str	r5, [r6, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e12:	f001 faa3 	bl	800235c <HAL_TIM_Base_Init>
 8000e16:	b108      	cbz	r0, 8000e1c <main+0x26c>
 8000e18:	b672      	cpsid	i
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <main+0x26a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e20:	a908      	add	r1, sp, #32
 8000e22:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e24:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e26:	f001 fd75 	bl	8002914 <HAL_TIM_ConfigClockSource>
 8000e2a:	b108      	cbz	r0, 8000e30 <main+0x280>
 8000e2c:	b672      	cpsid	i
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <main+0x27e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e30:	4630      	mov	r0, r6
 8000e32:	f001 fb5f 	bl	80024f4 <HAL_TIM_PWM_Init>
 8000e36:	b108      	cbz	r0, 8000e3c <main+0x28c>
 8000e38:	b672      	cpsid	i
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <main+0x28a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3c:	a906      	add	r1, sp, #24
 8000e3e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	f04f 0a00 	mov.w	sl, #0
 8000e44:	f04f 0b00 	mov.w	fp, #0
 8000e48:	e9cd ab06 	strd	sl, fp, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4c:	f001 ff2a 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4602      	mov	r2, r0
 8000e52:	b1c8      	cbz	r0, 8000e88 <main+0x2d8>
 8000e54:	b672      	cpsid	i
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <main+0x2a6>
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	20000260 	.word	0x20000260
 8000e70:	40004400 	.word	0x40004400
 8000e74:	200000e0 	.word	0x200000e0
 8000e78:	40012000 	.word	0x40012000
 8000e7c:	0f000001 	.word	0x0f000001
 8000e80:	20000140 	.word	0x20000140
 8000e84:	40010000 	.word	0x40010000
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8000e8c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e90:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	f04f 0a60 	mov.w	sl, #96	; 0x60
 8000e96:	f04f 0b00 	mov.w	fp, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9a:	a90c      	add	r1, sp, #48	; 0x30
 8000e9c:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	f001 fc27 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	b108      	cbz	r0, 8000eac <main+0x2fc>
 8000ea8:	b672      	cpsid	i
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <main+0x2fa>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eac:	2204      	movs	r2, #4
 8000eae:	a90c      	add	r1, sp, #48	; 0x30
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f001 fc1f 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	b108      	cbz	r0, 8000ebc <main+0x30c>
 8000eb8:	b672      	cpsid	i
  while (1)
 8000eba:	e7fe      	b.n	8000eba <main+0x30a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	a90c      	add	r1, sp, #48	; 0x30
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	f001 fc17 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000ec6:	b108      	cbz	r0, 8000ecc <main+0x31c>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x31a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ede:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee6:	a914      	add	r1, sp, #80	; 0x50
 8000ee8:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000eea:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eee:	f001 ff19 	bl	8002d24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	b108      	cbz	r0, 8000efa <main+0x34a>
 8000ef6:	b672      	cpsid	i
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x348>
  HAL_TIM_MspPostInit(&htim1);
 8000efa:	4630      	mov	r0, r6
  htim8.Instance = TIM8;
 8000efc:	4e74      	ldr	r6, [pc, #464]	; (80010d0 <main+0x520>)
  HAL_TIM_MspPostInit(&htim1);
 8000efe:	f000 fa61 	bl	80013c4 <HAL_TIM_MspPostInit>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f02:	2220      	movs	r2, #32
 8000f04:	4621      	mov	r1, r4
 8000f06:	a814      	add	r0, sp, #80	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f08:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000f0c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f14:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000f18:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000f1c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000f20:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f22:	f001 fff1 	bl	8002f08 <memset>
  htim8.Instance = TIM8;
 8000f26:	4b6b      	ldr	r3, [pc, #428]	; (80010d4 <main+0x524>)
  htim8.Init.Prescaler = 28-1;
 8000f28:	f8c6 8004 	str.w	r8, [r6, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f2c:	4630      	mov	r0, r6
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	e9c6 4502 	strd	r4, r5, [r6, #8]
  htim8.Init.RepetitionCounter = 0;
 8000f32:	e9c6 4404 	strd	r4, r4, [r6, #16]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	61b4      	str	r4, [r6, #24]
  htim8.Instance = TIM8;
 8000f38:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f3a:	f001 fa0f 	bl	800235c <HAL_TIM_Base_Init>
 8000f3e:	b108      	cbz	r0, 8000f44 <main+0x394>
 8000f40:	b672      	cpsid	i
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <main+0x392>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f44:	a908      	add	r1, sp, #32
 8000f46:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f48:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f001 fce3 	bl	8002914 <HAL_TIM_ConfigClockSource>
 8000f4e:	b108      	cbz	r0, 8000f54 <main+0x3a4>
 8000f50:	b672      	cpsid	i
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <main+0x3a2>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f54:	485e      	ldr	r0, [pc, #376]	; (80010d0 <main+0x520>)
 8000f56:	f001 facd 	bl	80024f4 <HAL_TIM_PWM_Init>
 8000f5a:	b108      	cbz	r0, 8000f60 <main+0x3b0>
 8000f5c:	b672      	cpsid	i
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <main+0x3ae>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f60:	485b      	ldr	r0, [pc, #364]	; (80010d0 <main+0x520>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	f04f 0800 	mov.w	r8, #0
 8000f66:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f6a:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f70:	f001 fe98 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4602      	mov	r2, r0
 8000f76:	b108      	cbz	r0, 8000f7c <main+0x3cc>
 8000f78:	b672      	cpsid	i
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <main+0x3ca>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f7c:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2460      	movs	r4, #96	; 0x60
 8000f80:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f82:	4853      	ldr	r0, [pc, #332]	; (80010d0 <main+0x520>)
 8000f84:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f86:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8000f8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8000f8e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f92:	f001 fbaf 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000f96:	b108      	cbz	r0, 8000f9c <main+0x3ec>
 8000f98:	b672      	cpsid	i
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <main+0x3ea>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f9c:	484c      	ldr	r0, [pc, #304]	; (80010d0 <main+0x520>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	a90c      	add	r1, sp, #48	; 0x30
 8000fa2:	f001 fba7 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000fa6:	b108      	cbz	r0, 8000fac <main+0x3fc>
 8000fa8:	b672      	cpsid	i
  while (1)
 8000faa:	e7fe      	b.n	8000faa <main+0x3fa>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fac:	4848      	ldr	r0, [pc, #288]	; (80010d0 <main+0x520>)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	a90c      	add	r1, sp, #48	; 0x30
 8000fb2:	f001 fb9f 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000fb6:	b108      	cbz	r0, 8000fbc <main+0x40c>
 8000fb8:	b672      	cpsid	i
  while (1)
 8000fba:	e7fe      	b.n	8000fba <main+0x40a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fce:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd6:	483e      	ldr	r0, [pc, #248]	; (80010d0 <main+0x520>)
 8000fd8:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000fda:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000fde:	f001 fea1 	bl	8002d24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	b108      	cbz	r0, 8000fea <main+0x43a>
 8000fe6:	b672      	cpsid	i
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x438>
  HAL_TIM_MspPostInit(&htim8);
 8000fea:	4839      	ldr	r0, [pc, #228]	; (80010d0 <main+0x520>)
  htim6.Instance = TIM6;
 8000fec:	4c3a      	ldr	r4, [pc, #232]	; (80010d8 <main+0x528>)
  HAL_TIM_MspPostInit(&htim8);
 8000fee:	f000 f9e9 	bl	80013c4 <HAL_TIM_MspPostInit>
  htim6.Init.Prescaler = 84-1;
 8000ff2:	493a      	ldr	r1, [pc, #232]	; (80010dc <main+0x52c>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	60a6      	str	r6, [r4, #8]
  htim6.Init.Prescaler = 84-1;
 8000ff6:	2353      	movs	r3, #83	; 0x53
 8000ff8:	e9c4 1300 	strd	r1, r3, [r4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ffc:	4620      	mov	r0, r4
  htim6.Init.Period = 10-1;
 8000ffe:	2309      	movs	r3, #9
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	61a6      	str	r6, [r4, #24]
  htim6.Init.Period = 10-1;
 8001006:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001008:	f001 f9a8 	bl	800235c <HAL_TIM_Base_Init>
 800100c:	b108      	cbz	r0, 8001012 <main+0x462>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <main+0x460>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001012:	a914      	add	r1, sp, #80	; 0x50
 8001014:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800101a:	f001 fe43 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	b108      	cbz	r0, 8001024 <main+0x474>
 8001020:	b672      	cpsid	i
  while (1)
 8001022:	e7fe      	b.n	8001022 <main+0x472>
  htim7.Instance = TIM7;
 8001024:	4c2e      	ldr	r4, [pc, #184]	; (80010e0 <main+0x530>)
  htim7.Init.Prescaler = 8400-1;
 8001026:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <main+0x534>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	60a0      	str	r0, [r4, #8]
  htim7.Init.Prescaler = 8400-1;
 800102a:	f242 03cf 	movw	r3, #8399	; 0x20cf
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  htim7.Init.Prescaler = 8400-1;
 8001032:	e9c4 2300 	strd	r2, r3, [r4]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	61a0      	str	r0, [r4, #24]
  htim7.Init.Period = 1;
 8001038:	2301      	movs	r3, #1
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800103a:	4620      	mov	r0, r4
  htim7.Init.Period = 1;
 800103c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800103e:	f001 f98d 	bl	800235c <HAL_TIM_Base_Init>
 8001042:	b108      	cbz	r0, 8001048 <main+0x498>
 8001044:	b672      	cpsid	i
  while (1)
 8001046:	e7fe      	b.n	8001046 <main+0x496>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001048:	a914      	add	r1, sp, #80	; 0x50
 800104a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001050:	f001 fe28 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	b108      	cbz	r0, 800105a <main+0x4aa>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x4a8>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	4822      	ldr	r0, [pc, #136]	; (80010e8 <main+0x538>)
 800105e:	f001 fad7 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001062:	2100      	movs	r1, #0
 8001064:	4820      	ldr	r0, [pc, #128]	; (80010e8 <main+0x538>)
 8001066:	f001 fdb7 	bl	8002bd8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800106a:	2104      	movs	r1, #4
 800106c:	481e      	ldr	r0, [pc, #120]	; (80010e8 <main+0x538>)
 800106e:	f001 facf 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001072:	2104      	movs	r1, #4
 8001074:	481c      	ldr	r0, [pc, #112]	; (80010e8 <main+0x538>)
 8001076:	f001 fdaf 	bl	8002bd8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800107a:	2108      	movs	r1, #8
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <main+0x538>)
 800107e:	f001 fac7 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001082:	2108      	movs	r1, #8
 8001084:	4818      	ldr	r0, [pc, #96]	; (80010e8 <main+0x538>)
 8001086:	f001 fda7 	bl	8002bd8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800108a:	2100      	movs	r1, #0
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <main+0x520>)
 800108e:	f001 fabf 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001092:	2100      	movs	r1, #0
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <main+0x520>)
 8001096:	f001 fd9f 	bl	8002bd8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800109a:	2104      	movs	r1, #4
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <main+0x520>)
 800109e:	f001 fab7 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80010a2:	2104      	movs	r1, #4
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <main+0x520>)
 80010a6:	f001 fd97 	bl	8002bd8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80010aa:	2108      	movs	r1, #8
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <main+0x520>)
 80010ae:	f001 faaf 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80010b2:	2108      	movs	r1, #8
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x520>)
 80010b6:	f001 fd8f 	bl	8002bd8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <main+0x528>)
 80010bc:	f001 f9dc 	bl	8002478 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <main+0x530>)
 80010c2:	f001 f9d9 	bl	8002478 <HAL_TIM_Base_Start_IT>
  TIM7->ARR = FREQ_TIM7/100; //set TIM7 interrupt frequency 100Hz
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <main+0x534>)
 80010c8:	2264      	movs	r2, #100	; 0x64
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x51c>
 80010ce:	bf00      	nop
 80010d0:	20000218 	.word	0x20000218
 80010d4:	40010400 	.word	0x40010400
 80010d8:	20000188 	.word	0x20000188
 80010dc:	40001000 	.word	0x40001000
 80010e0:	200001d0 	.word	0x200001d0
 80010e4:	40001400 	.word	0x40001400
 80010e8:	20000140 	.word	0x20000140

080010ec <HAL_TIM_PeriodElapsedCallback>:
{
 80010ec:	b570      	push	{r4, r5, r6, lr}
	if (htim == &htim6)
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010f0:	4298      	cmp	r0, r3
{
 80010f2:	b082      	sub	sp, #8
	if (htim == &htim6)
 80010f4:	d038      	beq.n	8001168 <HAL_TIM_PeriodElapsedCallback+0x7c>
	if (htim == &htim7)
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010f8:	4298      	cmp	r0, r3
 80010fa:	d001      	beq.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x14>
}
 80010fc:	b002      	add	sp, #8
 80010fe:	bd70      	pop	{r4, r5, r6, pc}
		if (millis < 5000)
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	f241 3287 	movw	r2, #4999	; 0x1387
 8001108:	4293      	cmp	r3, r2
 800110a:	d962      	bls.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0xe6>
		else if (millis < N)
 800110c:	f643 02a2 	movw	r2, #14498	; 0x38a2
 8001110:	4293      	cmp	r3, r2
 8001112:	d867      	bhi.n	80011e4 <HAL_TIM_PeriodElapsedCallback+0xf8>
			dataSpeed_L.speed_ref=speed_refs[1];
 8001114:	4b39      	ldr	r3, [pc, #228]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001116:	4d3a      	ldr	r5, [pc, #232]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			dataSpeed_R.speed_ref=-speed_refs[1];
 800111c:	4c39      	ldr	r4, [pc, #228]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x118>)
			dataSpeed_L.speed_ref=speed_refs[1];
 800111e:	802b      	strh	r3, [r5, #0]
			dataSpeed_R.speed_ref=-speed_refs[1];
 8001120:	425a      	negs	r2, r3
 8001122:	8022      	strh	r2, [r4, #0]
		PIDS_Prop(&Speed_P, &dataSpeed_L,&dataSpeed_R,&hall_L, &hall_R);
 8001124:	4938      	ldr	r1, [pc, #224]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001126:	4b39      	ldr	r3, [pc, #228]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001128:	4a36      	ldr	r2, [pc, #216]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800112a:	9100      	str	r1, [sp, #0]
 800112c:	4838      	ldr	r0, [pc, #224]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800112e:	4934      	ldr	r1, [pc, #208]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x114>)
		printf("cpt : %d\n", cpt);
 8001130:	4e38      	ldr	r6, [pc, #224]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x128>)
		PIDS_Prop(&Speed_P, &dataSpeed_L,&dataSpeed_R,&hall_L, &hall_R);
 8001132:	f7ff fc5f 	bl	80009f4 <PIDS_Prop>
		writeCommand_L(&PWM_L,&dataSpeed_L);
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001138:	4837      	ldr	r0, [pc, #220]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800113a:	f7ff fc17 	bl	800096c <writeCommand_L>
		writeCommand_R(&PWM_R,&dataSpeed_R);
 800113e:	4931      	ldr	r1, [pc, #196]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001140:	4836      	ldr	r0, [pc, #216]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001142:	f7ff fc35 	bl	80009b0 <writeCommand_R>
		dataSpeed_L.prev_cmd=dataSpeed_L.cmd;
 8001146:	892a      	ldrh	r2, [r5, #8]
		dataSpeed_L.prev_error=dataSpeed_L.error;
 8001148:	88ab      	ldrh	r3, [r5, #4]
		dataSpeed_L.prev_cmd=dataSpeed_L.cmd;
 800114a:	816a      	strh	r2, [r5, #10]
		dataSpeed_L.prev_error=dataSpeed_L.error;
 800114c:	80eb      	strh	r3, [r5, #6]
		dataSpeed_R.prev_cmd=dataSpeed_R.cmd;
 800114e:	8922      	ldrh	r2, [r4, #8]
		dataSpeed_R.prev_error=dataSpeed_R.error;
 8001150:	88a3      	ldrh	r3, [r4, #4]
		printf("cpt : %d\n", cpt);
 8001152:	f9b6 1000 	ldrsh.w	r1, [r6]
 8001156:	4832      	ldr	r0, [pc, #200]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x134>)
		dataSpeed_R.prev_error=dataSpeed_R.error;
 8001158:	80e3      	strh	r3, [r4, #6]
		dataSpeed_R.prev_cmd=dataSpeed_R.cmd;
 800115a:	8162      	strh	r2, [r4, #10]
		printf("cpt : %d\n", cpt);
 800115c:	f001 fedc 	bl	8002f18 <iprintf>
		cpt=0;
 8001160:	2300      	movs	r3, #0
 8001162:	8033      	strh	r3, [r6, #0]
}
 8001164:	b002      	add	sp, #8
 8001166:	bd70      	pop	{r4, r5, r6, pc}
		if(millis_div)
 8001168:	4c2e      	ldr	r4, [pc, #184]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800116a:	7823      	ldrb	r3, [r4, #0]
 800116c:	b34b      	cbz	r3, 80011c2 <HAL_TIM_PeriodElapsedCallback+0xd6>
			if (millis < N)
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001170:	8813      	ldrh	r3, [r2, #0]
 8001172:	f643 01a2 	movw	r1, #14498	; 0x38a2
 8001176:	428b      	cmp	r3, r1
 8001178:	d808      	bhi.n	800118c <HAL_TIM_PeriodElapsedCallback+0xa0>
				if (millis_cpt >=50) //millis -> 1ms
 800117a:	482b      	ldr	r0, [pc, #172]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800117c:	7801      	ldrb	r1, [r0, #0]
 800117e:	2931      	cmp	r1, #49	; 0x31
					millis++;	millis_cpt=0;
 8001180:	bf85      	ittet	hi
 8001182:	3301      	addhi	r3, #1
 8001184:	2100      	movhi	r1, #0
					millis_cpt++;
 8001186:	3101      	addls	r1, #1
					millis++;	millis_cpt=0;
 8001188:	8013      	strhhi	r3, [r2, #0]
					millis_cpt++;
 800118a:	7001      	strb	r1, [r0, #0]
			readHall_L(&hall_L);	readHall_R(&hall_R);
 800118c:	481f      	ldr	r0, [pc, #124]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x120>)
			decodeHall(&hall_L,&PWM_L); decodeHall(&hall_R,&PWM_R);
 800118e:	4e22      	ldr	r6, [pc, #136]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001190:	4d22      	ldr	r5, [pc, #136]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x130>)
			readHall_L(&hall_L);	readHall_R(&hall_R);
 8001192:	f7ff fa3f 	bl	8000614 <readHall_L>
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001198:	f7ff fa52 	bl	8000640 <readHall_R>
			decodeHall(&hall_L,&PWM_L); decodeHall(&hall_R,&PWM_R);
 800119c:	481b      	ldr	r0, [pc, #108]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800119e:	4631      	mov	r1, r6
 80011a0:	f7ff fa66 	bl	8000670 <decodeHall>
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff fa62 	bl	8000670 <decodeHall>
			updateOutput_L(PWM_L); updateOutput_R(PWM_R);
 80011ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 80011b0:	f7ff faf8 	bl	80007a4 <updateOutput_L>
 80011b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011b8:	f7ff fb66 	bl	8000888 <updateOutput_R>
			millis_div=0;					//reset freq divider
 80011bc:	2300      	movs	r3, #0
 80011be:	7023      	strb	r3, [r4, #0]
 80011c0:	e001      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0xda>
 			millis_div++;
 80011c2:	2301      	movs	r3, #1
 80011c4:	7023      	strb	r3, [r4, #0]
		cpt++;
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011c8:	8813      	ldrh	r3, [r2, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	8013      	strh	r3, [r2, #0]
}
 80011ce:	b002      	add	sp, #8
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
			dataSpeed_L.speed_ref=speed_refs[0];
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011d4:	4d0a      	ldr	r5, [pc, #40]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
			dataSpeed_R.speed_ref=-speed_refs[0];
 80011da:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x118>)
			dataSpeed_L.speed_ref=speed_refs[0];
 80011dc:	802b      	strh	r3, [r5, #0]
			dataSpeed_R.speed_ref=-speed_refs[0];
 80011de:	425a      	negs	r2, r3
 80011e0:	8022      	strh	r2, [r4, #0]
 80011e2:	e79f      	b.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x38>
			dataSpeed_L.speed_ref=0;
 80011e4:	4d06      	ldr	r5, [pc, #24]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x114>)
			dataSpeed_R.speed_ref=0;
 80011e6:	4c07      	ldr	r4, [pc, #28]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x118>)
			dataSpeed_L.speed_ref=0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	802b      	strh	r3, [r5, #0]
			dataSpeed_R.speed_ref=0;
 80011ec:	8023      	strh	r3, [r4, #0]
 80011ee:	e799      	b.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x38>
 80011f0:	20000188 	.word	0x20000188
 80011f4:	200001d0 	.word	0x200001d0
 80011f8:	200002a4 	.word	0x200002a4
 80011fc:	2000001c 	.word	0x2000001c
 8001200:	200000c0 	.word	0x200000c0
 8001204:	200000d0 	.word	0x200000d0
 8001208:	20000134 	.word	0x20000134
 800120c:	20000128 	.word	0x20000128
 8001210:	20000008 	.word	0x20000008
 8001214:	200000bc 	.word	0x200000bc
 8001218:	20000000 	.word	0x20000000
 800121c:	200000b4 	.word	0x200000b4
 8001220:	08003e4c 	.word	0x08003e4c
 8001224:	200002a7 	.word	0x200002a7
 8001228:	200002a6 	.word	0x200002a6

0800122c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x38>)
 8001230:	2100      	movs	r1, #0
 8001232:	9100      	str	r1, [sp, #0]
 8001234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
 800123c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800123e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001242:	9200      	str	r2, [sp, #0]
 8001244:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	9101      	str	r1, [sp, #4]
 8001248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800125a:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800125e:	f000 bbcf 	b.w	8001a00 <HAL_NVIC_SetPriorityGrouping>
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_ADC_MspInit+0x84>)
 800126c:	6802      	ldr	r2, [r0, #0]
{
 800126e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001272:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001278:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800127c:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001280:	b00a      	add	sp, #40	; 0x28
 8001282:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001284:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001288:	9401      	str	r4, [sp, #4]
 800128a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	4818      	ldr	r0, [pc, #96]	; (80012f0 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001292:	645a      	str	r2, [r3, #68]	; 0x44
 8001294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001296:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800129a:	9201      	str	r2, [sp, #4]
 800129c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	9402      	str	r4, [sp, #8]
 80012a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a2:	f042 0204 	orr.w	r2, r2, #4
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
 80012a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012aa:	f002 0204 	and.w	r2, r2, #4
 80012ae:	9202      	str	r2, [sp, #8]
 80012b0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	9403      	str	r4, [sp, #12]
 80012b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = IA_L_Pin|IB_L_Pin|IC_L_Pin|IA_R_Pin
 80012c6:	223f      	movs	r2, #63	; 0x3f
 80012c8:	2303      	movs	r3, #3
 80012ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f000 fc0e 	bl	8001af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BAT_V_Pin|BAT_I_Pin;
 80012d4:	2250      	movs	r2, #80	; 0x50
 80012d6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BAT_V_Pin|BAT_I_Pin;
 80012de:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f000 fc05 	bl	8001af0 <HAL_GPIO_Init>
}
 80012e6:	b00a      	add	sp, #40	; 0x28
 80012e8:	bd10      	pop	{r4, pc}
 80012ea:	bf00      	nop
 80012ec:	40012000 	.word	0x40012000
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020000 	.word	0x40020000

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <HAL_TIM_Base_MspInit+0xb8>)
 80012fc:	6803      	ldr	r3, [r0, #0]
 80012fe:	4293      	cmp	r3, r2
{
 8001300:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8001302:	d00b      	beq.n	800131c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001304:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <HAL_TIM_Base_MspInit+0xbc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d03c      	beq.n	8001384 <HAL_TIM_Base_MspInit+0x8c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 800130a:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <HAL_TIM_Base_MspInit+0xc0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d014      	beq.n	800133a <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8001310:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <HAL_TIM_Base_MspInit+0xc4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d027      	beq.n	8001366 <HAL_TIM_Base_MspInit+0x6e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001316:	b005      	add	sp, #20
 8001318:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_TIM_Base_MspInit+0xc8>)
 800131e:	2200      	movs	r2, #0
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001324:	f042 0201 	orr.w	r2, r2, #1
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	9b00      	ldr	r3, [sp, #0]
}
 8001334:	b005      	add	sp, #20
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 800133a:	2200      	movs	r2, #0
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_TIM_Base_MspInit+0xc8>)
 800133e:	9202      	str	r2, [sp, #8]
 8001340:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001342:	f041 0120 	orr.w	r1, r1, #32
 8001346:	6419      	str	r1, [r3, #64]	; 0x40
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001350:	2037      	movs	r0, #55	; 0x37
 8001352:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001354:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001356:	f000 fb65 	bl	8001a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800135a:	2037      	movs	r0, #55	; 0x37
}
 800135c:	b005      	add	sp, #20
 800135e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001362:	f000 bb9d 	b.w	8001aa0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_TIM_Base_MspInit+0xc8>)
 8001368:	2200      	movs	r2, #0
 800136a:	9203      	str	r2, [sp, #12]
 800136c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800136e:	f042 0202 	orr.w	r2, r2, #2
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	9303      	str	r3, [sp, #12]
 800137c:	9b03      	ldr	r3, [sp, #12]
}
 800137e:	b005      	add	sp, #20
 8001380:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001384:	2200      	movs	r2, #0
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_TIM_Base_MspInit+0xc8>)
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800138c:	f041 0110 	orr.w	r1, r1, #16
 8001390:	6419      	str	r1, [r3, #64]	; 0x40
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800139a:	2036      	movs	r0, #54	; 0x36
 800139c:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800139e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013a0:	f000 fb40 	bl	8001a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013a4:	2036      	movs	r0, #54	; 0x36
}
 80013a6:	b005      	add	sp, #20
 80013a8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013ac:	f000 bb78 	b.w	8001aa0 <HAL_NVIC_EnableIRQ>
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40001000 	.word	0x40001000
 80013b8:	40001400 	.word	0x40001400
 80013bc:	40010400 	.word	0x40010400
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c4:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80013c6:	6802      	ldr	r2, [r0, #0]
 80013c8:	4942      	ldr	r1, [pc, #264]	; (80014d4 <HAL_TIM_MspPostInit+0x110>)
{
 80013ca:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80013ce:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80013d4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80013d8:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim->Instance==TIM1)
 80013da:	d004      	beq.n	80013e6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 80013dc:	493e      	ldr	r1, [pc, #248]	; (80014d8 <HAL_TIM_MspPostInit+0x114>)
 80013de:	428a      	cmp	r2, r1
 80013e0:	d031      	beq.n	8001446 <HAL_TIM_MspPostInit+0x82>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80013e2:	b00c      	add	sp, #48	; 0x30
 80013e4:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <HAL_TIM_MspPostInit+0x118>)
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	483c      	ldr	r0, [pc, #240]	; (80014e0 <HAL_TIM_MspPostInit+0x11c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	f041 0102 	orr.w	r1, r1, #2
 80013f2:	6311      	str	r1, [r2, #48]	; 0x30
 80013f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013f6:	f001 0102 	and.w	r1, r1, #2
 80013fa:	9101      	str	r1, [sp, #4]
 80013fc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001402:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4323      	orrs	r3, r4
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
 8001408:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800140a:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4023      	ands	r3, r4
 800140e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = BL_L_Pin|CL_L_Pin|AL_L_Pin;
 8001410:	f242 0203 	movw	r2, #8195	; 0x2003
 8001414:	2302      	movs	r3, #2
 8001416:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800141c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001420:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f000 fb65 	bl	8001af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AH_L_Pin|BH_L_Pin|CH_L_Pin;
 8001426:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800142a:	2302      	movs	r3, #2
 800142c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001432:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = AH_L_Pin|BH_L_Pin|CH_L_Pin;
 8001434:	2202      	movs	r2, #2
 8001436:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = AH_L_Pin|BH_L_Pin|CH_L_Pin;
 800143a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f000 fb57 	bl	8001af0 <HAL_GPIO_Init>
}
 8001442:	b00c      	add	sp, #48	; 0x30
 8001444:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4a25      	ldr	r2, [pc, #148]	; (80014dc <HAL_TIM_MspPostInit+0x118>)
 8001448:	9303      	str	r3, [sp, #12]
 800144a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(AL_R_GPIO_Port, &GPIO_InitStruct);
 800144c:	4825      	ldr	r0, [pc, #148]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	f041 0101 	orr.w	r1, r1, #1
 8001452:	6311      	str	r1, [r2, #48]	; 0x30
 8001454:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001456:	f001 0101 	and.w	r1, r1, #1
 800145a:	9103      	str	r1, [sp, #12]
 800145c:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	9304      	str	r3, [sp, #16]
 8001460:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001462:	f041 0102 	orr.w	r1, r1, #2
 8001466:	6311      	str	r1, [r2, #48]	; 0x30
 8001468:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800146a:	f001 0102 	and.w	r1, r1, #2
 800146e:	9104      	str	r1, [sp, #16]
 8001470:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = AL_R_Pin;
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	2302      	movs	r3, #2
 8001488:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800148c:	2403      	movs	r4, #3
    HAL_GPIO_Init(AL_R_GPIO_Port, &GPIO_InitStruct);
 800148e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001490:	2302      	movs	r3, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001494:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = BL_R_Pin|CL_R_Pin;
 8001496:	2602      	movs	r6, #2
 8001498:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800149a:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(AL_R_GPIO_Port, &GPIO_InitStruct);
 800149c:	f000 fb28 	bl	8001af0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BL_R_Pin|CL_R_Pin;
 80014a2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80014a6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <HAL_TIM_MspPostInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014aa:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = BL_R_Pin|CL_R_Pin;
 80014ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014b0:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f000 fb1c 	bl	8001af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AH_R_Pin|BH_R_Pin|CH_R_Pin;
 80014b8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80014bc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	480a      	ldr	r0, [pc, #40]	; (80014e8 <HAL_TIM_MspPostInit+0x124>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014c0:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = AH_R_Pin|BH_R_Pin|CH_R_Pin;
 80014c4:	e9cd 6708 	strd	r6, r7, [sp, #32]
 80014c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	f000 fb10 	bl	8001af0 <HAL_GPIO_Init>
}
 80014d0:	b00c      	add	sp, #48	; 0x30
 80014d2:	bdd0      	pop	{r4, r6, r7, pc}
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40010400 	.word	0x40010400
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020800 	.word	0x40020800
 80014ec:	00000000 	.word	0x00000000

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80014f2:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <HAL_UART_MspInit+0x70>)
 80014f4:	6801      	ldr	r1, [r0, #0]
{
 80014f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80014fa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001500:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001504:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001508:	b008      	add	sp, #32
 800150a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800150c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001514:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001518:	6410      	str	r0, [r2, #64]	; 0x40
 800151a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800151c:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8001520:	9000      	str	r0, [sp, #0]
 8001522:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	480e      	ldr	r0, [pc, #56]	; (8001564 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001532:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001558 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001542:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001546:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f000 fad0 	bl	8001af0 <HAL_GPIO_Init>
}
 8001550:	b008      	add	sp, #32
 8001552:	bd10      	pop	{r4, pc}
 8001554:	f3af 8000 	nop.w
 8001558:	0000000c 	.word	0x0000000c
 800155c:	00000002 	.word	0x00000002
 8001560:	40004400 	.word	0x40004400
 8001564:	40020000 	.word	0x40020000

08001568 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler>
 800156a:	bf00      	nop

0800156c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <HardFault_Handler>
 800156e:	bf00      	nop

08001570 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler>
 8001572:	bf00      	nop

08001574 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <BusFault_Handler>
 8001576:	bf00      	nop

08001578 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler>
 800157a:	bf00      	nop

0800157c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <DebugMon_Handler>:
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop

08001584 <PendSV_Handler>:
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 b8bc 	b.w	8001704 <HAL_IncTick>

0800158c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800158c:	4801      	ldr	r0, [pc, #4]	; (8001594 <TIM6_DAC_IRQHandler+0x8>)
 800158e:	f001 ba79 	b.w	8002a84 <HAL_TIM_IRQHandler>
 8001592:	bf00      	nop
 8001594:	20000188 	.word	0x20000188

08001598 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001598:	4801      	ldr	r0, [pc, #4]	; (80015a0 <TIM7_IRQHandler+0x8>)
 800159a:	f001 ba73 	b.w	8002a84 <HAL_TIM_IRQHandler>
 800159e:	bf00      	nop
 80015a0:	200001d0 	.word	0x200001d0

080015a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	1e16      	subs	r6, r2, #0
 80015a8:	dd07      	ble.n	80015ba <_read+0x16>
 80015aa:	460c      	mov	r4, r1
 80015ac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80015ae:	f3af 8000 	nop.w
 80015b2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	42a5      	cmp	r5, r4
 80015b8:	d1f9      	bne.n	80015ae <_read+0xa>
	}

return len;
}
 80015ba:	4630      	mov	r0, r6
 80015bc:	bd70      	pop	{r4, r5, r6, pc}
 80015be:	bf00      	nop

080015c0 <_close>:
}

int _close(int file)
{
	return -1;
}
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80015c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015cc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80015ce:	2000      	movs	r0, #0
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80015d4:	2001      	movs	r0, #1
 80015d6:	4770      	bx	lr

080015d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80015d8:	2000      	movs	r0, #0
 80015da:	4770      	bx	lr

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015de:	4c0c      	ldr	r4, [pc, #48]	; (8001610 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <_sbrk+0x38>)
 80015e2:	490d      	ldr	r1, [pc, #52]	; (8001618 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80015e4:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e6:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80015e8:	b12a      	cbz	r2, 80015f6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4410      	add	r0, r2
 80015ec:	4288      	cmp	r0, r1
 80015ee:	d807      	bhi.n	8001600 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015f0:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80015f2:	4610      	mov	r0, r2
 80015f4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <_sbrk+0x40>)
 80015f8:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4410      	add	r0, r2
 80015fc:	4288      	cmp	r0, r1
 80015fe:	d9f7      	bls.n	80015f0 <_sbrk+0x14>
    errno = ENOMEM;
 8001600:	f001 fc58 	bl	8002eb4 <__errno>
 8001604:	230c      	movs	r3, #12
    return (void *)-1;
 8001606:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800160a:	6003      	str	r3, [r0, #0]
}
 800160c:	4610      	mov	r0, r2
 800160e:	bd10      	pop	{r4, pc}
 8001610:	200002a8 	.word	0x200002a8
 8001614:	20020000 	.word	0x20020000
 8001618:	00000400 	.word	0x00000400
 800161c:	200002c0 	.word	0x200002c0

08001620 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001620:	4a03      	ldr	r2, [pc, #12]	; (8001630 <SystemInit+0x10>)
 8001622:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800162a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163a:	490e      	ldr	r1, [pc, #56]	; (8001674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001650:	4c0b      	ldr	r4, [pc, #44]	; (8001680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800165e:	f7ff ffdf 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f001 fc2d 	bl	8002ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff faa3 	bl	8000bb0 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001678:	08003f18 	.word	0x08003f18
  ldr r2, =_sbss
 800167c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001680:	200002c0 	.word	0x200002c0

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>
	...

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_InitTick+0x3c>)
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_InitTick+0x40>)
 800168e:	7812      	ldrb	r2, [r2, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
{
 8001692:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001698:	fbb0 f0f2 	udiv	r0, r0, r2
 800169c:	fbb3 f0f0 	udiv	r0, r3, r0
 80016a0:	f000 fa0c 	bl	8001abc <HAL_SYSTICK_Config>
 80016a4:	b908      	cbnz	r0, 80016aa <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	2d0f      	cmp	r5, #15
 80016a8:	d901      	bls.n	80016ae <HAL_InitTick+0x26>
    return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80016ac:	bd38      	pop	{r3, r4, r5, pc}
 80016ae:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	4602      	mov	r2, r0
 80016b2:	4629      	mov	r1, r5
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f9b4 	bl	8001a24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_InitTick+0x44>)
 80016be:	4620      	mov	r0, r4
 80016c0:	601d      	str	r5, [r3, #0]
}
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	20000028 	.word	0x20000028
 80016c8:	20000024 	.word	0x20000024
 80016cc:	2000002c 	.word	0x2000002c

080016d0 <HAL_Init>:
{
 80016d0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_Init+0x30>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ea:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f987 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff ffc8 	bl	8001688 <HAL_InitTick>
  HAL_MspInit();
 80016f8:	f7ff fd98 	bl	800122c <HAL_MspInit>
}
 80016fc:	2000      	movs	r0, #0
 80016fe:	bd08      	pop	{r3, pc}
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_IncTick+0x10>)
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <HAL_IncTick+0x14>)
 8001708:	6811      	ldr	r1, [r2, #0]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	440b      	add	r3, r1
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200002ac 	.word	0x200002ac
 8001718:	20000028 	.word	0x20000028

0800171c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800171c:	4b01      	ldr	r3, [pc, #4]	; (8001724 <HAL_GetTick+0x8>)
 800171e:	6818      	ldr	r0, [r3, #0]
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200002ac 	.word	0x200002ac

08001728 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001728:	2800      	cmp	r0, #0
 800172a:	f000 809f 	beq.w	800186c <HAL_ADC_Init+0x144>
{
 800172e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001730:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001732:	4604      	mov	r4, r0
 8001734:	b13d      	cbz	r5, 8001746 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001738:	06db      	lsls	r3, r3, #27
 800173a:	d50c      	bpl.n	8001756 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800173c:	2300      	movs	r3, #0
 800173e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8001742:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001744:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001746:	f7ff fd8f 	bl	8001268 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800174a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800174c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800174e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001752:	06db      	lsls	r3, r3, #27
 8001754:	d4f2      	bmi.n	800173c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001768:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800176a:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800176c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001770:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001772:	6851      	ldr	r1, [r2, #4]
 8001774:	6860      	ldr	r0, [r4, #4]
 8001776:	4301      	orrs	r1, r0
 8001778:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800177a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800177c:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800177e:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800178c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8001794:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4302      	orrs	r2, r0
 800179a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800179c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800179e:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017a0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80017a4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a6:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017aa:	4302      	orrs	r2, r0
 80017ac:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ae:	4a34      	ldr	r2, [pc, #208]	; (8001880 <HAL_ADC_Init+0x158>)
 80017b0:	4291      	cmp	r1, r2
 80017b2:	d052      	beq.n	800185a <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b4:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017b6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b8:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80017bc:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	4311      	orrs	r1, r2
 80017c2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80017ca:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	432a      	orrs	r2, r5
 80017d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	f022 0202 	bic.w	r2, r2, #2
 80017d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	7e21      	ldrb	r1, [r4, #24]
 80017de:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80017e2:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017e4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80017e8:	2a00      	cmp	r2, #0
 80017ea:	d041      	beq.n	8001870 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017ec:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017f0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80017f4:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f6:	6858      	ldr	r0, [r3, #4]
 80017f8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80017fc:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017fe:	1e51      	subs	r1, r2, #1
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001806:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800180a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800180c:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800180e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001816:	3901      	subs	r1, #1
 8001818:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001824:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800182c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8001830:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001832:	6899      	ldr	r1, [r3, #8]
 8001834:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001838:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800183a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800183c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800183e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8001842:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001844:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001848:	f023 0303 	bic.w	r3, r3, #3
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001852:	2300      	movs	r3, #0
 8001854:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001858:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	e7b2      	b.n	80017d2 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 800186c:	2001      	movs	r0, #1
}
 800186e:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	e7c6      	b.n	8001808 <HAL_ADC_Init+0xe0>
 800187a:	bf00      	nop
 800187c:	40012300 	.word	0x40012300
 8001880:	0f000001 	.word	0x0f000001

08001884 <HAL_ADC_ConfigChannel>:
{
 8001884:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8001886:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800188a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800188c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800188e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001890:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001892:	f000 809b 	beq.w	80019cc <HAL_ADC_ConfigChannel+0x148>
 8001896:	2301      	movs	r3, #1
 8001898:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800189c:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800189e:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018a0:	2c09      	cmp	r4, #9
 80018a2:	d82d      	bhi.n	8001900 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018a4:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018a6:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018a8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80018ac:	f04f 0c07 	mov.w	ip, #7
 80018b0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80018b4:	ea25 050c 	bic.w	r5, r5, ip
 80018b8:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ba:	691d      	ldr	r5, [r3, #16]
 80018bc:	fa02 f20e 	lsl.w	r2, r2, lr
 80018c0:	432a      	orrs	r2, r5
 80018c2:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80018c4:	684a      	ldr	r2, [r1, #4]
 80018c6:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018c8:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80018ca:	d82f      	bhi.n	800192c <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d2:	3a05      	subs	r2, #5
 80018d4:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018d8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018dc:	fa0e f202 	lsl.w	r2, lr, r2
 80018e0:	ea21 0202 	bic.w	r2, r1, r2
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e8:	ea4c 0202 	orr.w	r2, ip, r2
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ee:	4a3f      	ldr	r2, [pc, #252]	; (80019ec <HAL_ADC_ConfigChannel+0x168>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d030      	beq.n	8001956 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 80018f4:	2300      	movs	r3, #0
 80018f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80018fa:	4618      	mov	r0, r3
}
 80018fc:	b003      	add	sp, #12
 80018fe:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001900:	fa1f fc84 	uxth.w	ip, r4
 8001904:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8001908:	68dd      	ldr	r5, [r3, #12]
 800190a:	f1a2 0e1e 	sub.w	lr, r2, #30
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f20e 	lsl.w	r2, r2, lr
 8001914:	ea25 0202 	bic.w	r2, r5, r2
 8001918:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800191a:	688a      	ldr	r2, [r1, #8]
 800191c:	68dd      	ldr	r5, [r3, #12]
 800191e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001922:	432a      	orrs	r2, r5
 8001924:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001926:	684a      	ldr	r2, [r1, #4]
 8001928:	2a06      	cmp	r2, #6
 800192a:	d9cf      	bls.n	80018cc <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 800192c:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800192e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8001932:	d832      	bhi.n	800199a <HAL_ADC_ConfigChannel+0x116>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001936:	3a23      	subs	r2, #35	; 0x23
 8001938:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800193a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800193e:	fa05 f202 	lsl.w	r2, r5, r2
 8001942:	ea21 0202 	bic.w	r2, r1, r2
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194a:	ea4c 0202 	orr.w	r2, ip, r2
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_ADC_ConfigChannel+0x168>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d1ce      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x70>
 8001956:	2c12      	cmp	r4, #18
 8001958:	d02e      	beq.n	80019b8 <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_ADC_ConfigChannel+0x16c>)
 800195c:	429c      	cmp	r4, r3
 800195e:	d138      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x14e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001960:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <HAL_ADC_ConfigChannel+0x170>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001964:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4c25      	ldr	r4, [pc, #148]	; (80019fc <HAL_ADC_ConfigChannel+0x178>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001968:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800196c:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800196e:	6851      	ldr	r1, [r2, #4]
 8001970:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001974:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fba4 2303 	umull	r2, r3, r4, r3
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001986:	9b01      	ldr	r3, [sp, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0b3      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001992:	9b01      	ldr	r3, [sp, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f9      	bne.n	800198c <HAL_ADC_ConfigChannel+0x108>
 8001998:	e7ac      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800199a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800199c:	3a41      	subs	r2, #65	; 0x41
 800199e:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019a0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019a4:	fa05 f202 	lsl.w	r2, r5, r2
 80019a8:	ea21 0202 	bic.w	r2, r1, r2
 80019ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b0:	ea4c 0202 	orr.w	r2, ip, r2
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019b6:	e79a      	b.n	80018ee <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_ADC_ConfigChannel+0x170>)
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80019c0:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019c8:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ca:	e793      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80019cc:	2002      	movs	r0, #2
}
 80019ce:	b003      	add	sp, #12
 80019d0:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019d2:	2c11      	cmp	r4, #17
 80019d4:	d18e      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_ADC_ConfigChannel+0x170>)
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80019de:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019e6:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e8:	e784      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x70>
 80019ea:	bf00      	nop
 80019ec:	40012000 	.word	0x40012000
 80019f0:	10000012 	.word	0x10000012
 80019f4:	40012300 	.word	0x40012300
 80019f8:	20000024 	.word	0x20000024
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a02:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a12:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a1a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_NVIC_SetPriority+0x74>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2e:	f1c3 0e07 	rsb	lr, r3, #7
 8001a32:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3a:	bf28      	it	cs
 8001a3c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a40:	f1bc 0f06 	cmp.w	ip, #6
 8001a44:	d91b      	bls.n	8001a7e <HAL_NVIC_SetPriority+0x5a>
 8001a46:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 3cff 	mov.w	ip, #4294967295
 8001a4c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001a50:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 3cff 	mov.w	ip, #4294967295
 8001a58:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001a5c:	ea21 010c 	bic.w	r1, r1, ip
 8001a60:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001a62:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a68:	db0c      	blt.n	8001a84 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a6e:	0109      	lsls	r1, r1, #4
 8001a70:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a74:	b2c9      	uxtb	r1, r1
 8001a76:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a7e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a80:	4613      	mov	r3, r2
 8001a82:	e7e7      	b.n	8001a54 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_NVIC_SetPriority+0x78>)
 8001a86:	f000 000f 	and.w	r0, r0, #15
 8001a8a:	0109      	lsls	r1, r1, #4
 8001a8c:	4403      	add	r3, r0
 8001a8e:	b2c9      	uxtb	r1, r1
 8001a90:	7619      	strb	r1, [r3, #24]
 8001a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00
 8001a9c:	e000ecfc 	.word	0xe000ecfc

08001aa0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	db08      	blt.n	8001ab6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa4:	0941      	lsrs	r1, r0, #5
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_NVIC_EnableIRQ+0x18>)
 8001aa8:	f000 001f 	and.w	r0, r0, #31
 8001aac:	2301      	movs	r3, #1
 8001aae:	fa03 f000 	lsl.w	r0, r3, r0
 8001ab2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	3801      	subs	r0, #1
 8001abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001ac2:	d210      	bcs.n	8001ae6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac4:	b410      	push	{r4}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	4c08      	ldr	r4, [pc, #32]	; (8001aec <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001acc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001ad2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad8:	2107      	movs	r1, #7
  return (0UL);                                                     /* Function successful */
 8001ada:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001ade:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	6119      	str	r1, [r3, #16]
 8001ae4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af4:	2200      	movs	r2, #0
 8001af6:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	f8df a214 	ldr.w	sl, [pc, #532]	; 8001d10 <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afc:	4e7d      	ldr	r6, [pc, #500]	; (8001cf4 <HAL_GPIO_Init+0x204>)
{
 8001afe:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b00:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b02:	4689      	mov	r9, r1
 8001b04:	e005      	b.n	8001b12 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	3301      	adds	r3, #1
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	f102 0202 	add.w	r2, r2, #2
 8001b0e:	f000 8084 	beq.w	8001c1a <HAL_GPIO_Init+0x12a>
    ioposition = 0x01U << position;
 8001b12:	2101      	movs	r1, #1
 8001b14:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001b1a:	43a1      	bics	r1, r4
 8001b1c:	d1f3      	bne.n	8001b06 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001b22:	f00c 0103 	and.w	r1, ip, #3
 8001b26:	1e4d      	subs	r5, r1, #1
 8001b28:	2d01      	cmp	r5, #1
 8001b2a:	d979      	bls.n	8001c20 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	2903      	cmp	r1, #3
 8001b2e:	f040 80b9 	bne.w	8001ca4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b32:	4091      	lsls	r1, r2
 8001b34:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001b36:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b38:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3a:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b3c:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001b40:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b42:	d0e0      	beq.n	8001b06 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	2100      	movs	r1, #0
 8001b46:	9103      	str	r1, [sp, #12]
 8001b48:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001b4c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001b50:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8001b54:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001b58:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001b5c:	9103      	str	r1, [sp, #12]
 8001b5e:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b60:	f023 0103 	bic.w	r1, r3, #3
 8001b64:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001b68:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b6c:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b70:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b74:	00bf      	lsls	r7, r7, #2
 8001b76:	250f      	movs	r5, #15
 8001b78:	40bd      	lsls	r5, r7
 8001b7a:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	4d5e      	ldr	r5, [pc, #376]	; (8001cf8 <HAL_GPIO_Init+0x208>)
 8001b80:	42a8      	cmp	r0, r5
 8001b82:	d01f      	beq.n	8001bc4 <HAL_GPIO_Init+0xd4>
 8001b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	f000 808f 	beq.w	8001cac <HAL_GPIO_Init+0x1bc>
 8001b8e:	4d5b      	ldr	r5, [pc, #364]	; (8001cfc <HAL_GPIO_Init+0x20c>)
 8001b90:	42a8      	cmp	r0, r5
 8001b92:	f000 8092 	beq.w	8001cba <HAL_GPIO_Init+0x1ca>
 8001b96:	4d5a      	ldr	r5, [pc, #360]	; (8001d00 <HAL_GPIO_Init+0x210>)
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	f000 8095 	beq.w	8001cc8 <HAL_GPIO_Init+0x1d8>
 8001b9e:	4d59      	ldr	r5, [pc, #356]	; (8001d04 <HAL_GPIO_Init+0x214>)
 8001ba0:	42a8      	cmp	r0, r5
 8001ba2:	f000 8098 	beq.w	8001cd6 <HAL_GPIO_Init+0x1e6>
 8001ba6:	4d58      	ldr	r5, [pc, #352]	; (8001d08 <HAL_GPIO_Init+0x218>)
 8001ba8:	42a8      	cmp	r0, r5
 8001baa:	f000 809b 	beq.w	8001ce4 <HAL_GPIO_Init+0x1f4>
 8001bae:	4d57      	ldr	r5, [pc, #348]	; (8001d0c <HAL_GPIO_Init+0x21c>)
 8001bb0:	42a8      	cmp	r0, r5
 8001bb2:	bf0c      	ite	eq
 8001bb4:	f04f 0e06 	moveq.w	lr, #6
 8001bb8:	f04f 0e07 	movne.w	lr, #7
 8001bbc:	fa0e f707 	lsl.w	r7, lr, r7
 8001bc0:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001bc8:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bce:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	bf0c      	ite	eq
 8001bd4:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001bd6:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001bda:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001bdc:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bde:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001be2:	bf0c      	ite	eq
 8001be4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001be6:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001bea:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001bec:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bee:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	bf0c      	ite	eq
 8001bf4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001bf6:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001bfa:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfc:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfe:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001c06:	bf0c      	ite	eq
 8001c08:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001c0a:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001c10:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c12:	f102 0202 	add.w	r2, r2, #2
 8001c16:	f47f af7c 	bne.w	8001b12 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8001c1a:	b005      	add	sp, #20
 8001c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c20:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001c24:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c26:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2a:	2503      	movs	r5, #3
 8001c2c:	fa05 fe02 	lsl.w	lr, r5, r2
 8001c30:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c34:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8001c38:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c3a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3c:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c44:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001c48:	409f      	lsls	r7, r3
 8001c4a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001c4e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001c50:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c56:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001c5a:	4097      	lsls	r7, r2
 8001c5c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c60:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001c62:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	fa01 f102 	lsl.w	r1, r1, r2
 8001c68:	f47f af65 	bne.w	8001b36 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8001c6c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001c70:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c74:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001c78:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001c7c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c7e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c82:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c86:	fa07 f708 	lsl.w	r7, r7, r8
 8001c8a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8c:	270f      	movs	r7, #15
 8001c8e:	fa07 f808 	lsl.w	r8, r7, r8
 8001c92:	9f00      	ldr	r7, [sp, #0]
 8001c94:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c98:	9f01      	ldr	r7, [sp, #4]
 8001c9a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001c9e:	f8ce 7020 	str.w	r7, [lr, #32]
 8001ca2:	e748      	b.n	8001b36 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca4:	2503      	movs	r5, #3
 8001ca6:	4095      	lsls	r5, r2
 8001ca8:	43ed      	mvns	r5, r5
 8001caa:	e7d1      	b.n	8001c50 <HAL_GPIO_Init+0x160>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cac:	f04f 0e01 	mov.w	lr, #1
 8001cb0:	fa0e f707 	lsl.w	r7, lr, r7
 8001cb4:	ea48 0807 	orr.w	r8, r8, r7
 8001cb8:	e784      	b.n	8001bc4 <HAL_GPIO_Init+0xd4>
 8001cba:	f04f 0e02 	mov.w	lr, #2
 8001cbe:	fa0e f707 	lsl.w	r7, lr, r7
 8001cc2:	ea48 0807 	orr.w	r8, r8, r7
 8001cc6:	e77d      	b.n	8001bc4 <HAL_GPIO_Init+0xd4>
 8001cc8:	f04f 0e03 	mov.w	lr, #3
 8001ccc:	fa0e f707 	lsl.w	r7, lr, r7
 8001cd0:	ea48 0807 	orr.w	r8, r8, r7
 8001cd4:	e776      	b.n	8001bc4 <HAL_GPIO_Init+0xd4>
 8001cd6:	f04f 0e04 	mov.w	lr, #4
 8001cda:	fa0e f707 	lsl.w	r7, lr, r7
 8001cde:	ea48 0807 	orr.w	r8, r8, r7
 8001ce2:	e76f      	b.n	8001bc4 <HAL_GPIO_Init+0xd4>
 8001ce4:	f04f 0e05 	mov.w	lr, #5
 8001ce8:	fa0e f707 	lsl.w	r7, lr, r7
 8001cec:	ea48 0807 	orr.w	r8, r8, r7
 8001cf0:	e768      	b.n	8001bc4 <HAL_GPIO_Init+0xd4>
 8001cf2:	bf00      	nop
 8001cf4:	40013c00 	.word	0x40013c00
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d14:	6903      	ldr	r3, [r0, #16]
 8001d16:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001d18:	bf14      	ite	ne
 8001d1a:	2001      	movne	r0, #1
 8001d1c:	2000      	moveq	r0, #0
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d20:	b902      	cbnz	r2, 8001d24 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d22:	0409      	lsls	r1, r1, #16
 8001d24:	6181      	str	r1, [r0, #24]
  }
}
 8001d26:	4770      	bx	lr

08001d28 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	f000 8087 	beq.w	8001e3c <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2e:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_RCC_ClockConfig+0x128>)
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	428b      	cmp	r3, r1
{
 8001d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3c:	460d      	mov	r5, r1
 8001d3e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	d209      	bcs.n	8001d56 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	b2cb      	uxtb	r3, r1
 8001d44:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d002      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001d50:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8001d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	0798      	lsls	r0, r3, #30
 8001d5a:	d514      	bpl.n	8001d86 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	0759      	lsls	r1, r3, #29
 8001d5e:	d504      	bpl.n	8001d6a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	493c      	ldr	r1, [pc, #240]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001d62:	688a      	ldr	r2, [r1, #8]
 8001d64:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001d68:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	071a      	lsls	r2, r3, #28
 8001d6c:	d504      	bpl.n	8001d78 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6e:	4939      	ldr	r1, [pc, #228]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001d70:	688a      	ldr	r2, [r1, #8]
 8001d72:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001d76:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4936      	ldr	r1, [pc, #216]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001d7a:	68a0      	ldr	r0, [r4, #8]
 8001d7c:	688a      	ldr	r2, [r1, #8]
 8001d7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d82:	4302      	orrs	r2, r0
 8001d84:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	07df      	lsls	r7, r3, #31
 8001d88:	d521      	bpl.n	8001dce <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8a:	6862      	ldr	r2, [r4, #4]
 8001d8c:	2a01      	cmp	r2, #1
 8001d8e:	d057      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d90:	1e93      	subs	r3, r2, #2
 8001d92:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d98:	d94d      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	0799      	lsls	r1, r3, #30
 8001d9c:	d5d8      	bpl.n	8001d50 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9e:	4e2d      	ldr	r6, [pc, #180]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001da0:	68b3      	ldr	r3, [r6, #8]
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001daa:	f7ff fcb7 	bl	800171c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dae:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001db2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db4:	e004      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db6:	f7ff fcb1 	bl	800171c <HAL_GetTick>
 8001dba:	1bc0      	subs	r0, r0, r7
 8001dbc:	4540      	cmp	r0, r8
 8001dbe:	d844      	bhi.n	8001e4a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc0:	68b3      	ldr	r3, [r6, #8]
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dcc:	d1f3      	bne.n	8001db6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dce:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <HAL_RCC_ClockConfig+0x128>)
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	42ab      	cmp	r3, r5
 8001dd8:	d906      	bls.n	8001de8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	b2eb      	uxtb	r3, r5
 8001ddc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	42ab      	cmp	r3, r5
 8001de6:	d1b3      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	075a      	lsls	r2, r3, #29
 8001dec:	d506      	bpl.n	8001dfc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dee:	4919      	ldr	r1, [pc, #100]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001df0:	68e0      	ldr	r0, [r4, #12]
 8001df2:	688a      	ldr	r2, [r1, #8]
 8001df4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	071b      	lsls	r3, r3, #28
 8001dfe:	d507      	bpl.n	8001e10 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001e02:	6921      	ldr	r1, [r4, #16]
 8001e04:	6893      	ldr	r3, [r2, #8]
 8001e06:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e0e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e10:	f000 f848 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e14:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001e16:	4c10      	ldr	r4, [pc, #64]	; (8001e58 <HAL_RCC_ClockConfig+0x130>)
 8001e18:	6892      	ldr	r2, [r2, #8]
 8001e1a:	4910      	ldr	r1, [pc, #64]	; (8001e5c <HAL_RCC_ClockConfig+0x134>)
 8001e1c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001e20:	4603      	mov	r3, r0
 8001e22:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001e24:	480e      	ldr	r0, [pc, #56]	; (8001e60 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e26:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001e28:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e2a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001e2c:	f7ff fc2c 	bl	8001688 <HAL_InitTick>
  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
}
 8001e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	0198      	lsls	r0, r3, #6
 8001e38:	d4b1      	bmi.n	8001d9e <HAL_RCC_ClockConfig+0x76>
 8001e3a:	e789      	b.n	8001d50 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001e3c:	2001      	movs	r0, #1
}
 8001e3e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <HAL_RCC_ClockConfig+0x12c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	039e      	lsls	r6, r3, #14
 8001e46:	d4aa      	bmi.n	8001d9e <HAL_RCC_ClockConfig+0x76>
 8001e48:	e782      	b.n	8001d50 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	e781      	b.n	8001d52 <HAL_RCC_ClockConfig+0x2a>
 8001e4e:	bf00      	nop
 8001e50:	40023c00 	.word	0x40023c00
 8001e54:	40023800 	.word	0x40023800
 8001e58:	08003e58 	.word	0x08003e58
 8001e5c:	20000024 	.word	0x20000024
 8001e60:	2000002c 	.word	0x2000002c

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001e66:	4905      	ldr	r1, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e6c:	6808      	ldr	r0, [r1, #0]
 8001e6e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e74:	40d8      	lsrs	r0, r3
 8001e76:	4770      	bx	lr
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	20000024 	.word	0x20000024
 8001e80:	08003e68 	.word	0x08003e68

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001e86:	4905      	ldr	r1, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e8c:	6808      	ldr	r0, [r1, #0]
 8001e8e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e94:	40d8      	lsrs	r0, r3
 8001e96:	4770      	bx	lr
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	20000024 	.word	0x20000024
 8001ea0:	08003e68 	.word	0x08003e68

08001ea4 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea4:	4927      	ldr	r1, [pc, #156]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8001ea6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea8:	688b      	ldr	r3, [r1, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d007      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1e>
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d01d      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x4e>
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb8:	4824      	ldr	r0, [pc, #144]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf08      	it	eq
 8001ebe:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ec0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ecc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed0:	d12e      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	481e      	ldr	r0, [pc, #120]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ed4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ed8:	fba1 0100 	umull	r0, r1, r1, r0
 8001edc:	f7fe f9e8 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ee8:	3301      	adds	r3, #1
 8001eea:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001eec:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001ef0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001efc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f00:	d10d      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f02:	4812      	ldr	r0, [pc, #72]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f04:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f08:	fba1 0100 	umull	r0, r1, r1, r0
 8001f0c:	f7fe f9d0 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8001f18:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001f1c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f20:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f24:	2300      	movs	r3, #0
 8001f26:	fba1 0100 	umull	r0, r1, r1, r0
 8001f2a:	f7fe f9c1 	bl	80002b0 <__aeabi_uldivmod>
 8001f2e:	e7ef      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f32:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f36:	2300      	movs	r3, #0
 8001f38:	fba1 0100 	umull	r0, r1, r1, r0
 8001f3c:	f7fe f9b8 	bl	80002b0 <__aeabi_uldivmod>
 8001f40:	e7ce      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x3c>
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	007a1200 	.word	0x007a1200
 8001f4c:	00f42400 	.word	0x00f42400

08001f50 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	2800      	cmp	r0, #0
 8001f52:	f000 81b3 	beq.w	80022bc <HAL_RCC_OscConfig+0x36c>
{
 8001f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	6803      	ldr	r3, [r0, #0]
 8001f5c:	07da      	lsls	r2, r3, #31
{
 8001f5e:	b082      	sub	sp, #8
 8001f60:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	d536      	bpl.n	8001fd2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f64:	49a2      	ldr	r1, [pc, #648]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8001f66:	688a      	ldr	r2, [r1, #8]
 8001f68:	f002 020c 	and.w	r2, r2, #12
 8001f6c:	2a04      	cmp	r2, #4
 8001f6e:	f000 80df 	beq.w	8002130 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f72:	688a      	ldr	r2, [r1, #8]
 8001f74:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f78:	2a08      	cmp	r2, #8
 8001f7a:	f000 80d5 	beq.w	8002128 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	499c      	ldr	r1, [pc, #624]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8001f80:	688a      	ldr	r2, [r1, #8]
 8001f82:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f86:	2a0c      	cmp	r2, #12
 8001f88:	f000 8105 	beq.w	8002196 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	6863      	ldr	r3, [r4, #4]
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	f000 8119 	beq.w	80021c8 <HAL_RCC_OscConfig+0x278>
 8001f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9a:	f000 8196 	beq.w	80022ca <HAL_RCC_OscConfig+0x37a>
 8001f9e:	4d94      	ldr	r5, [pc, #592]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8001fa0:	682a      	ldr	r2, [r5, #0]
 8001fa2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fa6:	602a      	str	r2, [r5, #0]
 8001fa8:	682a      	ldr	r2, [r5, #0]
 8001faa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fae:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 810e 	bne.w	80021d2 <HAL_RCC_OscConfig+0x282>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fbb1 	bl	800171c <HAL_GetTick>
 8001fba:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbc:	e005      	b.n	8001fca <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fbad 	bl	800171c <HAL_GetTick>
 8001fc2:	1b80      	subs	r0, r0, r6
 8001fc4:	2864      	cmp	r0, #100	; 0x64
 8001fc6:	f200 80fb 	bhi.w	80021c0 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	682b      	ldr	r3, [r5, #0]
 8001fcc:	0399      	lsls	r1, r3, #14
 8001fce:	d4f6      	bmi.n	8001fbe <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	079a      	lsls	r2, r3, #30
 8001fd4:	d52f      	bpl.n	8002036 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd6:	4a86      	ldr	r2, [pc, #536]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8001fd8:	6891      	ldr	r1, [r2, #8]
 8001fda:	f011 0f0c 	tst.w	r1, #12
 8001fde:	f000 8098 	beq.w	8002112 <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fe2:	6891      	ldr	r1, [r2, #8]
 8001fe4:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fe8:	2908      	cmp	r1, #8
 8001fea:	f000 808e 	beq.w	800210a <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4980      	ldr	r1, [pc, #512]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8001ff0:	688a      	ldr	r2, [r1, #8]
 8001ff2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ff6:	2a0c      	cmp	r2, #12
 8001ff8:	f000 8162 	beq.w	80022c0 <HAL_RCC_OscConfig+0x370>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ffc:	68e3      	ldr	r3, [r4, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8114 	beq.w	800222c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x2a4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4e7a      	ldr	r6, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_ENABLE();
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800200c:	f7ff fb86 	bl	800171c <HAL_GetTick>
 8002010:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	e005      	b.n	8002020 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff fb82 	bl	800171c <HAL_GetTick>
 8002018:	1b40      	subs	r0, r0, r5
 800201a:	2802      	cmp	r0, #2
 800201c:	f200 80d0 	bhi.w	80021c0 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	6833      	ldr	r3, [r6, #0]
 8002022:	0798      	lsls	r0, r3, #30
 8002024:	d5f6      	bpl.n	8002014 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	6833      	ldr	r3, [r6, #0]
 8002028:	6922      	ldr	r2, [r4, #16]
 800202a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800202e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002032:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	071a      	lsls	r2, r3, #28
 8002038:	d451      	bmi.n	80020de <HAL_RCC_OscConfig+0x18e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203a:	0758      	lsls	r0, r3, #29
 800203c:	d530      	bpl.n	80020a0 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4a6c      	ldr	r2, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8002040:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002042:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002046:	f000 809a 	beq.w	800217e <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4e6a      	ldr	r6, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x2a8>)
 800204e:	6833      	ldr	r3, [r6, #0]
 8002050:	05d9      	lsls	r1, r3, #23
 8002052:	f140 80a5 	bpl.w	80021a0 <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	68a3      	ldr	r3, [r4, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	f000 80cf 	beq.w	80021fc <HAL_RCC_OscConfig+0x2ac>
 800205e:	2b05      	cmp	r3, #5
 8002060:	f000 813d 	beq.w	80022de <HAL_RCC_OscConfig+0x38e>
 8002064:	4e62      	ldr	r6, [pc, #392]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8002066:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	6732      	str	r2, [r6, #112]	; 0x70
 800206e:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002070:	f022 0204 	bic.w	r2, r2, #4
 8002074:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 80c5 	bne.w	8002206 <HAL_RCC_OscConfig+0x2b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fb4e 	bl	800171c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002084:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	e005      	b.n	8002094 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7ff fb48 	bl	800171c <HAL_GetTick>
 800208c:	1bc0      	subs	r0, r0, r7
 800208e:	4540      	cmp	r0, r8
 8002090:	f200 8096 	bhi.w	80021c0 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002096:	0798      	lsls	r0, r3, #30
 8002098:	d4f6      	bmi.n	8002088 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209a:	2d00      	cmp	r5, #0
 800209c:	f040 8108 	bne.w	80022b0 <HAL_RCC_OscConfig+0x360>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a0:	69a0      	ldr	r0, [r4, #24]
 80020a2:	b1c0      	cbz	r0, 80020d6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a4:	4d52      	ldr	r5, [pc, #328]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 80020a6:	68ab      	ldr	r3, [r5, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	f000 80ce 	beq.w	800224e <HAL_RCC_OscConfig+0x2fe>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_OscConfig+0x2a4>)
 80020b4:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80020b8:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	f000 811a 	beq.w	80022f2 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff fb2d 	bl	800171c <HAL_GetTick>
 80020c2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c4:	e004      	b.n	80020d0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff fb29 	bl	800171c <HAL_GetTick>
 80020ca:	1b00      	subs	r0, r0, r4
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d877      	bhi.n	80021c0 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	019b      	lsls	r3, r3, #6
 80020d4:	d4f7      	bmi.n	80020c6 <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2000      	movs	r0, #0
}
 80020d8:	b002      	add	sp, #8
 80020da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020de:	6963      	ldr	r3, [r4, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02f      	beq.n	8002144 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 80020e4:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4e42      	ldr	r6, [pc, #264]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_ENABLE();
 80020e8:	2201      	movs	r2, #1
 80020ea:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80020ee:	f7ff fb15 	bl	800171c <HAL_GetTick>
 80020f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f4:	e004      	b.n	8002100 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f6:	f7ff fb11 	bl	800171c <HAL_GetTick>
 80020fa:	1b40      	subs	r0, r0, r5
 80020fc:	2802      	cmp	r0, #2
 80020fe:	d85f      	bhi.n	80021c0 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002100:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002102:	079b      	lsls	r3, r3, #30
 8002104:	d5f7      	bpl.n	80020f6 <HAL_RCC_OscConfig+0x1a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	e797      	b.n	800203a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800210a:	6852      	ldr	r2, [r2, #4]
 800210c:	0257      	lsls	r7, r2, #9
 800210e:	f53f af6e 	bmi.w	8001fee <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	4a37      	ldr	r2, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	0795      	lsls	r5, r2, #30
 8002118:	d525      	bpl.n	8002166 <HAL_RCC_OscConfig+0x216>
 800211a:	68e2      	ldr	r2, [r4, #12]
 800211c:	2a01      	cmp	r2, #1
 800211e:	d022      	beq.n	8002166 <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 8002120:	2001      	movs	r0, #1
}
 8002122:	b002      	add	sp, #8
 8002124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002128:	684a      	ldr	r2, [r1, #4]
 800212a:	0257      	lsls	r7, r2, #9
 800212c:	f57f af27 	bpl.w	8001f7e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	0395      	lsls	r5, r2, #14
 8002136:	f57f af4c 	bpl.w	8001fd2 <HAL_RCC_OscConfig+0x82>
 800213a:	6862      	ldr	r2, [r4, #4]
 800213c:	2a00      	cmp	r2, #0
 800213e:	f47f af48 	bne.w	8001fd2 <HAL_RCC_OscConfig+0x82>
 8002142:	e7ed      	b.n	8002120 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002146:	4e2a      	ldr	r6, [pc, #168]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_DISABLE();
 8002148:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800214c:	f7ff fae6 	bl	800171c <HAL_GetTick>
 8002150:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002152:	e004      	b.n	800215e <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff fae2 	bl	800171c <HAL_GetTick>
 8002158:	1b40      	subs	r0, r0, r5
 800215a:	2802      	cmp	r0, #2
 800215c:	d830      	bhi.n	80021c0 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002160:	079f      	lsls	r7, r3, #30
 8002162:	d4f7      	bmi.n	8002154 <HAL_RCC_OscConfig+0x204>
 8002164:	e7cf      	b.n	8002106 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4922      	ldr	r1, [pc, #136]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 8002168:	6920      	ldr	r0, [r4, #16]
 800216a:	680a      	ldr	r2, [r1, #0]
 800216c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002170:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002174:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	071a      	lsls	r2, r3, #28
 8002178:	f57f af5f 	bpl.w	800203a <HAL_RCC_OscConfig+0xea>
 800217c:	e7af      	b.n	80020de <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	6413      	str	r3, [r2, #64]	; 0x40
 8002188:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002192:	2501      	movs	r5, #1
 8002194:	e75a      	b.n	800204c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	684a      	ldr	r2, [r1, #4]
 8002198:	0256      	lsls	r6, r2, #9
 800219a:	f57f aef7 	bpl.w	8001f8c <HAL_RCC_OscConfig+0x3c>
 800219e:	e7c7      	b.n	8002130 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a0:	6833      	ldr	r3, [r6, #0]
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80021a8:	f7ff fab8 	bl	800171c <HAL_GetTick>
 80021ac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	6833      	ldr	r3, [r6, #0]
 80021b0:	05da      	lsls	r2, r3, #23
 80021b2:	f53f af50 	bmi.w	8002056 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff fab1 	bl	800171c <HAL_GetTick>
 80021ba:	1bc0      	subs	r0, r0, r7
 80021bc:	2802      	cmp	r0, #2
 80021be:	d9f6      	bls.n	80021ae <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 80021c0:	2003      	movs	r0, #3
}
 80021c2:	b002      	add	sp, #8
 80021c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021d2:	f7ff faa3 	bl	800171c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4e06      	ldr	r6, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 80021d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e004      	b.n	80021e6 <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fa9e 	bl	800171c <HAL_GetTick>
 80021e0:	1b40      	subs	r0, r0, r5
 80021e2:	2864      	cmp	r0, #100	; 0x64
 80021e4:	d8ec      	bhi.n	80021c0 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	6833      	ldr	r3, [r6, #0]
 80021e8:	0398      	lsls	r0, r3, #14
 80021ea:	d5f7      	bpl.n	80021dc <HAL_RCC_OscConfig+0x28c>
 80021ec:	e6f0      	b.n	8001fd0 <HAL_RCC_OscConfig+0x80>
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470000 	.word	0x42470000
 80021f8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fc:	4a55      	ldr	r2, [pc, #340]	; (8002354 <HAL_RCC_OscConfig+0x404>)
 80021fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002206:	f7ff fa89 	bl	800171c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4f52      	ldr	r7, [pc, #328]	; (8002354 <HAL_RCC_OscConfig+0x404>)
      tickstart = HAL_GetTick();
 800220c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	e004      	b.n	800221e <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7ff fa82 	bl	800171c <HAL_GetTick>
 8002218:	1b80      	subs	r0, r0, r6
 800221a:	4540      	cmp	r0, r8
 800221c:	d8d0      	bhi.n	80021c0 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002220:	079b      	lsls	r3, r3, #30
 8002222:	d5f7      	bpl.n	8002214 <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8002224:	2d00      	cmp	r5, #0
 8002226:	f43f af3b 	beq.w	80020a0 <HAL_RCC_OscConfig+0x150>
 800222a:	e041      	b.n	80022b0 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_DISABLE();
 800222c:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	4e49      	ldr	r6, [pc, #292]	; (8002354 <HAL_RCC_OscConfig+0x404>)
        __HAL_RCC_HSI_DISABLE();
 8002230:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002232:	f7ff fa73 	bl	800171c <HAL_GetTick>
 8002236:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002238:	e004      	b.n	8002244 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff fa6f 	bl	800171c <HAL_GetTick>
 800223e:	1b40      	subs	r0, r0, r5
 8002240:	2802      	cmp	r0, #2
 8002242:	d8bd      	bhi.n	80021c0 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	6833      	ldr	r3, [r6, #0]
 8002246:	0799      	lsls	r1, r3, #30
 8002248:	d4f7      	bmi.n	800223a <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	e6f3      	b.n	8002036 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224e:	2801      	cmp	r0, #1
 8002250:	f43f af42 	beq.w	80020d8 <HAL_RCC_OscConfig+0x188>
        pll_config = RCC->PLLCFGR;
 8002254:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002256:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002258:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225c:	4291      	cmp	r1, r2
 800225e:	f47f af5f 	bne.w	8002120 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002268:	4291      	cmp	r1, r2
 800226a:	f47f af59 	bne.w	8002120 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002270:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002274:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002276:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800227a:	f47f af51 	bne.w	8002120 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002280:	0852      	lsrs	r2, r2, #1
 8002282:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002286:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002288:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800228c:	f47f af48 	bne.w	8002120 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002290:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002296:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800229a:	f47f af41 	bne.w	8002120 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800229e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022a0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a4:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 80022a8:	bf14      	ite	ne
 80022aa:	2001      	movne	r0, #1
 80022ac:	2000      	moveq	r0, #0
 80022ae:	e713      	b.n	80020d8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <HAL_RCC_OscConfig+0x404>)
 80022b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	e6f1      	b.n	80020a0 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
}
 80022be:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c0:	684a      	ldr	r2, [r1, #4]
 80022c2:	0256      	lsls	r6, r2, #9
 80022c4:	f53f ae9a 	bmi.w	8001ffc <HAL_RCC_OscConfig+0xac>
 80022c8:	e723      	b.n	8002112 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_RCC_OscConfig+0x404>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022da:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022dc:	e779      	b.n	80021d2 <HAL_RCC_OscConfig+0x282>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_OscConfig+0x404>)
 80022e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022e2:	f042 0204 	orr.w	r2, r2, #4
 80022e6:	671a      	str	r2, [r3, #112]	; 0x70
 80022e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f0:	e789      	b.n	8002206 <HAL_RCC_OscConfig+0x2b6>
        tickstart = HAL_GetTick();
 80022f2:	f7ff fa13 	bl	800171c <HAL_GetTick>
 80022f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f8:	e005      	b.n	8002306 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7ff fa0f 	bl	800171c <HAL_GetTick>
 80022fe:	1b80      	subs	r0, r0, r6
 8002300:	2802      	cmp	r0, #2
 8002302:	f63f af5d 	bhi.w	80021c0 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	682b      	ldr	r3, [r5, #0]
 8002308:	0199      	lsls	r1, r3, #6
 800230a:	d4f6      	bmi.n	80022fa <HAL_RCC_OscConfig+0x3aa>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002310:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002312:	430b      	orrs	r3, r1
 8002314:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002318:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800231c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800231e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002322:	0852      	lsrs	r2, r2, #1
 8002324:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002328:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800232a:	490b      	ldr	r1, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x408>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800232c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002330:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002332:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002334:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002336:	f7ff f9f1 	bl	800171c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4d06      	ldr	r5, [pc, #24]	; (8002354 <HAL_RCC_OscConfig+0x404>)
        tickstart = HAL_GetTick();
 800233c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	e005      	b.n	800234c <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff f9ec 	bl	800171c <HAL_GetTick>
 8002344:	1b00      	subs	r0, r0, r4
 8002346:	2802      	cmp	r0, #2
 8002348:	f63f af3a 	bhi.w	80021c0 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	019a      	lsls	r2, r3, #6
 8002350:	d5f6      	bpl.n	8002340 <HAL_RCC_OscConfig+0x3f0>
 8002352:	e6c0      	b.n	80020d6 <HAL_RCC_OscConfig+0x186>
 8002354:	40023800 	.word	0x40023800
 8002358:	42470000 	.word	0x42470000

0800235c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800235c:	2800      	cmp	r0, #0
 800235e:	f000 8087 	beq.w	8002470 <HAL_TIM_Base_Init+0x114>
{
 8002362:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002364:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002368:	4604      	mov	r4, r0
 800236a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800236e:	2b00      	cmp	r3, #0
 8002370:	d079      	beq.n	8002466 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002372:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800237c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800237e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002380:	d05d      	beq.n	800243e <HAL_TIM_Base_Init+0xe2>
 8002382:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002386:	d031      	beq.n	80023ec <HAL_TIM_Base_Init+0x90>
 8002388:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800238c:	428a      	cmp	r2, r1
 800238e:	d02d      	beq.n	80023ec <HAL_TIM_Base_Init+0x90>
 8002390:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002394:	428a      	cmp	r2, r1
 8002396:	d029      	beq.n	80023ec <HAL_TIM_Base_Init+0x90>
 8002398:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800239c:	428a      	cmp	r2, r1
 800239e:	d025      	beq.n	80023ec <HAL_TIM_Base_Init+0x90>
 80023a0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80023a4:	428a      	cmp	r2, r1
 80023a6:	d04a      	beq.n	800243e <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80023ac:	428a      	cmp	r2, r1
 80023ae:	d021      	beq.n	80023f4 <HAL_TIM_Base_Init+0x98>
 80023b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80023b4:	428a      	cmp	r2, r1
 80023b6:	d01d      	beq.n	80023f4 <HAL_TIM_Base_Init+0x98>
 80023b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80023bc:	428a      	cmp	r2, r1
 80023be:	d019      	beq.n	80023f4 <HAL_TIM_Base_Init+0x98>
 80023c0:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80023c4:	428a      	cmp	r2, r1
 80023c6:	d015      	beq.n	80023f4 <HAL_TIM_Base_Init+0x98>
 80023c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80023cc:	428a      	cmp	r2, r1
 80023ce:	d011      	beq.n	80023f4 <HAL_TIM_Base_Init+0x98>
 80023d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80023d4:	428a      	cmp	r2, r1
 80023d6:	d00d      	beq.n	80023f4 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023da:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80023e2:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023e8:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ea:	e010      	b.n	800240e <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80023ec:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023f2:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002402:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002404:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002406:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002408:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800240c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240e:	2301      	movs	r3, #1
 8002410:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002412:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002416:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800241a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800241e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002422:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002426:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800242a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800242e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800243a:	2000      	movs	r0, #0
}
 800243c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800243e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002440:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002446:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244e:	69a1      	ldr	r1, [r4, #24]
 8002450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002454:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002456:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002458:	68e3      	ldr	r3, [r4, #12]
 800245a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800245c:	6863      	ldr	r3, [r4, #4]
 800245e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002460:	6963      	ldr	r3, [r4, #20]
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	e7d3      	b.n	800240e <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8002466:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800246a:	f7fe ff45 	bl	80012f8 <HAL_TIM_Base_MspInit>
 800246e:	e780      	b.n	8002372 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8002470:	2001      	movs	r0, #1
}
 8002472:	4770      	bx	lr
 8002474:	40010000 	.word	0x40010000

08002478 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002478:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800247c:	2b01      	cmp	r3, #1
 800247e:	d12f      	bne.n	80024e0 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002480:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002482:	4919      	ldr	r1, [pc, #100]	; (80024e8 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	2202      	movs	r2, #2
 8002486:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800248a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	d019      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x52>
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d016      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x52>
 800249c:	4a13      	ldr	r2, [pc, #76]	; (80024ec <HAL_TIM_Base_Start_IT+0x74>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x52>
 80024a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x52>
 80024aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x52>
 80024b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x52>
 80024ba:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x52>
 80024c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d104      	bne.n	80024d4 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d0:	2a06      	cmp	r2, #6
 80024d2:	d007      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80024da:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	4770      	bx	lr
    return HAL_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	4770      	bx	lr
  return HAL_OK;
 80024e4:	2000      	movs	r0, #0
}
 80024e6:	4770      	bx	lr
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40000400 	.word	0x40000400

080024f0 <HAL_TIM_PWM_MspInit>:
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop

080024f4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	f000 8087 	beq.w	8002608 <HAL_TIM_PWM_Init+0x114>
{
 80024fa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80024fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002500:	4604      	mov	r4, r0
 8002502:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002506:	2b00      	cmp	r3, #0
 8002508:	d079      	beq.n	80025fe <HAL_TIM_PWM_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800250c:	493f      	ldr	r1, [pc, #252]	; (800260c <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002514:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002516:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002518:	d05d      	beq.n	80025d6 <HAL_TIM_PWM_Init+0xe2>
 800251a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800251e:	d031      	beq.n	8002584 <HAL_TIM_PWM_Init+0x90>
 8002520:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8002524:	428a      	cmp	r2, r1
 8002526:	d02d      	beq.n	8002584 <HAL_TIM_PWM_Init+0x90>
 8002528:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800252c:	428a      	cmp	r2, r1
 800252e:	d029      	beq.n	8002584 <HAL_TIM_PWM_Init+0x90>
 8002530:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002534:	428a      	cmp	r2, r1
 8002536:	d025      	beq.n	8002584 <HAL_TIM_PWM_Init+0x90>
 8002538:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800253c:	428a      	cmp	r2, r1
 800253e:	d04a      	beq.n	80025d6 <HAL_TIM_PWM_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002540:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8002544:	428a      	cmp	r2, r1
 8002546:	d021      	beq.n	800258c <HAL_TIM_PWM_Init+0x98>
 8002548:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800254c:	428a      	cmp	r2, r1
 800254e:	d01d      	beq.n	800258c <HAL_TIM_PWM_Init+0x98>
 8002550:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002554:	428a      	cmp	r2, r1
 8002556:	d019      	beq.n	800258c <HAL_TIM_PWM_Init+0x98>
 8002558:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800255c:	428a      	cmp	r2, r1
 800255e:	d015      	beq.n	800258c <HAL_TIM_PWM_Init+0x98>
 8002560:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002564:	428a      	cmp	r2, r1
 8002566:	d011      	beq.n	800258c <HAL_TIM_PWM_Init+0x98>
 8002568:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800256c:	428a      	cmp	r2, r1
 800256e:	d00d      	beq.n	800258c <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002570:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002572:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002578:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800257a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800257c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002580:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002582:	e010      	b.n	80025a6 <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8002584:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800258a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800258e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002594:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800259a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800259c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800259e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80025a0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025a4:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80025a6:	2301      	movs	r3, #1
 80025a8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80025b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80025b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80025ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80025ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80025ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80025d2:	2000      	movs	r0, #0
}
 80025d4:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80025d6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025de:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e6:	69a1      	ldr	r1, [r4, #24]
 80025e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ec:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80025ee:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f0:	68e3      	ldr	r3, [r4, #12]
 80025f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80025f8:	6963      	ldr	r3, [r4, #20]
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	e7d3      	b.n	80025a6 <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80025fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002602:	f7ff ff75 	bl	80024f0 <HAL_TIM_PWM_MspInit>
 8002606:	e780      	b.n	800250a <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
}
 800260a:	4770      	bx	lr
 800260c:	40010000 	.word	0x40010000

08002610 <HAL_TIM_PWM_Start>:
 8002610:	2900      	cmp	r1, #0
 8002612:	d13d      	bne.n	8002690 <HAL_TIM_PWM_Start+0x80>
 8002614:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002618:	2b01      	cmp	r3, #1
 800261a:	d141      	bne.n	80026a0 <HAL_TIM_PWM_Start+0x90>
 800261c:	2302      	movs	r3, #2
 800261e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002622:	6803      	ldr	r3, [r0, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	6a18      	ldr	r0, [r3, #32]
 8002628:	f001 011f 	and.w	r1, r1, #31
 800262c:	fa02 f101 	lsl.w	r1, r2, r1
 8002630:	ea20 0001 	bic.w	r0, r0, r1
 8002634:	6218      	str	r0, [r3, #32]
 8002636:	6a18      	ldr	r0, [r3, #32]
 8002638:	4a2c      	ldr	r2, [pc, #176]	; (80026ec <HAL_TIM_PWM_Start+0xdc>)
 800263a:	4301      	orrs	r1, r0
 800263c:	4293      	cmp	r3, r2
 800263e:	6219      	str	r1, [r3, #32]
 8002640:	d038      	beq.n	80026b4 <HAL_TIM_PWM_Start+0xa4>
 8002642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002646:	4293      	cmp	r3, r2
 8002648:	d034      	beq.n	80026b4 <HAL_TIM_PWM_Start+0xa4>
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d014      	beq.n	800267a <HAL_TIM_PWM_Start+0x6a>
 8002650:	4927      	ldr	r1, [pc, #156]	; (80026f0 <HAL_TIM_PWM_Start+0xe0>)
 8002652:	428b      	cmp	r3, r1
 8002654:	d011      	beq.n	800267a <HAL_TIM_PWM_Start+0x6a>
 8002656:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800265a:	428b      	cmp	r3, r1
 800265c:	d00d      	beq.n	800267a <HAL_TIM_PWM_Start+0x6a>
 800265e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002662:	428b      	cmp	r3, r1
 8002664:	d009      	beq.n	800267a <HAL_TIM_PWM_Start+0x6a>
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_TIM_PWM_Start+0x6a>
 800266a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800266e:	4293      	cmp	r3, r2
 8002670:	d003      	beq.n	800267a <HAL_TIM_PWM_Start+0x6a>
 8002672:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002676:	4293      	cmp	r3, r2
 8002678:	d104      	bne.n	8002684 <HAL_TIM_PWM_Start+0x74>
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f002 0207 	and.w	r2, r2, #7
 8002680:	2a06      	cmp	r2, #6
 8002682:	d020      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xb6>
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	2000      	movs	r0, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4770      	bx	lr
 8002690:	2904      	cmp	r1, #4
 8002692:	d022      	beq.n	80026da <HAL_TIM_PWM_Start+0xca>
 8002694:	2908      	cmp	r1, #8
 8002696:	d018      	beq.n	80026ca <HAL_TIM_PWM_Start+0xba>
 8002698:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800269c:	2b01      	cmp	r3, #1
 800269e:	d001      	beq.n	80026a4 <HAL_TIM_PWM_Start+0x94>
 80026a0:	2001      	movs	r0, #1
 80026a2:	4770      	bx	lr
 80026a4:	2904      	cmp	r1, #4
 80026a6:	d01c      	beq.n	80026e2 <HAL_TIM_PWM_Start+0xd2>
 80026a8:	2908      	cmp	r1, #8
 80026aa:	d012      	beq.n	80026d2 <HAL_TIM_PWM_Start+0xc2>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80026b2:	e7b6      	b.n	8002622 <HAL_TIM_PWM_Start+0x12>
 80026b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	f002 0207 	and.w	r2, r2, #7
 80026c2:	2a06      	cmp	r2, #6
 80026c4:	d1de      	bne.n	8002684 <HAL_TIM_PWM_Start+0x74>
 80026c6:	2000      	movs	r0, #0
 80026c8:	4770      	bx	lr
 80026ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d1e6      	bne.n	80026a0 <HAL_TIM_PWM_Start+0x90>
 80026d2:	2302      	movs	r3, #2
 80026d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80026d8:	e7a3      	b.n	8002622 <HAL_TIM_PWM_Start+0x12>
 80026da:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d1de      	bne.n	80026a0 <HAL_TIM_PWM_Start+0x90>
 80026e2:	2302      	movs	r3, #2
 80026e4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80026e8:	e79b      	b.n	8002622 <HAL_TIM_PWM_Start+0x12>
 80026ea:	bf00      	nop
 80026ec:	40010000 	.word	0x40010000
 80026f0:	40000400 	.word	0x40000400

080026f4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80026f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f000 80d2 	beq.w	80028a2 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 80026fe:	2301      	movs	r3, #1
{
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8002704:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002708:	2a0c      	cmp	r2, #12
 800270a:	d808      	bhi.n	800271e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800270c:	e8df f002 	tbb	[pc, r2]
 8002710:	0707073e 	.word	0x0707073e
 8002714:	0707076b 	.word	0x0707076b
 8002718:	0707079b 	.word	0x0707079b
 800271c:	0c          	.byte	0x0c
 800271d:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800271e:	2300      	movs	r3, #0
 8002720:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  switch (Channel)
 8002724:	2001      	movs	r0, #1
}
 8002726:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002728:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800272a:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002732:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002734:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002736:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002738:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800273a:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002742:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002748:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274c:	4d70      	ldr	r5, [pc, #448]	; (8002910 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800274e:	42ab      	cmp	r3, r5
 8002750:	f000 80c8 	beq.w	80028e4 <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8002754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002758:	42ab      	cmp	r3, r5
 800275a:	f000 80c3 	beq.w	80028e4 <HAL_TIM_PWM_ConfigChannel+0x1f0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275e:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002760:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002762:	6848      	ldr	r0, [r1, #4]
 8002764:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002766:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002768:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800276a:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800276c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002770:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002778:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002780:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8002782:	2300      	movs	r3, #0
 8002784:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2000      	movs	r0, #0
}
 800278a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800278c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800278e:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002798:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800279a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800279c:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800279e:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80027a2:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80027a4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80027a6:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80027aa:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027ac:	4d58      	ldr	r5, [pc, #352]	; (8002910 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80027ae:	42ab      	cmp	r3, r5
 80027b0:	d079      	beq.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80027b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027b6:	42ab      	cmp	r3, r5
 80027b8:	d075      	beq.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CR2 = tmpcr2;
 80027ba:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027bc:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80027be:	6848      	ldr	r0, [r1, #4]
 80027c0:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80027c2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027c4:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c6:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027c8:	f040 0008 	orr.w	r0, r0, #8
 80027cc:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027ce:	6999      	ldr	r1, [r3, #24]
 80027d0:	f021 0104 	bic.w	r1, r1, #4
 80027d4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	4322      	orrs	r2, r4
 80027da:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80027dc:	2300      	movs	r3, #0
 80027de:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2000      	movs	r0, #0
}
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027e6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e8:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	f022 0210 	bic.w	r2, r2, #16
 80027f0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80027f2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80027f4:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80027f6:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027f8:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027fc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002800:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002802:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002806:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800280a:	4d41      	ldr	r5, [pc, #260]	; (8002910 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800280c:	42ab      	cmp	r3, r5
 800280e:	d059      	beq.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8002810:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002814:	42ab      	cmp	r3, r5
 8002816:	d055      	beq.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8002818:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800281a:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800281c:	6848      	ldr	r0, [r1, #4]
 800281e:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002820:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002822:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002824:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002826:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800282a:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800282c:	6999      	ldr	r1, [r3, #24]
 800282e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002832:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800283a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800283c:	2300      	movs	r3, #0
 800283e:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2000      	movs	r0, #0
}
 8002844:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002846:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8002848:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002850:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002852:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002854:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002856:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002858:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800285c:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800285e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002864:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002868:	4d29      	ldr	r5, [pc, #164]	; (8002910 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800286a:	42ab      	cmp	r3, r5
 800286c:	d040      	beq.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800286e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002872:	42ab      	cmp	r3, r5
 8002874:	d03c      	beq.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 8002876:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002878:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800287a:	6848      	ldr	r0, [r1, #4]
 800287c:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800287e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002880:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002882:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002884:	f040 0008 	orr.w	r0, r0, #8
 8002888:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	f021 0104 	bic.w	r1, r1, #4
 8002890:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	4322      	orrs	r2, r4
 8002896:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8002898:	2300      	movs	r3, #0
 800289a:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2000      	movs	r0, #0
}
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80028a2:	2002      	movs	r0, #2
}
 80028a4:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80028a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a8:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80028ac:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ae:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028b2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80028b6:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ba:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80028be:	ea4e 0404 	orr.w	r4, lr, r4
 80028c2:	e77a      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80028c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028ca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028ce:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028d2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028d6:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80028da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028de:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80028e2:	e799      	b.n	8002818 <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028e6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028ea:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80028ee:	e736      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028f0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028fa:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028fe:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002902:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800290a:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 800290e:	e7b2      	b.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x182>
 8002910:	40010000 	.word	0x40010000

08002914 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002914:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d075      	beq.n	8002a08 <HAL_TIM_ConfigClockSource+0xf4>
 800291c:	4602      	mov	r2, r0
{
 800291e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8002922:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002928:	2001      	movs	r0, #1
 800292a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800292e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002934:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002938:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800293a:	680b      	ldr	r3, [r1, #0]
 800293c:	2b60      	cmp	r3, #96	; 0x60
 800293e:	d065      	beq.n	8002a0c <HAL_TIM_ConfigClockSource+0xf8>
 8002940:	d824      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x78>
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d07c      	beq.n	8002a40 <HAL_TIM_ConfigClockSource+0x12c>
 8002946:	d94b      	bls.n	80029e0 <HAL_TIM_ConfigClockSource+0xcc>
 8002948:	2b50      	cmp	r3, #80	; 0x50
 800294a:	d117      	bne.n	800297c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800294c:	6848      	ldr	r0, [r1, #4]
 800294e:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002950:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	6a23      	ldr	r3, [r4, #32]
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800295c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002964:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002966:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800296a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800296c:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296e:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002974:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800297c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800297e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002980:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002984:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002988:	bc30      	pop	{r4, r5}
 800298a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d038      	beq.n	8002a04 <HAL_TIM_ConfigClockSource+0xf0>
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002996:	d110      	bne.n	80029ba <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002998:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800299c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800299e:	432b      	orrs	r3, r5
 80029a0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a2:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80029aa:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ac:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ae:	68a3      	ldr	r3, [r4, #8]
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b6:	60a3      	str	r3, [r4, #8]
      break;
 80029b8:	e7e0      	b.n	800297c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80029ba:	2b70      	cmp	r3, #112	; 0x70
 80029bc:	d1de      	bne.n	800297c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029be:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80029c2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c4:	432b      	orrs	r3, r5
 80029c6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c8:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80029d0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80029d2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80029d4:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80029dc:	60a3      	str	r3, [r4, #8]
      break;
 80029de:	e7cd      	b.n	800297c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d002      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0xd6>
 80029e4:	d90a      	bls.n	80029fc <HAL_TIM_ConfigClockSource+0xe8>
 80029e6:	2b30      	cmp	r3, #48	; 0x30
 80029e8:	d1c8      	bne.n	800297c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80029ea:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029f0:	430b      	orrs	r3, r1
 80029f2:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80029f8:	60a3      	str	r3, [r4, #8]
}
 80029fa:	e7bf      	b.n	800297c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80029fc:	f033 0110 	bics.w	r1, r3, #16
 8002a00:	d1bc      	bne.n	800297c <HAL_TIM_ConfigClockSource+0x68>
 8002a02:	e7f2      	b.n	80029ea <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2000      	movs	r0, #0
 8002a06:	e7b9      	b.n	800297c <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8002a08:	2002      	movs	r0, #2
}
 8002a0a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0c:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	68cb      	ldr	r3, [r1, #12]
 8002a10:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a12:	f020 0010 	bic.w	r0, r0, #16
 8002a16:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a18:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a1a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a1e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8002a22:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002a24:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a2a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8002a2e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002a30:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a36:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002a3c:	60a3      	str	r3, [r4, #8]
}
 8002a3e:	e79d      	b.n	800297c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a40:	6848      	ldr	r0, [r1, #4]
 8002a42:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a44:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a46:	6a23      	ldr	r3, [r4, #32]
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4e:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a50:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002a58:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a5a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002a5e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002a60:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002a62:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a68:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002a6e:	60a3      	str	r3, [r4, #8]
}
 8002a70:	e784      	b.n	800297c <HAL_TIM_ConfigClockSource+0x68>
 8002a72:	bf00      	nop

08002a74 <HAL_TIM_OC_DelayElapsedCallback>:
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <HAL_TIM_IC_CaptureCallback>:
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop

08002a7c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop

08002a80 <HAL_TIM_TriggerCallback>:
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop

08002a84 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a84:	6803      	ldr	r3, [r0, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	0791      	lsls	r1, r2, #30
{
 8002a8a:	b510      	push	{r4, lr}
 8002a8c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a8e:	d502      	bpl.n	8002a96 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	0792      	lsls	r2, r2, #30
 8002a94:	d45f      	bmi.n	8002b56 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	0750      	lsls	r0, r2, #29
 8002a9a:	d502      	bpl.n	8002aa2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	0751      	lsls	r1, r2, #29
 8002aa0:	d446      	bmi.n	8002b30 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	0712      	lsls	r2, r2, #28
 8002aa6:	d502      	bpl.n	8002aae <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	0710      	lsls	r0, r2, #28
 8002aac:	d42e      	bmi.n	8002b0c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	06d2      	lsls	r2, r2, #27
 8002ab2:	d502      	bpl.n	8002aba <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	06d0      	lsls	r0, r2, #27
 8002ab8:	d418      	bmi.n	8002aec <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	07d1      	lsls	r1, r2, #31
 8002abe:	d502      	bpl.n	8002ac6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	07d2      	lsls	r2, r2, #31
 8002ac4:	d45d      	bmi.n	8002b82 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	0610      	lsls	r0, r2, #24
 8002aca:	d502      	bpl.n	8002ad2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	0611      	lsls	r1, r2, #24
 8002ad0:	d45f      	bmi.n	8002b92 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	0652      	lsls	r2, r2, #25
 8002ad6:	d502      	bpl.n	8002ade <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	0650      	lsls	r0, r2, #25
 8002adc:	d461      	bmi.n	8002ba2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	0691      	lsls	r1, r2, #26
 8002ae2:	d502      	bpl.n	8002aea <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	0692      	lsls	r2, r2, #26
 8002ae8:	d443      	bmi.n	8002b72 <HAL_TIM_IRQHandler+0xee>
}
 8002aea:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aec:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002afc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002afe:	d064      	beq.n	8002bca <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b00:	f7ff ffba 	bl	8002a78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b04:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b06:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	7722      	strb	r2, [r4, #28]
 8002b0a:	e7d6      	b.n	8002aba <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b0c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b10:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b12:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b14:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b1c:	d152      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	f7ff ffa9 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b22:	4620      	mov	r0, r4
 8002b24:	f7ff ffaa 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b28:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b2a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2c:	7722      	strb	r2, [r4, #28]
 8002b2e:	e7be      	b.n	8002aae <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b30:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b34:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b36:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002b40:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b42:	d13c      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b44:	f7ff ff96 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff ff97 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b50:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	7722      	strb	r2, [r4, #28]
 8002b54:	e7a5      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b56:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b5a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b5c:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b5e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	079b      	lsls	r3, r3, #30
 8002b64:	d025      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	f7ff ff87 	bl	8002a78 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b6c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	7722      	strb	r2, [r4, #28]
 8002b70:	e791      	b.n	8002a96 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b72:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002b76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002b7e:	f000 b8fb 	b.w	8002d78 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b82:	f06f 0201 	mvn.w	r2, #1
 8002b86:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f7fe faaf 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	e799      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 f8ef 	bl	8002d7c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	e797      	b.n	8002ad2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ba6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7ff ff69 	bl	8002a80 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	e795      	b.n	8002ade <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	f7ff ff5f 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f7ff ff60 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
 8002bbc:	e7d5      	b.n	8002b6a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	f7ff ff5b 	bl	8002a78 <HAL_TIM_IC_CaptureCallback>
 8002bc2:	e7c4      	b.n	8002b4e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc4:	f7ff ff58 	bl	8002a78 <HAL_TIM_IC_CaptureCallback>
 8002bc8:	e7ae      	b.n	8002b28 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	f7ff ff53 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ff54 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedCallback>
 8002bd4:	e796      	b.n	8002b04 <HAL_TIM_IRQHandler+0x80>
 8002bd6:	bf00      	nop

08002bd8 <HAL_TIMEx_PWMN_Start>:
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	d13f      	bne.n	8002c5c <HAL_TIMEx_PWMN_Start+0x84>
 8002bdc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d143      	bne.n	8002c6c <HAL_TIMEx_PWMN_Start+0x94>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002bea:	6803      	ldr	r3, [r0, #0]
 8002bec:	2204      	movs	r2, #4
 8002bee:	6a18      	ldr	r0, [r3, #32]
 8002bf0:	f001 011f 	and.w	r1, r1, #31
 8002bf4:	fa02 f101 	lsl.w	r1, r2, r1
 8002bf8:	ea20 0001 	bic.w	r0, r0, r1
 8002bfc:	6218      	str	r0, [r3, #32]
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	4826      	ldr	r0, [pc, #152]	; (8002c9c <HAL_TIMEx_PWMN_Start+0xc4>)
 8002c02:	4311      	orrs	r1, r2
 8002c04:	6219      	str	r1, [r3, #32]
 8002c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c08:	4283      	cmp	r3, r0
 8002c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c10:	d019      	beq.n	8002c46 <HAL_TIMEx_PWMN_Start+0x6e>
 8002c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c16:	d016      	beq.n	8002c46 <HAL_TIMEx_PWMN_Start+0x6e>
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_TIMEx_PWMN_Start+0xc8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_TIMEx_PWMN_Start+0x6e>
 8002c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00f      	beq.n	8002c46 <HAL_TIMEx_PWMN_Start+0x6e>
 8002c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00b      	beq.n	8002c46 <HAL_TIMEx_PWMN_Start+0x6e>
 8002c2e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <HAL_TIMEx_PWMN_Start+0x6e>
 8002c36:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIMEx_PWMN_Start+0x6e>
 8002c3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d104      	bne.n	8002c50 <HAL_TIMEx_PWMN_Start+0x78>
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	f002 0207 	and.w	r2, r2, #7
 8002c4c:	2a06      	cmp	r2, #6
 8002c4e:	d00f      	beq.n	8002c70 <HAL_TIMEx_PWMN_Start+0x98>
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	2000      	movs	r0, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	4770      	bx	lr
 8002c5c:	2904      	cmp	r1, #4
 8002c5e:	d00d      	beq.n	8002c7c <HAL_TIMEx_PWMN_Start+0xa4>
 8002c60:	2908      	cmp	r1, #8
 8002c62:	d013      	beq.n	8002c8c <HAL_TIMEx_PWMN_Start+0xb4>
 8002c64:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d003      	beq.n	8002c74 <HAL_TIMEx_PWMN_Start+0x9c>
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	4770      	bx	lr
 8002c70:	2000      	movs	r0, #0
 8002c72:	4770      	bx	lr
 8002c74:	2302      	movs	r3, #2
 8002c76:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8002c7a:	e7b6      	b.n	8002bea <HAL_TIMEx_PWMN_Start+0x12>
 8002c7c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d1f3      	bne.n	8002c6c <HAL_TIMEx_PWMN_Start+0x94>
 8002c84:	2302      	movs	r3, #2
 8002c86:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002c8a:	e7ae      	b.n	8002bea <HAL_TIMEx_PWMN_Start+0x12>
 8002c8c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d1eb      	bne.n	8002c6c <HAL_TIMEx_PWMN_Start+0x94>
 8002c94:	2302      	movs	r3, #2
 8002c96:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8002c9a:	e7a6      	b.n	8002bea <HAL_TIMEx_PWMN_Start+0x12>
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40000400 	.word	0x40000400

08002ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d037      	beq.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cac:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002cae:	2202      	movs	r2, #2
{
 8002cb0:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002cb6:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb8:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002cba:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01a      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cce:	d017      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002cd0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002cd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00f      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00b      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002ce8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002cf0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002cf8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d00:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d02:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d06:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d08:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002d0a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002d16:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8002d18:	4618      	mov	r0, r3
}
 8002d1a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002d1c:	2002      	movs	r0, #2
}
 8002d1e:	4770      	bx	lr
 8002d20:	40010000 	.word	0x40010000

08002d24 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d023      	beq.n	8002d74 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8002d2c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d2e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	4602      	mov	r2, r0
 8002d38:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d3a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d3c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d42:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d48:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d4a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d50:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d52:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d54:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d5a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d60:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8002d62:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d64:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8002d66:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002d68:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8002d6c:	4608      	mov	r0, r1
}
 8002d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d72:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002d74:	2002      	movs	r0, #2
}
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIMEx_CommutCallback>:
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <HAL_TIMEx_BreakCallback>:
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop

08002d80 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d80:	2800      	cmp	r0, #0
 8002d82:	f000 808f 	beq.w	8002ea4 <HAL_UART_Init+0x124>
{
 8002d86:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8081 	beq.w	8002e9a <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d98:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9a:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d9c:	2224      	movs	r2, #36	; 0x24
 8002d9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002daa:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dac:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dae:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002db2:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002db4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db6:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002db8:	4302      	orrs	r2, r0
 8002dba:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002dbc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dbe:	4302      	orrs	r2, r0
 8002dc0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002dc2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002dc6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dd4:	4934      	ldr	r1, [pc, #208]	; (8002ea8 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dda:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ddc:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dde:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002de0:	d035      	beq.n	8002e4e <HAL_UART_Init+0xce>
 8002de2:	4a32      	ldr	r2, [pc, #200]	; (8002eac <HAL_UART_Init+0x12c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d032      	beq.n	8002e4e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7ff f83c 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dec:	69e3      	ldr	r3, [r4, #28]
 8002dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df2:	d032      	beq.n	8002e5a <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df4:	6863      	ldr	r3, [r4, #4]
 8002df6:	2119      	movs	r1, #25
 8002df8:	009a      	lsls	r2, r3, #2
 8002dfa:	fba0 0101 	umull	r0, r1, r0, r1
 8002dfe:	0f9b      	lsrs	r3, r3, #30
 8002e00:	f7fd fa56 	bl	80002b0 <__aeabi_uldivmod>
 8002e04:	492a      	ldr	r1, [pc, #168]	; (8002eb0 <HAL_UART_Init+0x130>)
 8002e06:	fba1 3200 	umull	r3, r2, r1, r0
 8002e0a:	0952      	lsrs	r2, r2, #5
 8002e0c:	2564      	movs	r5, #100	; 0x64
 8002e0e:	fb05 0012 	mls	r0, r5, r2, r0
 8002e12:	0100      	lsls	r0, r0, #4
 8002e14:	3032      	adds	r0, #50	; 0x32
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	fba1 1000 	umull	r1, r0, r1, r0
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8002e22:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e32:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002e34:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e36:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002e38:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002e3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e3e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e42:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e46:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8002e4a:	4628      	mov	r0, r5
}
 8002e4c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e4e:	f7ff f819 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e52:	69e3      	ldr	r3, [r4, #28]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	d1cc      	bne.n	8002df4 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e5a:	6862      	ldr	r2, [r4, #4]
 8002e5c:	2119      	movs	r1, #25
 8002e5e:	1892      	adds	r2, r2, r2
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	415b      	adcs	r3, r3
 8002e66:	fba0 0101 	umull	r0, r1, r0, r1
 8002e6a:	f7fd fa21 	bl	80002b0 <__aeabi_uldivmod>
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_UART_Init+0x130>)
 8002e70:	fba3 2100 	umull	r2, r1, r3, r0
 8002e74:	094d      	lsrs	r5, r1, #5
 8002e76:	2264      	movs	r2, #100	; 0x64
 8002e78:	fb02 0215 	mls	r2, r2, r5, r0
 8002e7c:	00d2      	lsls	r2, r2, #3
 8002e7e:	3232      	adds	r2, #50	; 0x32
 8002e80:	fba3 3202 	umull	r3, r2, r3, r2
 8002e84:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8002e88:	0912      	lsrs	r2, r2, #4
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002e90:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002e94:	440a      	add	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e7c4      	b.n	8002e24 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8002e9a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002e9e:	f7fe fb27 	bl	80014f0 <HAL_UART_MspInit>
 8002ea2:	e779      	b.n	8002d98 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
}
 8002ea6:	4770      	bx	lr
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40011400 	.word	0x40011400
 8002eb0:	51eb851f 	.word	0x51eb851f

08002eb4 <__errno>:
 8002eb4:	4b01      	ldr	r3, [pc, #4]	; (8002ebc <__errno+0x8>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000030 	.word	0x20000030

08002ec0 <__libc_init_array>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4d0d      	ldr	r5, [pc, #52]	; (8002ef8 <__libc_init_array+0x38>)
 8002ec4:	4c0d      	ldr	r4, [pc, #52]	; (8002efc <__libc_init_array+0x3c>)
 8002ec6:	1b64      	subs	r4, r4, r5
 8002ec8:	10a4      	asrs	r4, r4, #2
 8002eca:	2600      	movs	r6, #0
 8002ecc:	42a6      	cmp	r6, r4
 8002ece:	d109      	bne.n	8002ee4 <__libc_init_array+0x24>
 8002ed0:	4d0b      	ldr	r5, [pc, #44]	; (8002f00 <__libc_init_array+0x40>)
 8002ed2:	4c0c      	ldr	r4, [pc, #48]	; (8002f04 <__libc_init_array+0x44>)
 8002ed4:	f000 ffae 	bl	8003e34 <_init>
 8002ed8:	1b64      	subs	r4, r4, r5
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	2600      	movs	r6, #0
 8002ede:	42a6      	cmp	r6, r4
 8002ee0:	d105      	bne.n	8002eee <__libc_init_array+0x2e>
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee8:	4798      	blx	r3
 8002eea:	3601      	adds	r6, #1
 8002eec:	e7ee      	b.n	8002ecc <__libc_init_array+0xc>
 8002eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef2:	4798      	blx	r3
 8002ef4:	3601      	adds	r6, #1
 8002ef6:	e7f2      	b.n	8002ede <__libc_init_array+0x1e>
 8002ef8:	08003f10 	.word	0x08003f10
 8002efc:	08003f10 	.word	0x08003f10
 8002f00:	08003f10 	.word	0x08003f10
 8002f04:	08003f14 	.word	0x08003f14

08002f08 <memset>:
 8002f08:	4402      	add	r2, r0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d100      	bne.n	8002f12 <memset+0xa>
 8002f10:	4770      	bx	lr
 8002f12:	f803 1b01 	strb.w	r1, [r3], #1
 8002f16:	e7f9      	b.n	8002f0c <memset+0x4>

08002f18 <iprintf>:
 8002f18:	b40f      	push	{r0, r1, r2, r3}
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <iprintf+0x2c>)
 8002f1c:	b513      	push	{r0, r1, r4, lr}
 8002f1e:	681c      	ldr	r4, [r3, #0]
 8002f20:	b124      	cbz	r4, 8002f2c <iprintf+0x14>
 8002f22:	69a3      	ldr	r3, [r4, #24]
 8002f24:	b913      	cbnz	r3, 8002f2c <iprintf+0x14>
 8002f26:	4620      	mov	r0, r4
 8002f28:	f000 f9e8 	bl	80032fc <__sinit>
 8002f2c:	ab05      	add	r3, sp, #20
 8002f2e:	9a04      	ldr	r2, [sp, #16]
 8002f30:	68a1      	ldr	r1, [r4, #8]
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	4620      	mov	r0, r4
 8002f36:	f000 fbf1 	bl	800371c <_vfiprintf_r>
 8002f3a:	b002      	add	sp, #8
 8002f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f40:	b004      	add	sp, #16
 8002f42:	4770      	bx	lr
 8002f44:	20000030 	.word	0x20000030

08002f48 <__swbuf_r>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	460e      	mov	r6, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	4605      	mov	r5, r0
 8002f50:	b118      	cbz	r0, 8002f5a <__swbuf_r+0x12>
 8002f52:	6983      	ldr	r3, [r0, #24]
 8002f54:	b90b      	cbnz	r3, 8002f5a <__swbuf_r+0x12>
 8002f56:	f000 f9d1 	bl	80032fc <__sinit>
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <__swbuf_r+0x98>)
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	d12b      	bne.n	8002fb8 <__swbuf_r+0x70>
 8002f60:	686c      	ldr	r4, [r5, #4]
 8002f62:	69a3      	ldr	r3, [r4, #24]
 8002f64:	60a3      	str	r3, [r4, #8]
 8002f66:	89a3      	ldrh	r3, [r4, #12]
 8002f68:	071a      	lsls	r2, r3, #28
 8002f6a:	d52f      	bpl.n	8002fcc <__swbuf_r+0x84>
 8002f6c:	6923      	ldr	r3, [r4, #16]
 8002f6e:	b36b      	cbz	r3, 8002fcc <__swbuf_r+0x84>
 8002f70:	6923      	ldr	r3, [r4, #16]
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	1ac0      	subs	r0, r0, r3
 8002f76:	6963      	ldr	r3, [r4, #20]
 8002f78:	b2f6      	uxtb	r6, r6
 8002f7a:	4283      	cmp	r3, r0
 8002f7c:	4637      	mov	r7, r6
 8002f7e:	dc04      	bgt.n	8002f8a <__swbuf_r+0x42>
 8002f80:	4621      	mov	r1, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	f000 f926 	bl	80031d4 <_fflush_r>
 8002f88:	bb30      	cbnz	r0, 8002fd8 <__swbuf_r+0x90>
 8002f8a:	68a3      	ldr	r3, [r4, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60a3      	str	r3, [r4, #8]
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	6022      	str	r2, [r4, #0]
 8002f96:	701e      	strb	r6, [r3, #0]
 8002f98:	6963      	ldr	r3, [r4, #20]
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	4283      	cmp	r3, r0
 8002f9e:	d004      	beq.n	8002faa <__swbuf_r+0x62>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	07db      	lsls	r3, r3, #31
 8002fa4:	d506      	bpl.n	8002fb4 <__swbuf_r+0x6c>
 8002fa6:	2e0a      	cmp	r6, #10
 8002fa8:	d104      	bne.n	8002fb4 <__swbuf_r+0x6c>
 8002faa:	4621      	mov	r1, r4
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 f911 	bl	80031d4 <_fflush_r>
 8002fb2:	b988      	cbnz	r0, 8002fd8 <__swbuf_r+0x90>
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <__swbuf_r+0x9c>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d101      	bne.n	8002fc2 <__swbuf_r+0x7a>
 8002fbe:	68ac      	ldr	r4, [r5, #8]
 8002fc0:	e7cf      	b.n	8002f62 <__swbuf_r+0x1a>
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <__swbuf_r+0xa0>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	bf08      	it	eq
 8002fc8:	68ec      	ldreq	r4, [r5, #12]
 8002fca:	e7ca      	b.n	8002f62 <__swbuf_r+0x1a>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f80c 	bl	8002fec <__swsetup_r>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d0cb      	beq.n	8002f70 <__swbuf_r+0x28>
 8002fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8002fdc:	e7ea      	b.n	8002fb4 <__swbuf_r+0x6c>
 8002fde:	bf00      	nop
 8002fe0:	08003e94 	.word	0x08003e94
 8002fe4:	08003eb4 	.word	0x08003eb4
 8002fe8:	08003e74 	.word	0x08003e74

08002fec <__swsetup_r>:
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <__swsetup_r+0xcc>)
 8002fee:	b570      	push	{r4, r5, r6, lr}
 8002ff0:	681d      	ldr	r5, [r3, #0]
 8002ff2:	4606      	mov	r6, r0
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	b125      	cbz	r5, 8003002 <__swsetup_r+0x16>
 8002ff8:	69ab      	ldr	r3, [r5, #24]
 8002ffa:	b913      	cbnz	r3, 8003002 <__swsetup_r+0x16>
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 f97d 	bl	80032fc <__sinit>
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <__swsetup_r+0xd0>)
 8003004:	429c      	cmp	r4, r3
 8003006:	d10f      	bne.n	8003028 <__swsetup_r+0x3c>
 8003008:	686c      	ldr	r4, [r5, #4]
 800300a:	89a3      	ldrh	r3, [r4, #12]
 800300c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003010:	0719      	lsls	r1, r3, #28
 8003012:	d42c      	bmi.n	800306e <__swsetup_r+0x82>
 8003014:	06dd      	lsls	r5, r3, #27
 8003016:	d411      	bmi.n	800303c <__swsetup_r+0x50>
 8003018:	2309      	movs	r3, #9
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003020:	81a3      	strh	r3, [r4, #12]
 8003022:	f04f 30ff 	mov.w	r0, #4294967295
 8003026:	e03e      	b.n	80030a6 <__swsetup_r+0xba>
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <__swsetup_r+0xd4>)
 800302a:	429c      	cmp	r4, r3
 800302c:	d101      	bne.n	8003032 <__swsetup_r+0x46>
 800302e:	68ac      	ldr	r4, [r5, #8]
 8003030:	e7eb      	b.n	800300a <__swsetup_r+0x1e>
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <__swsetup_r+0xd8>)
 8003034:	429c      	cmp	r4, r3
 8003036:	bf08      	it	eq
 8003038:	68ec      	ldreq	r4, [r5, #12]
 800303a:	e7e6      	b.n	800300a <__swsetup_r+0x1e>
 800303c:	0758      	lsls	r0, r3, #29
 800303e:	d512      	bpl.n	8003066 <__swsetup_r+0x7a>
 8003040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003042:	b141      	cbz	r1, 8003056 <__swsetup_r+0x6a>
 8003044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003048:	4299      	cmp	r1, r3
 800304a:	d002      	beq.n	8003052 <__swsetup_r+0x66>
 800304c:	4630      	mov	r0, r6
 800304e:	f000 fa5b 	bl	8003508 <_free_r>
 8003052:	2300      	movs	r3, #0
 8003054:	6363      	str	r3, [r4, #52]	; 0x34
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	2300      	movs	r3, #0
 8003060:	6063      	str	r3, [r4, #4]
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	6923      	ldr	r3, [r4, #16]
 8003070:	b94b      	cbnz	r3, 8003086 <__swsetup_r+0x9a>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307c:	d003      	beq.n	8003086 <__swsetup_r+0x9a>
 800307e:	4621      	mov	r1, r4
 8003080:	4630      	mov	r0, r6
 8003082:	f000 fa01 	bl	8003488 <__smakebuf_r>
 8003086:	89a0      	ldrh	r0, [r4, #12]
 8003088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800308c:	f010 0301 	ands.w	r3, r0, #1
 8003090:	d00a      	beq.n	80030a8 <__swsetup_r+0xbc>
 8003092:	2300      	movs	r3, #0
 8003094:	60a3      	str	r3, [r4, #8]
 8003096:	6963      	ldr	r3, [r4, #20]
 8003098:	425b      	negs	r3, r3
 800309a:	61a3      	str	r3, [r4, #24]
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b943      	cbnz	r3, 80030b2 <__swsetup_r+0xc6>
 80030a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030a4:	d1ba      	bne.n	800301c <__swsetup_r+0x30>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	0781      	lsls	r1, r0, #30
 80030aa:	bf58      	it	pl
 80030ac:	6963      	ldrpl	r3, [r4, #20]
 80030ae:	60a3      	str	r3, [r4, #8]
 80030b0:	e7f4      	b.n	800309c <__swsetup_r+0xb0>
 80030b2:	2000      	movs	r0, #0
 80030b4:	e7f7      	b.n	80030a6 <__swsetup_r+0xba>
 80030b6:	bf00      	nop
 80030b8:	20000030 	.word	0x20000030
 80030bc:	08003e94 	.word	0x08003e94
 80030c0:	08003eb4 	.word	0x08003eb4
 80030c4:	08003e74 	.word	0x08003e74

080030c8 <__sflush_r>:
 80030c8:	898a      	ldrh	r2, [r1, #12]
 80030ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ce:	4605      	mov	r5, r0
 80030d0:	0710      	lsls	r0, r2, #28
 80030d2:	460c      	mov	r4, r1
 80030d4:	d458      	bmi.n	8003188 <__sflush_r+0xc0>
 80030d6:	684b      	ldr	r3, [r1, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	dc05      	bgt.n	80030e8 <__sflush_r+0x20>
 80030dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	dc02      	bgt.n	80030e8 <__sflush_r+0x20>
 80030e2:	2000      	movs	r0, #0
 80030e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ea:	2e00      	cmp	r6, #0
 80030ec:	d0f9      	beq.n	80030e2 <__sflush_r+0x1a>
 80030ee:	2300      	movs	r3, #0
 80030f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030f4:	682f      	ldr	r7, [r5, #0]
 80030f6:	602b      	str	r3, [r5, #0]
 80030f8:	d032      	beq.n	8003160 <__sflush_r+0x98>
 80030fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	075a      	lsls	r2, r3, #29
 8003100:	d505      	bpl.n	800310e <__sflush_r+0x46>
 8003102:	6863      	ldr	r3, [r4, #4]
 8003104:	1ac0      	subs	r0, r0, r3
 8003106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003108:	b10b      	cbz	r3, 800310e <__sflush_r+0x46>
 800310a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800310c:	1ac0      	subs	r0, r0, r3
 800310e:	2300      	movs	r3, #0
 8003110:	4602      	mov	r2, r0
 8003112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003114:	6a21      	ldr	r1, [r4, #32]
 8003116:	4628      	mov	r0, r5
 8003118:	47b0      	blx	r6
 800311a:	1c43      	adds	r3, r0, #1
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	d106      	bne.n	800312e <__sflush_r+0x66>
 8003120:	6829      	ldr	r1, [r5, #0]
 8003122:	291d      	cmp	r1, #29
 8003124:	d82c      	bhi.n	8003180 <__sflush_r+0xb8>
 8003126:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <__sflush_r+0x108>)
 8003128:	40ca      	lsrs	r2, r1
 800312a:	07d6      	lsls	r6, r2, #31
 800312c:	d528      	bpl.n	8003180 <__sflush_r+0xb8>
 800312e:	2200      	movs	r2, #0
 8003130:	6062      	str	r2, [r4, #4]
 8003132:	04d9      	lsls	r1, r3, #19
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	6022      	str	r2, [r4, #0]
 8003138:	d504      	bpl.n	8003144 <__sflush_r+0x7c>
 800313a:	1c42      	adds	r2, r0, #1
 800313c:	d101      	bne.n	8003142 <__sflush_r+0x7a>
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	b903      	cbnz	r3, 8003144 <__sflush_r+0x7c>
 8003142:	6560      	str	r0, [r4, #84]	; 0x54
 8003144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003146:	602f      	str	r7, [r5, #0]
 8003148:	2900      	cmp	r1, #0
 800314a:	d0ca      	beq.n	80030e2 <__sflush_r+0x1a>
 800314c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003150:	4299      	cmp	r1, r3
 8003152:	d002      	beq.n	800315a <__sflush_r+0x92>
 8003154:	4628      	mov	r0, r5
 8003156:	f000 f9d7 	bl	8003508 <_free_r>
 800315a:	2000      	movs	r0, #0
 800315c:	6360      	str	r0, [r4, #52]	; 0x34
 800315e:	e7c1      	b.n	80030e4 <__sflush_r+0x1c>
 8003160:	6a21      	ldr	r1, [r4, #32]
 8003162:	2301      	movs	r3, #1
 8003164:	4628      	mov	r0, r5
 8003166:	47b0      	blx	r6
 8003168:	1c41      	adds	r1, r0, #1
 800316a:	d1c7      	bne.n	80030fc <__sflush_r+0x34>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0c4      	beq.n	80030fc <__sflush_r+0x34>
 8003172:	2b1d      	cmp	r3, #29
 8003174:	d001      	beq.n	800317a <__sflush_r+0xb2>
 8003176:	2b16      	cmp	r3, #22
 8003178:	d101      	bne.n	800317e <__sflush_r+0xb6>
 800317a:	602f      	str	r7, [r5, #0]
 800317c:	e7b1      	b.n	80030e2 <__sflush_r+0x1a>
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	e7ad      	b.n	80030e4 <__sflush_r+0x1c>
 8003188:	690f      	ldr	r7, [r1, #16]
 800318a:	2f00      	cmp	r7, #0
 800318c:	d0a9      	beq.n	80030e2 <__sflush_r+0x1a>
 800318e:	0793      	lsls	r3, r2, #30
 8003190:	680e      	ldr	r6, [r1, #0]
 8003192:	bf08      	it	eq
 8003194:	694b      	ldreq	r3, [r1, #20]
 8003196:	600f      	str	r7, [r1, #0]
 8003198:	bf18      	it	ne
 800319a:	2300      	movne	r3, #0
 800319c:	eba6 0807 	sub.w	r8, r6, r7
 80031a0:	608b      	str	r3, [r1, #8]
 80031a2:	f1b8 0f00 	cmp.w	r8, #0
 80031a6:	dd9c      	ble.n	80030e2 <__sflush_r+0x1a>
 80031a8:	6a21      	ldr	r1, [r4, #32]
 80031aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031ac:	4643      	mov	r3, r8
 80031ae:	463a      	mov	r2, r7
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b0      	blx	r6
 80031b4:	2800      	cmp	r0, #0
 80031b6:	dc06      	bgt.n	80031c6 <__sflush_r+0xfe>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031be:	81a3      	strh	r3, [r4, #12]
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	e78e      	b.n	80030e4 <__sflush_r+0x1c>
 80031c6:	4407      	add	r7, r0
 80031c8:	eba8 0800 	sub.w	r8, r8, r0
 80031cc:	e7e9      	b.n	80031a2 <__sflush_r+0xda>
 80031ce:	bf00      	nop
 80031d0:	20400001 	.word	0x20400001

080031d4 <_fflush_r>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	690b      	ldr	r3, [r1, #16]
 80031d8:	4605      	mov	r5, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	b913      	cbnz	r3, 80031e4 <_fflush_r+0x10>
 80031de:	2500      	movs	r5, #0
 80031e0:	4628      	mov	r0, r5
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	b118      	cbz	r0, 80031ee <_fflush_r+0x1a>
 80031e6:	6983      	ldr	r3, [r0, #24]
 80031e8:	b90b      	cbnz	r3, 80031ee <_fflush_r+0x1a>
 80031ea:	f000 f887 	bl	80032fc <__sinit>
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <_fflush_r+0x6c>)
 80031f0:	429c      	cmp	r4, r3
 80031f2:	d11b      	bne.n	800322c <_fflush_r+0x58>
 80031f4:	686c      	ldr	r4, [r5, #4]
 80031f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ef      	beq.n	80031de <_fflush_r+0xa>
 80031fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003200:	07d0      	lsls	r0, r2, #31
 8003202:	d404      	bmi.n	800320e <_fflush_r+0x3a>
 8003204:	0599      	lsls	r1, r3, #22
 8003206:	d402      	bmi.n	800320e <_fflush_r+0x3a>
 8003208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320a:	f000 f915 	bl	8003438 <__retarget_lock_acquire_recursive>
 800320e:	4628      	mov	r0, r5
 8003210:	4621      	mov	r1, r4
 8003212:	f7ff ff59 	bl	80030c8 <__sflush_r>
 8003216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003218:	07da      	lsls	r2, r3, #31
 800321a:	4605      	mov	r5, r0
 800321c:	d4e0      	bmi.n	80031e0 <_fflush_r+0xc>
 800321e:	89a3      	ldrh	r3, [r4, #12]
 8003220:	059b      	lsls	r3, r3, #22
 8003222:	d4dd      	bmi.n	80031e0 <_fflush_r+0xc>
 8003224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003226:	f000 f908 	bl	800343a <__retarget_lock_release_recursive>
 800322a:	e7d9      	b.n	80031e0 <_fflush_r+0xc>
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <_fflush_r+0x70>)
 800322e:	429c      	cmp	r4, r3
 8003230:	d101      	bne.n	8003236 <_fflush_r+0x62>
 8003232:	68ac      	ldr	r4, [r5, #8]
 8003234:	e7df      	b.n	80031f6 <_fflush_r+0x22>
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <_fflush_r+0x74>)
 8003238:	429c      	cmp	r4, r3
 800323a:	bf08      	it	eq
 800323c:	68ec      	ldreq	r4, [r5, #12]
 800323e:	e7da      	b.n	80031f6 <_fflush_r+0x22>
 8003240:	08003e94 	.word	0x08003e94
 8003244:	08003eb4 	.word	0x08003eb4
 8003248:	08003e74 	.word	0x08003e74

0800324c <std>:
 800324c:	2300      	movs	r3, #0
 800324e:	b510      	push	{r4, lr}
 8003250:	4604      	mov	r4, r0
 8003252:	e9c0 3300 	strd	r3, r3, [r0]
 8003256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800325a:	6083      	str	r3, [r0, #8]
 800325c:	8181      	strh	r1, [r0, #12]
 800325e:	6643      	str	r3, [r0, #100]	; 0x64
 8003260:	81c2      	strh	r2, [r0, #14]
 8003262:	6183      	str	r3, [r0, #24]
 8003264:	4619      	mov	r1, r3
 8003266:	2208      	movs	r2, #8
 8003268:	305c      	adds	r0, #92	; 0x5c
 800326a:	f7ff fe4d 	bl	8002f08 <memset>
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <std+0x38>)
 8003270:	6263      	str	r3, [r4, #36]	; 0x24
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <std+0x3c>)
 8003274:	62a3      	str	r3, [r4, #40]	; 0x28
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <std+0x40>)
 8003278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <std+0x44>)
 800327c:	6224      	str	r4, [r4, #32]
 800327e:	6323      	str	r3, [r4, #48]	; 0x30
 8003280:	bd10      	pop	{r4, pc}
 8003282:	bf00      	nop
 8003284:	08003cc5 	.word	0x08003cc5
 8003288:	08003ce7 	.word	0x08003ce7
 800328c:	08003d1f 	.word	0x08003d1f
 8003290:	08003d43 	.word	0x08003d43

08003294 <_cleanup_r>:
 8003294:	4901      	ldr	r1, [pc, #4]	; (800329c <_cleanup_r+0x8>)
 8003296:	f000 b8af 	b.w	80033f8 <_fwalk_reent>
 800329a:	bf00      	nop
 800329c:	080031d5 	.word	0x080031d5

080032a0 <__sfmoreglue>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	2268      	movs	r2, #104	; 0x68
 80032a4:	1e4d      	subs	r5, r1, #1
 80032a6:	4355      	muls	r5, r2
 80032a8:	460e      	mov	r6, r1
 80032aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ae:	f000 f997 	bl	80035e0 <_malloc_r>
 80032b2:	4604      	mov	r4, r0
 80032b4:	b140      	cbz	r0, 80032c8 <__sfmoreglue+0x28>
 80032b6:	2100      	movs	r1, #0
 80032b8:	e9c0 1600 	strd	r1, r6, [r0]
 80032bc:	300c      	adds	r0, #12
 80032be:	60a0      	str	r0, [r4, #8]
 80032c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032c4:	f7ff fe20 	bl	8002f08 <memset>
 80032c8:	4620      	mov	r0, r4
 80032ca:	bd70      	pop	{r4, r5, r6, pc}

080032cc <__sfp_lock_acquire>:
 80032cc:	4801      	ldr	r0, [pc, #4]	; (80032d4 <__sfp_lock_acquire+0x8>)
 80032ce:	f000 b8b3 	b.w	8003438 <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	200002b1 	.word	0x200002b1

080032d8 <__sfp_lock_release>:
 80032d8:	4801      	ldr	r0, [pc, #4]	; (80032e0 <__sfp_lock_release+0x8>)
 80032da:	f000 b8ae 	b.w	800343a <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	200002b1 	.word	0x200002b1

080032e4 <__sinit_lock_acquire>:
 80032e4:	4801      	ldr	r0, [pc, #4]	; (80032ec <__sinit_lock_acquire+0x8>)
 80032e6:	f000 b8a7 	b.w	8003438 <__retarget_lock_acquire_recursive>
 80032ea:	bf00      	nop
 80032ec:	200002b2 	.word	0x200002b2

080032f0 <__sinit_lock_release>:
 80032f0:	4801      	ldr	r0, [pc, #4]	; (80032f8 <__sinit_lock_release+0x8>)
 80032f2:	f000 b8a2 	b.w	800343a <__retarget_lock_release_recursive>
 80032f6:	bf00      	nop
 80032f8:	200002b2 	.word	0x200002b2

080032fc <__sinit>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4604      	mov	r4, r0
 8003300:	f7ff fff0 	bl	80032e4 <__sinit_lock_acquire>
 8003304:	69a3      	ldr	r3, [r4, #24]
 8003306:	b11b      	cbz	r3, 8003310 <__sinit+0x14>
 8003308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800330c:	f7ff bff0 	b.w	80032f0 <__sinit_lock_release>
 8003310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003314:	6523      	str	r3, [r4, #80]	; 0x50
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <__sinit+0x68>)
 8003318:	4a13      	ldr	r2, [pc, #76]	; (8003368 <__sinit+0x6c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	62a2      	str	r2, [r4, #40]	; 0x28
 800331e:	42a3      	cmp	r3, r4
 8003320:	bf04      	itt	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	61a3      	streq	r3, [r4, #24]
 8003326:	4620      	mov	r0, r4
 8003328:	f000 f820 	bl	800336c <__sfp>
 800332c:	6060      	str	r0, [r4, #4]
 800332e:	4620      	mov	r0, r4
 8003330:	f000 f81c 	bl	800336c <__sfp>
 8003334:	60a0      	str	r0, [r4, #8]
 8003336:	4620      	mov	r0, r4
 8003338:	f000 f818 	bl	800336c <__sfp>
 800333c:	2200      	movs	r2, #0
 800333e:	60e0      	str	r0, [r4, #12]
 8003340:	2104      	movs	r1, #4
 8003342:	6860      	ldr	r0, [r4, #4]
 8003344:	f7ff ff82 	bl	800324c <std>
 8003348:	68a0      	ldr	r0, [r4, #8]
 800334a:	2201      	movs	r2, #1
 800334c:	2109      	movs	r1, #9
 800334e:	f7ff ff7d 	bl	800324c <std>
 8003352:	68e0      	ldr	r0, [r4, #12]
 8003354:	2202      	movs	r2, #2
 8003356:	2112      	movs	r1, #18
 8003358:	f7ff ff78 	bl	800324c <std>
 800335c:	2301      	movs	r3, #1
 800335e:	61a3      	str	r3, [r4, #24]
 8003360:	e7d2      	b.n	8003308 <__sinit+0xc>
 8003362:	bf00      	nop
 8003364:	08003e70 	.word	0x08003e70
 8003368:	08003295 	.word	0x08003295

0800336c <__sfp>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	4607      	mov	r7, r0
 8003370:	f7ff ffac 	bl	80032cc <__sfp_lock_acquire>
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <__sfp+0x84>)
 8003376:	681e      	ldr	r6, [r3, #0]
 8003378:	69b3      	ldr	r3, [r6, #24]
 800337a:	b913      	cbnz	r3, 8003382 <__sfp+0x16>
 800337c:	4630      	mov	r0, r6
 800337e:	f7ff ffbd 	bl	80032fc <__sinit>
 8003382:	3648      	adds	r6, #72	; 0x48
 8003384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003388:	3b01      	subs	r3, #1
 800338a:	d503      	bpl.n	8003394 <__sfp+0x28>
 800338c:	6833      	ldr	r3, [r6, #0]
 800338e:	b30b      	cbz	r3, 80033d4 <__sfp+0x68>
 8003390:	6836      	ldr	r6, [r6, #0]
 8003392:	e7f7      	b.n	8003384 <__sfp+0x18>
 8003394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003398:	b9d5      	cbnz	r5, 80033d0 <__sfp+0x64>
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <__sfp+0x88>)
 800339c:	60e3      	str	r3, [r4, #12]
 800339e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033a2:	6665      	str	r5, [r4, #100]	; 0x64
 80033a4:	f000 f847 	bl	8003436 <__retarget_lock_init_recursive>
 80033a8:	f7ff ff96 	bl	80032d8 <__sfp_lock_release>
 80033ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033b4:	6025      	str	r5, [r4, #0]
 80033b6:	61a5      	str	r5, [r4, #24]
 80033b8:	2208      	movs	r2, #8
 80033ba:	4629      	mov	r1, r5
 80033bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033c0:	f7ff fda2 	bl	8002f08 <memset>
 80033c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033cc:	4620      	mov	r0, r4
 80033ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d0:	3468      	adds	r4, #104	; 0x68
 80033d2:	e7d9      	b.n	8003388 <__sfp+0x1c>
 80033d4:	2104      	movs	r1, #4
 80033d6:	4638      	mov	r0, r7
 80033d8:	f7ff ff62 	bl	80032a0 <__sfmoreglue>
 80033dc:	4604      	mov	r4, r0
 80033de:	6030      	str	r0, [r6, #0]
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d1d5      	bne.n	8003390 <__sfp+0x24>
 80033e4:	f7ff ff78 	bl	80032d8 <__sfp_lock_release>
 80033e8:	230c      	movs	r3, #12
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	e7ee      	b.n	80033cc <__sfp+0x60>
 80033ee:	bf00      	nop
 80033f0:	08003e70 	.word	0x08003e70
 80033f4:	ffff0001 	.word	0xffff0001

080033f8 <_fwalk_reent>:
 80033f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033fc:	4606      	mov	r6, r0
 80033fe:	4688      	mov	r8, r1
 8003400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003404:	2700      	movs	r7, #0
 8003406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800340a:	f1b9 0901 	subs.w	r9, r9, #1
 800340e:	d505      	bpl.n	800341c <_fwalk_reent+0x24>
 8003410:	6824      	ldr	r4, [r4, #0]
 8003412:	2c00      	cmp	r4, #0
 8003414:	d1f7      	bne.n	8003406 <_fwalk_reent+0xe>
 8003416:	4638      	mov	r0, r7
 8003418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800341c:	89ab      	ldrh	r3, [r5, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d907      	bls.n	8003432 <_fwalk_reent+0x3a>
 8003422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003426:	3301      	adds	r3, #1
 8003428:	d003      	beq.n	8003432 <_fwalk_reent+0x3a>
 800342a:	4629      	mov	r1, r5
 800342c:	4630      	mov	r0, r6
 800342e:	47c0      	blx	r8
 8003430:	4307      	orrs	r7, r0
 8003432:	3568      	adds	r5, #104	; 0x68
 8003434:	e7e9      	b.n	800340a <_fwalk_reent+0x12>

08003436 <__retarget_lock_init_recursive>:
 8003436:	4770      	bx	lr

08003438 <__retarget_lock_acquire_recursive>:
 8003438:	4770      	bx	lr

0800343a <__retarget_lock_release_recursive>:
 800343a:	4770      	bx	lr

0800343c <__swhatbuf_r>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	460e      	mov	r6, r1
 8003440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003444:	2900      	cmp	r1, #0
 8003446:	b096      	sub	sp, #88	; 0x58
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	da08      	bge.n	8003460 <__swhatbuf_r+0x24>
 800344e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	602a      	str	r2, [r5, #0]
 8003456:	061a      	lsls	r2, r3, #24
 8003458:	d410      	bmi.n	800347c <__swhatbuf_r+0x40>
 800345a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345e:	e00e      	b.n	800347e <__swhatbuf_r+0x42>
 8003460:	466a      	mov	r2, sp
 8003462:	f000 fc95 	bl	8003d90 <_fstat_r>
 8003466:	2800      	cmp	r0, #0
 8003468:	dbf1      	blt.n	800344e <__swhatbuf_r+0x12>
 800346a:	9a01      	ldr	r2, [sp, #4]
 800346c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003470:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003474:	425a      	negs	r2, r3
 8003476:	415a      	adcs	r2, r3
 8003478:	602a      	str	r2, [r5, #0]
 800347a:	e7ee      	b.n	800345a <__swhatbuf_r+0x1e>
 800347c:	2340      	movs	r3, #64	; 0x40
 800347e:	2000      	movs	r0, #0
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	b016      	add	sp, #88	; 0x58
 8003484:	bd70      	pop	{r4, r5, r6, pc}
	...

08003488 <__smakebuf_r>:
 8003488:	898b      	ldrh	r3, [r1, #12]
 800348a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800348c:	079d      	lsls	r5, r3, #30
 800348e:	4606      	mov	r6, r0
 8003490:	460c      	mov	r4, r1
 8003492:	d507      	bpl.n	80034a4 <__smakebuf_r+0x1c>
 8003494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	2301      	movs	r3, #1
 800349e:	6163      	str	r3, [r4, #20]
 80034a0:	b002      	add	sp, #8
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	ab01      	add	r3, sp, #4
 80034a6:	466a      	mov	r2, sp
 80034a8:	f7ff ffc8 	bl	800343c <__swhatbuf_r>
 80034ac:	9900      	ldr	r1, [sp, #0]
 80034ae:	4605      	mov	r5, r0
 80034b0:	4630      	mov	r0, r6
 80034b2:	f000 f895 	bl	80035e0 <_malloc_r>
 80034b6:	b948      	cbnz	r0, 80034cc <__smakebuf_r+0x44>
 80034b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034bc:	059a      	lsls	r2, r3, #22
 80034be:	d4ef      	bmi.n	80034a0 <__smakebuf_r+0x18>
 80034c0:	f023 0303 	bic.w	r3, r3, #3
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	e7e3      	b.n	8003494 <__smakebuf_r+0xc>
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <__smakebuf_r+0x7c>)
 80034ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	6020      	str	r0, [r4, #0]
 80034d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d8:	81a3      	strh	r3, [r4, #12]
 80034da:	9b00      	ldr	r3, [sp, #0]
 80034dc:	6163      	str	r3, [r4, #20]
 80034de:	9b01      	ldr	r3, [sp, #4]
 80034e0:	6120      	str	r0, [r4, #16]
 80034e2:	b15b      	cbz	r3, 80034fc <__smakebuf_r+0x74>
 80034e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034e8:	4630      	mov	r0, r6
 80034ea:	f000 fc63 	bl	8003db4 <_isatty_r>
 80034ee:	b128      	cbz	r0, 80034fc <__smakebuf_r+0x74>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	81a3      	strh	r3, [r4, #12]
 80034fc:	89a0      	ldrh	r0, [r4, #12]
 80034fe:	4305      	orrs	r5, r0
 8003500:	81a5      	strh	r5, [r4, #12]
 8003502:	e7cd      	b.n	80034a0 <__smakebuf_r+0x18>
 8003504:	08003295 	.word	0x08003295

08003508 <_free_r>:
 8003508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800350a:	2900      	cmp	r1, #0
 800350c:	d044      	beq.n	8003598 <_free_r+0x90>
 800350e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003512:	9001      	str	r0, [sp, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f1a1 0404 	sub.w	r4, r1, #4
 800351a:	bfb8      	it	lt
 800351c:	18e4      	addlt	r4, r4, r3
 800351e:	f000 fc6b 	bl	8003df8 <__malloc_lock>
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <_free_r+0x94>)
 8003524:	9801      	ldr	r0, [sp, #4]
 8003526:	6813      	ldr	r3, [r2, #0]
 8003528:	b933      	cbnz	r3, 8003538 <_free_r+0x30>
 800352a:	6063      	str	r3, [r4, #4]
 800352c:	6014      	str	r4, [r2, #0]
 800352e:	b003      	add	sp, #12
 8003530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003534:	f000 bc66 	b.w	8003e04 <__malloc_unlock>
 8003538:	42a3      	cmp	r3, r4
 800353a:	d908      	bls.n	800354e <_free_r+0x46>
 800353c:	6825      	ldr	r5, [r4, #0]
 800353e:	1961      	adds	r1, r4, r5
 8003540:	428b      	cmp	r3, r1
 8003542:	bf01      	itttt	eq
 8003544:	6819      	ldreq	r1, [r3, #0]
 8003546:	685b      	ldreq	r3, [r3, #4]
 8003548:	1949      	addeq	r1, r1, r5
 800354a:	6021      	streq	r1, [r4, #0]
 800354c:	e7ed      	b.n	800352a <_free_r+0x22>
 800354e:	461a      	mov	r2, r3
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	b10b      	cbz	r3, 8003558 <_free_r+0x50>
 8003554:	42a3      	cmp	r3, r4
 8003556:	d9fa      	bls.n	800354e <_free_r+0x46>
 8003558:	6811      	ldr	r1, [r2, #0]
 800355a:	1855      	adds	r5, r2, r1
 800355c:	42a5      	cmp	r5, r4
 800355e:	d10b      	bne.n	8003578 <_free_r+0x70>
 8003560:	6824      	ldr	r4, [r4, #0]
 8003562:	4421      	add	r1, r4
 8003564:	1854      	adds	r4, r2, r1
 8003566:	42a3      	cmp	r3, r4
 8003568:	6011      	str	r1, [r2, #0]
 800356a:	d1e0      	bne.n	800352e <_free_r+0x26>
 800356c:	681c      	ldr	r4, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	6053      	str	r3, [r2, #4]
 8003572:	4421      	add	r1, r4
 8003574:	6011      	str	r1, [r2, #0]
 8003576:	e7da      	b.n	800352e <_free_r+0x26>
 8003578:	d902      	bls.n	8003580 <_free_r+0x78>
 800357a:	230c      	movs	r3, #12
 800357c:	6003      	str	r3, [r0, #0]
 800357e:	e7d6      	b.n	800352e <_free_r+0x26>
 8003580:	6825      	ldr	r5, [r4, #0]
 8003582:	1961      	adds	r1, r4, r5
 8003584:	428b      	cmp	r3, r1
 8003586:	bf04      	itt	eq
 8003588:	6819      	ldreq	r1, [r3, #0]
 800358a:	685b      	ldreq	r3, [r3, #4]
 800358c:	6063      	str	r3, [r4, #4]
 800358e:	bf04      	itt	eq
 8003590:	1949      	addeq	r1, r1, r5
 8003592:	6021      	streq	r1, [r4, #0]
 8003594:	6054      	str	r4, [r2, #4]
 8003596:	e7ca      	b.n	800352e <_free_r+0x26>
 8003598:	b003      	add	sp, #12
 800359a:	bd30      	pop	{r4, r5, pc}
 800359c:	200002b4 	.word	0x200002b4

080035a0 <sbrk_aligned>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4e0e      	ldr	r6, [pc, #56]	; (80035dc <sbrk_aligned+0x3c>)
 80035a4:	460c      	mov	r4, r1
 80035a6:	6831      	ldr	r1, [r6, #0]
 80035a8:	4605      	mov	r5, r0
 80035aa:	b911      	cbnz	r1, 80035b2 <sbrk_aligned+0x12>
 80035ac:	f000 fb7a 	bl	8003ca4 <_sbrk_r>
 80035b0:	6030      	str	r0, [r6, #0]
 80035b2:	4621      	mov	r1, r4
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 fb75 	bl	8003ca4 <_sbrk_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	d00a      	beq.n	80035d4 <sbrk_aligned+0x34>
 80035be:	1cc4      	adds	r4, r0, #3
 80035c0:	f024 0403 	bic.w	r4, r4, #3
 80035c4:	42a0      	cmp	r0, r4
 80035c6:	d007      	beq.n	80035d8 <sbrk_aligned+0x38>
 80035c8:	1a21      	subs	r1, r4, r0
 80035ca:	4628      	mov	r0, r5
 80035cc:	f000 fb6a 	bl	8003ca4 <_sbrk_r>
 80035d0:	3001      	adds	r0, #1
 80035d2:	d101      	bne.n	80035d8 <sbrk_aligned+0x38>
 80035d4:	f04f 34ff 	mov.w	r4, #4294967295
 80035d8:	4620      	mov	r0, r4
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	200002b8 	.word	0x200002b8

080035e0 <_malloc_r>:
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	1ccd      	adds	r5, r1, #3
 80035e6:	f025 0503 	bic.w	r5, r5, #3
 80035ea:	3508      	adds	r5, #8
 80035ec:	2d0c      	cmp	r5, #12
 80035ee:	bf38      	it	cc
 80035f0:	250c      	movcc	r5, #12
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	4607      	mov	r7, r0
 80035f6:	db01      	blt.n	80035fc <_malloc_r+0x1c>
 80035f8:	42a9      	cmp	r1, r5
 80035fa:	d905      	bls.n	8003608 <_malloc_r+0x28>
 80035fc:	230c      	movs	r3, #12
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	2600      	movs	r6, #0
 8003602:	4630      	mov	r0, r6
 8003604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003608:	4e2e      	ldr	r6, [pc, #184]	; (80036c4 <_malloc_r+0xe4>)
 800360a:	f000 fbf5 	bl	8003df8 <__malloc_lock>
 800360e:	6833      	ldr	r3, [r6, #0]
 8003610:	461c      	mov	r4, r3
 8003612:	bb34      	cbnz	r4, 8003662 <_malloc_r+0x82>
 8003614:	4629      	mov	r1, r5
 8003616:	4638      	mov	r0, r7
 8003618:	f7ff ffc2 	bl	80035a0 <sbrk_aligned>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	4604      	mov	r4, r0
 8003620:	d14d      	bne.n	80036be <_malloc_r+0xde>
 8003622:	6834      	ldr	r4, [r6, #0]
 8003624:	4626      	mov	r6, r4
 8003626:	2e00      	cmp	r6, #0
 8003628:	d140      	bne.n	80036ac <_malloc_r+0xcc>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	4631      	mov	r1, r6
 800362e:	4638      	mov	r0, r7
 8003630:	eb04 0803 	add.w	r8, r4, r3
 8003634:	f000 fb36 	bl	8003ca4 <_sbrk_r>
 8003638:	4580      	cmp	r8, r0
 800363a:	d13a      	bne.n	80036b2 <_malloc_r+0xd2>
 800363c:	6821      	ldr	r1, [r4, #0]
 800363e:	3503      	adds	r5, #3
 8003640:	1a6d      	subs	r5, r5, r1
 8003642:	f025 0503 	bic.w	r5, r5, #3
 8003646:	3508      	adds	r5, #8
 8003648:	2d0c      	cmp	r5, #12
 800364a:	bf38      	it	cc
 800364c:	250c      	movcc	r5, #12
 800364e:	4629      	mov	r1, r5
 8003650:	4638      	mov	r0, r7
 8003652:	f7ff ffa5 	bl	80035a0 <sbrk_aligned>
 8003656:	3001      	adds	r0, #1
 8003658:	d02b      	beq.n	80036b2 <_malloc_r+0xd2>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	442b      	add	r3, r5
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	e00e      	b.n	8003680 <_malloc_r+0xa0>
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	1b52      	subs	r2, r2, r5
 8003666:	d41e      	bmi.n	80036a6 <_malloc_r+0xc6>
 8003668:	2a0b      	cmp	r2, #11
 800366a:	d916      	bls.n	800369a <_malloc_r+0xba>
 800366c:	1961      	adds	r1, r4, r5
 800366e:	42a3      	cmp	r3, r4
 8003670:	6025      	str	r5, [r4, #0]
 8003672:	bf18      	it	ne
 8003674:	6059      	strne	r1, [r3, #4]
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	bf08      	it	eq
 800367a:	6031      	streq	r1, [r6, #0]
 800367c:	5162      	str	r2, [r4, r5]
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	4638      	mov	r0, r7
 8003682:	f104 060b 	add.w	r6, r4, #11
 8003686:	f000 fbbd 	bl	8003e04 <__malloc_unlock>
 800368a:	f026 0607 	bic.w	r6, r6, #7
 800368e:	1d23      	adds	r3, r4, #4
 8003690:	1af2      	subs	r2, r6, r3
 8003692:	d0b6      	beq.n	8003602 <_malloc_r+0x22>
 8003694:	1b9b      	subs	r3, r3, r6
 8003696:	50a3      	str	r3, [r4, r2]
 8003698:	e7b3      	b.n	8003602 <_malloc_r+0x22>
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	42a3      	cmp	r3, r4
 800369e:	bf0c      	ite	eq
 80036a0:	6032      	streq	r2, [r6, #0]
 80036a2:	605a      	strne	r2, [r3, #4]
 80036a4:	e7ec      	b.n	8003680 <_malloc_r+0xa0>
 80036a6:	4623      	mov	r3, r4
 80036a8:	6864      	ldr	r4, [r4, #4]
 80036aa:	e7b2      	b.n	8003612 <_malloc_r+0x32>
 80036ac:	4634      	mov	r4, r6
 80036ae:	6876      	ldr	r6, [r6, #4]
 80036b0:	e7b9      	b.n	8003626 <_malloc_r+0x46>
 80036b2:	230c      	movs	r3, #12
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4638      	mov	r0, r7
 80036b8:	f000 fba4 	bl	8003e04 <__malloc_unlock>
 80036bc:	e7a1      	b.n	8003602 <_malloc_r+0x22>
 80036be:	6025      	str	r5, [r4, #0]
 80036c0:	e7de      	b.n	8003680 <_malloc_r+0xa0>
 80036c2:	bf00      	nop
 80036c4:	200002b4 	.word	0x200002b4

080036c8 <__sfputc_r>:
 80036c8:	6893      	ldr	r3, [r2, #8]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	b410      	push	{r4}
 80036d0:	6093      	str	r3, [r2, #8]
 80036d2:	da08      	bge.n	80036e6 <__sfputc_r+0x1e>
 80036d4:	6994      	ldr	r4, [r2, #24]
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	db01      	blt.n	80036de <__sfputc_r+0x16>
 80036da:	290a      	cmp	r1, #10
 80036dc:	d103      	bne.n	80036e6 <__sfputc_r+0x1e>
 80036de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036e2:	f7ff bc31 	b.w	8002f48 <__swbuf_r>
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	1c58      	adds	r0, r3, #1
 80036ea:	6010      	str	r0, [r2, #0]
 80036ec:	7019      	strb	r1, [r3, #0]
 80036ee:	4608      	mov	r0, r1
 80036f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <__sfputs_r>:
 80036f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f8:	4606      	mov	r6, r0
 80036fa:	460f      	mov	r7, r1
 80036fc:	4614      	mov	r4, r2
 80036fe:	18d5      	adds	r5, r2, r3
 8003700:	42ac      	cmp	r4, r5
 8003702:	d101      	bne.n	8003708 <__sfputs_r+0x12>
 8003704:	2000      	movs	r0, #0
 8003706:	e007      	b.n	8003718 <__sfputs_r+0x22>
 8003708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370c:	463a      	mov	r2, r7
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff ffda 	bl	80036c8 <__sfputc_r>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d1f3      	bne.n	8003700 <__sfputs_r+0xa>
 8003718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800371c <_vfiprintf_r>:
 800371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003720:	460d      	mov	r5, r1
 8003722:	b09d      	sub	sp, #116	; 0x74
 8003724:	4614      	mov	r4, r2
 8003726:	4698      	mov	r8, r3
 8003728:	4606      	mov	r6, r0
 800372a:	b118      	cbz	r0, 8003734 <_vfiprintf_r+0x18>
 800372c:	6983      	ldr	r3, [r0, #24]
 800372e:	b90b      	cbnz	r3, 8003734 <_vfiprintf_r+0x18>
 8003730:	f7ff fde4 	bl	80032fc <__sinit>
 8003734:	4b89      	ldr	r3, [pc, #548]	; (800395c <_vfiprintf_r+0x240>)
 8003736:	429d      	cmp	r5, r3
 8003738:	d11b      	bne.n	8003772 <_vfiprintf_r+0x56>
 800373a:	6875      	ldr	r5, [r6, #4]
 800373c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800373e:	07d9      	lsls	r1, r3, #31
 8003740:	d405      	bmi.n	800374e <_vfiprintf_r+0x32>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	059a      	lsls	r2, r3, #22
 8003746:	d402      	bmi.n	800374e <_vfiprintf_r+0x32>
 8003748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374a:	f7ff fe75 	bl	8003438 <__retarget_lock_acquire_recursive>
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	d501      	bpl.n	8003758 <_vfiprintf_r+0x3c>
 8003754:	692b      	ldr	r3, [r5, #16]
 8003756:	b9eb      	cbnz	r3, 8003794 <_vfiprintf_r+0x78>
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff fc46 	bl	8002fec <__swsetup_r>
 8003760:	b1c0      	cbz	r0, 8003794 <_vfiprintf_r+0x78>
 8003762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003764:	07dc      	lsls	r4, r3, #31
 8003766:	d50e      	bpl.n	8003786 <_vfiprintf_r+0x6a>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	b01d      	add	sp, #116	; 0x74
 800376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <_vfiprintf_r+0x244>)
 8003774:	429d      	cmp	r5, r3
 8003776:	d101      	bne.n	800377c <_vfiprintf_r+0x60>
 8003778:	68b5      	ldr	r5, [r6, #8]
 800377a:	e7df      	b.n	800373c <_vfiprintf_r+0x20>
 800377c:	4b79      	ldr	r3, [pc, #484]	; (8003964 <_vfiprintf_r+0x248>)
 800377e:	429d      	cmp	r5, r3
 8003780:	bf08      	it	eq
 8003782:	68f5      	ldreq	r5, [r6, #12]
 8003784:	e7da      	b.n	800373c <_vfiprintf_r+0x20>
 8003786:	89ab      	ldrh	r3, [r5, #12]
 8003788:	0598      	lsls	r0, r3, #22
 800378a:	d4ed      	bmi.n	8003768 <_vfiprintf_r+0x4c>
 800378c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800378e:	f7ff fe54 	bl	800343a <__retarget_lock_release_recursive>
 8003792:	e7e9      	b.n	8003768 <_vfiprintf_r+0x4c>
 8003794:	2300      	movs	r3, #0
 8003796:	9309      	str	r3, [sp, #36]	; 0x24
 8003798:	2320      	movs	r3, #32
 800379a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800379e:	f8cd 800c 	str.w	r8, [sp, #12]
 80037a2:	2330      	movs	r3, #48	; 0x30
 80037a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003968 <_vfiprintf_r+0x24c>
 80037a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ac:	f04f 0901 	mov.w	r9, #1
 80037b0:	4623      	mov	r3, r4
 80037b2:	469a      	mov	sl, r3
 80037b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037b8:	b10a      	cbz	r2, 80037be <_vfiprintf_r+0xa2>
 80037ba:	2a25      	cmp	r2, #37	; 0x25
 80037bc:	d1f9      	bne.n	80037b2 <_vfiprintf_r+0x96>
 80037be:	ebba 0b04 	subs.w	fp, sl, r4
 80037c2:	d00b      	beq.n	80037dc <_vfiprintf_r+0xc0>
 80037c4:	465b      	mov	r3, fp
 80037c6:	4622      	mov	r2, r4
 80037c8:	4629      	mov	r1, r5
 80037ca:	4630      	mov	r0, r6
 80037cc:	f7ff ff93 	bl	80036f6 <__sfputs_r>
 80037d0:	3001      	adds	r0, #1
 80037d2:	f000 80aa 	beq.w	800392a <_vfiprintf_r+0x20e>
 80037d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037d8:	445a      	add	r2, fp
 80037da:	9209      	str	r2, [sp, #36]	; 0x24
 80037dc:	f89a 3000 	ldrb.w	r3, [sl]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a2 	beq.w	800392a <_vfiprintf_r+0x20e>
 80037e6:	2300      	movs	r3, #0
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037f0:	f10a 0a01 	add.w	sl, sl, #1
 80037f4:	9304      	str	r3, [sp, #16]
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037fc:	931a      	str	r3, [sp, #104]	; 0x68
 80037fe:	4654      	mov	r4, sl
 8003800:	2205      	movs	r2, #5
 8003802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003806:	4858      	ldr	r0, [pc, #352]	; (8003968 <_vfiprintf_r+0x24c>)
 8003808:	f7fc fd02 	bl	8000210 <memchr>
 800380c:	9a04      	ldr	r2, [sp, #16]
 800380e:	b9d8      	cbnz	r0, 8003848 <_vfiprintf_r+0x12c>
 8003810:	06d1      	lsls	r1, r2, #27
 8003812:	bf44      	itt	mi
 8003814:	2320      	movmi	r3, #32
 8003816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800381a:	0713      	lsls	r3, r2, #28
 800381c:	bf44      	itt	mi
 800381e:	232b      	movmi	r3, #43	; 0x2b
 8003820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003824:	f89a 3000 	ldrb.w	r3, [sl]
 8003828:	2b2a      	cmp	r3, #42	; 0x2a
 800382a:	d015      	beq.n	8003858 <_vfiprintf_r+0x13c>
 800382c:	9a07      	ldr	r2, [sp, #28]
 800382e:	4654      	mov	r4, sl
 8003830:	2000      	movs	r0, #0
 8003832:	f04f 0c0a 	mov.w	ip, #10
 8003836:	4621      	mov	r1, r4
 8003838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800383c:	3b30      	subs	r3, #48	; 0x30
 800383e:	2b09      	cmp	r3, #9
 8003840:	d94e      	bls.n	80038e0 <_vfiprintf_r+0x1c4>
 8003842:	b1b0      	cbz	r0, 8003872 <_vfiprintf_r+0x156>
 8003844:	9207      	str	r2, [sp, #28]
 8003846:	e014      	b.n	8003872 <_vfiprintf_r+0x156>
 8003848:	eba0 0308 	sub.w	r3, r0, r8
 800384c:	fa09 f303 	lsl.w	r3, r9, r3
 8003850:	4313      	orrs	r3, r2
 8003852:	9304      	str	r3, [sp, #16]
 8003854:	46a2      	mov	sl, r4
 8003856:	e7d2      	b.n	80037fe <_vfiprintf_r+0xe2>
 8003858:	9b03      	ldr	r3, [sp, #12]
 800385a:	1d19      	adds	r1, r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	9103      	str	r1, [sp, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	bfbb      	ittet	lt
 8003864:	425b      	neglt	r3, r3
 8003866:	f042 0202 	orrlt.w	r2, r2, #2
 800386a:	9307      	strge	r3, [sp, #28]
 800386c:	9307      	strlt	r3, [sp, #28]
 800386e:	bfb8      	it	lt
 8003870:	9204      	strlt	r2, [sp, #16]
 8003872:	7823      	ldrb	r3, [r4, #0]
 8003874:	2b2e      	cmp	r3, #46	; 0x2e
 8003876:	d10c      	bne.n	8003892 <_vfiprintf_r+0x176>
 8003878:	7863      	ldrb	r3, [r4, #1]
 800387a:	2b2a      	cmp	r3, #42	; 0x2a
 800387c:	d135      	bne.n	80038ea <_vfiprintf_r+0x1ce>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	1d1a      	adds	r2, r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	9203      	str	r2, [sp, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	f04f 33ff 	movlt.w	r3, #4294967295
 800388e:	3402      	adds	r4, #2
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003978 <_vfiprintf_r+0x25c>
 8003896:	7821      	ldrb	r1, [r4, #0]
 8003898:	2203      	movs	r2, #3
 800389a:	4650      	mov	r0, sl
 800389c:	f7fc fcb8 	bl	8000210 <memchr>
 80038a0:	b140      	cbz	r0, 80038b4 <_vfiprintf_r+0x198>
 80038a2:	2340      	movs	r3, #64	; 0x40
 80038a4:	eba0 000a 	sub.w	r0, r0, sl
 80038a8:	fa03 f000 	lsl.w	r0, r3, r0
 80038ac:	9b04      	ldr	r3, [sp, #16]
 80038ae:	4303      	orrs	r3, r0
 80038b0:	3401      	adds	r4, #1
 80038b2:	9304      	str	r3, [sp, #16]
 80038b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b8:	482c      	ldr	r0, [pc, #176]	; (800396c <_vfiprintf_r+0x250>)
 80038ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038be:	2206      	movs	r2, #6
 80038c0:	f7fc fca6 	bl	8000210 <memchr>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d03f      	beq.n	8003948 <_vfiprintf_r+0x22c>
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <_vfiprintf_r+0x254>)
 80038ca:	bb1b      	cbnz	r3, 8003914 <_vfiprintf_r+0x1f8>
 80038cc:	9b03      	ldr	r3, [sp, #12]
 80038ce:	3307      	adds	r3, #7
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	3308      	adds	r3, #8
 80038d6:	9303      	str	r3, [sp, #12]
 80038d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038da:	443b      	add	r3, r7
 80038dc:	9309      	str	r3, [sp, #36]	; 0x24
 80038de:	e767      	b.n	80037b0 <_vfiprintf_r+0x94>
 80038e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038e4:	460c      	mov	r4, r1
 80038e6:	2001      	movs	r0, #1
 80038e8:	e7a5      	b.n	8003836 <_vfiprintf_r+0x11a>
 80038ea:	2300      	movs	r3, #0
 80038ec:	3401      	adds	r4, #1
 80038ee:	9305      	str	r3, [sp, #20]
 80038f0:	4619      	mov	r1, r3
 80038f2:	f04f 0c0a 	mov.w	ip, #10
 80038f6:	4620      	mov	r0, r4
 80038f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038fc:	3a30      	subs	r2, #48	; 0x30
 80038fe:	2a09      	cmp	r2, #9
 8003900:	d903      	bls.n	800390a <_vfiprintf_r+0x1ee>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0c5      	beq.n	8003892 <_vfiprintf_r+0x176>
 8003906:	9105      	str	r1, [sp, #20]
 8003908:	e7c3      	b.n	8003892 <_vfiprintf_r+0x176>
 800390a:	fb0c 2101 	mla	r1, ip, r1, r2
 800390e:	4604      	mov	r4, r0
 8003910:	2301      	movs	r3, #1
 8003912:	e7f0      	b.n	80038f6 <_vfiprintf_r+0x1da>
 8003914:	ab03      	add	r3, sp, #12
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	462a      	mov	r2, r5
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <_vfiprintf_r+0x258>)
 800391c:	a904      	add	r1, sp, #16
 800391e:	4630      	mov	r0, r6
 8003920:	f3af 8000 	nop.w
 8003924:	4607      	mov	r7, r0
 8003926:	1c78      	adds	r0, r7, #1
 8003928:	d1d6      	bne.n	80038d8 <_vfiprintf_r+0x1bc>
 800392a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800392c:	07d9      	lsls	r1, r3, #31
 800392e:	d405      	bmi.n	800393c <_vfiprintf_r+0x220>
 8003930:	89ab      	ldrh	r3, [r5, #12]
 8003932:	059a      	lsls	r2, r3, #22
 8003934:	d402      	bmi.n	800393c <_vfiprintf_r+0x220>
 8003936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003938:	f7ff fd7f 	bl	800343a <__retarget_lock_release_recursive>
 800393c:	89ab      	ldrh	r3, [r5, #12]
 800393e:	065b      	lsls	r3, r3, #25
 8003940:	f53f af12 	bmi.w	8003768 <_vfiprintf_r+0x4c>
 8003944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003946:	e711      	b.n	800376c <_vfiprintf_r+0x50>
 8003948:	ab03      	add	r3, sp, #12
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	462a      	mov	r2, r5
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <_vfiprintf_r+0x258>)
 8003950:	a904      	add	r1, sp, #16
 8003952:	4630      	mov	r0, r6
 8003954:	f000 f880 	bl	8003a58 <_printf_i>
 8003958:	e7e4      	b.n	8003924 <_vfiprintf_r+0x208>
 800395a:	bf00      	nop
 800395c:	08003e94 	.word	0x08003e94
 8003960:	08003eb4 	.word	0x08003eb4
 8003964:	08003e74 	.word	0x08003e74
 8003968:	08003ed4 	.word	0x08003ed4
 800396c:	08003ede 	.word	0x08003ede
 8003970:	00000000 	.word	0x00000000
 8003974:	080036f7 	.word	0x080036f7
 8003978:	08003eda 	.word	0x08003eda

0800397c <_printf_common>:
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	4616      	mov	r6, r2
 8003982:	4699      	mov	r9, r3
 8003984:	688a      	ldr	r2, [r1, #8]
 8003986:	690b      	ldr	r3, [r1, #16]
 8003988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800398c:	4293      	cmp	r3, r2
 800398e:	bfb8      	it	lt
 8003990:	4613      	movlt	r3, r2
 8003992:	6033      	str	r3, [r6, #0]
 8003994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003998:	4607      	mov	r7, r0
 800399a:	460c      	mov	r4, r1
 800399c:	b10a      	cbz	r2, 80039a2 <_printf_common+0x26>
 800399e:	3301      	adds	r3, #1
 80039a0:	6033      	str	r3, [r6, #0]
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	0699      	lsls	r1, r3, #26
 80039a6:	bf42      	ittt	mi
 80039a8:	6833      	ldrmi	r3, [r6, #0]
 80039aa:	3302      	addmi	r3, #2
 80039ac:	6033      	strmi	r3, [r6, #0]
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	f015 0506 	ands.w	r5, r5, #6
 80039b4:	d106      	bne.n	80039c4 <_printf_common+0x48>
 80039b6:	f104 0a19 	add.w	sl, r4, #25
 80039ba:	68e3      	ldr	r3, [r4, #12]
 80039bc:	6832      	ldr	r2, [r6, #0]
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	dc26      	bgt.n	8003a12 <_printf_common+0x96>
 80039c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c8:	1e13      	subs	r3, r2, #0
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	bf18      	it	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	0692      	lsls	r2, r2, #26
 80039d2:	d42b      	bmi.n	8003a2c <_printf_common+0xb0>
 80039d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d8:	4649      	mov	r1, r9
 80039da:	4638      	mov	r0, r7
 80039dc:	47c0      	blx	r8
 80039de:	3001      	adds	r0, #1
 80039e0:	d01e      	beq.n	8003a20 <_printf_common+0xa4>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	68e5      	ldr	r5, [r4, #12]
 80039e6:	6832      	ldr	r2, [r6, #0]
 80039e8:	f003 0306 	and.w	r3, r3, #6
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	bf08      	it	eq
 80039f0:	1aad      	subeq	r5, r5, r2
 80039f2:	68a3      	ldr	r3, [r4, #8]
 80039f4:	6922      	ldr	r2, [r4, #16]
 80039f6:	bf0c      	ite	eq
 80039f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039fc:	2500      	movne	r5, #0
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bfc4      	itt	gt
 8003a02:	1a9b      	subgt	r3, r3, r2
 8003a04:	18ed      	addgt	r5, r5, r3
 8003a06:	2600      	movs	r6, #0
 8003a08:	341a      	adds	r4, #26
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	d11a      	bne.n	8003a44 <_printf_common+0xc8>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e008      	b.n	8003a24 <_printf_common+0xa8>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4652      	mov	r2, sl
 8003a16:	4649      	mov	r1, r9
 8003a18:	4638      	mov	r0, r7
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d103      	bne.n	8003a28 <_printf_common+0xac>
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7c6      	b.n	80039ba <_printf_common+0x3e>
 8003a2c:	18e1      	adds	r1, r4, r3
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	2030      	movs	r0, #48	; 0x30
 8003a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a36:	4422      	add	r2, r4
 8003a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a40:	3302      	adds	r3, #2
 8003a42:	e7c7      	b.n	80039d4 <_printf_common+0x58>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4622      	mov	r2, r4
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d0e6      	beq.n	8003a20 <_printf_common+0xa4>
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7d9      	b.n	8003a0a <_printf_common+0x8e>
	...

08003a58 <_printf_i>:
 8003a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	7e0f      	ldrb	r7, [r1, #24]
 8003a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a60:	2f78      	cmp	r7, #120	; 0x78
 8003a62:	4691      	mov	r9, r2
 8003a64:	4680      	mov	r8, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	469a      	mov	sl, r3
 8003a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a6e:	d807      	bhi.n	8003a80 <_printf_i+0x28>
 8003a70:	2f62      	cmp	r7, #98	; 0x62
 8003a72:	d80a      	bhi.n	8003a8a <_printf_i+0x32>
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f000 80d8 	beq.w	8003c2a <_printf_i+0x1d2>
 8003a7a:	2f58      	cmp	r7, #88	; 0x58
 8003a7c:	f000 80a3 	beq.w	8003bc6 <_printf_i+0x16e>
 8003a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a88:	e03a      	b.n	8003b00 <_printf_i+0xa8>
 8003a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a8e:	2b15      	cmp	r3, #21
 8003a90:	d8f6      	bhi.n	8003a80 <_printf_i+0x28>
 8003a92:	a101      	add	r1, pc, #4	; (adr r1, 8003a98 <_printf_i+0x40>)
 8003a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003b05 	.word	0x08003b05
 8003aa0:	08003a81 	.word	0x08003a81
 8003aa4:	08003a81 	.word	0x08003a81
 8003aa8:	08003a81 	.word	0x08003a81
 8003aac:	08003a81 	.word	0x08003a81
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003a81 	.word	0x08003a81
 8003ab8:	08003a81 	.word	0x08003a81
 8003abc:	08003a81 	.word	0x08003a81
 8003ac0:	08003a81 	.word	0x08003a81
 8003ac4:	08003c11 	.word	0x08003c11
 8003ac8:	08003b35 	.word	0x08003b35
 8003acc:	08003bf3 	.word	0x08003bf3
 8003ad0:	08003a81 	.word	0x08003a81
 8003ad4:	08003a81 	.word	0x08003a81
 8003ad8:	08003c33 	.word	0x08003c33
 8003adc:	08003a81 	.word	0x08003a81
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003a81 	.word	0x08003a81
 8003ae8:	08003a81 	.word	0x08003a81
 8003aec:	08003bfb 	.word	0x08003bfb
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0a3      	b.n	8003c4c <_printf_i+0x1f4>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	6829      	ldr	r1, [r5, #0]
 8003b08:	0606      	lsls	r6, r0, #24
 8003b0a:	f101 0304 	add.w	r3, r1, #4
 8003b0e:	d50a      	bpl.n	8003b26 <_printf_i+0xce>
 8003b10:	680e      	ldr	r6, [r1, #0]
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	2e00      	cmp	r6, #0
 8003b16:	da03      	bge.n	8003b20 <_printf_i+0xc8>
 8003b18:	232d      	movs	r3, #45	; 0x2d
 8003b1a:	4276      	negs	r6, r6
 8003b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b20:	485e      	ldr	r0, [pc, #376]	; (8003c9c <_printf_i+0x244>)
 8003b22:	230a      	movs	r3, #10
 8003b24:	e019      	b.n	8003b5a <_printf_i+0x102>
 8003b26:	680e      	ldr	r6, [r1, #0]
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b2e:	bf18      	it	ne
 8003b30:	b236      	sxthne	r6, r6
 8003b32:	e7ef      	b.n	8003b14 <_printf_i+0xbc>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	6029      	str	r1, [r5, #0]
 8003b3c:	0601      	lsls	r1, r0, #24
 8003b3e:	d501      	bpl.n	8003b44 <_printf_i+0xec>
 8003b40:	681e      	ldr	r6, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <_printf_i+0xf2>
 8003b44:	0646      	lsls	r6, r0, #25
 8003b46:	d5fb      	bpl.n	8003b40 <_printf_i+0xe8>
 8003b48:	881e      	ldrh	r6, [r3, #0]
 8003b4a:	4854      	ldr	r0, [pc, #336]	; (8003c9c <_printf_i+0x244>)
 8003b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b4e:	bf0c      	ite	eq
 8003b50:	2308      	moveq	r3, #8
 8003b52:	230a      	movne	r3, #10
 8003b54:	2100      	movs	r1, #0
 8003b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b5a:	6865      	ldr	r5, [r4, #4]
 8003b5c:	60a5      	str	r5, [r4, #8]
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	bfa2      	ittt	ge
 8003b62:	6821      	ldrge	r1, [r4, #0]
 8003b64:	f021 0104 	bicge.w	r1, r1, #4
 8003b68:	6021      	strge	r1, [r4, #0]
 8003b6a:	b90e      	cbnz	r6, 8003b70 <_printf_i+0x118>
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	d04d      	beq.n	8003c0c <_printf_i+0x1b4>
 8003b70:	4615      	mov	r5, r2
 8003b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b76:	fb03 6711 	mls	r7, r3, r1, r6
 8003b7a:	5dc7      	ldrb	r7, [r0, r7]
 8003b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b80:	4637      	mov	r7, r6
 8003b82:	42bb      	cmp	r3, r7
 8003b84:	460e      	mov	r6, r1
 8003b86:	d9f4      	bls.n	8003b72 <_printf_i+0x11a>
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d10b      	bne.n	8003ba4 <_printf_i+0x14c>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	07de      	lsls	r6, r3, #31
 8003b90:	d508      	bpl.n	8003ba4 <_printf_i+0x14c>
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	6861      	ldr	r1, [r4, #4]
 8003b96:	4299      	cmp	r1, r3
 8003b98:	bfde      	ittt	le
 8003b9a:	2330      	movle	r3, #48	; 0x30
 8003b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ba4:	1b52      	subs	r2, r2, r5
 8003ba6:	6122      	str	r2, [r4, #16]
 8003ba8:	f8cd a000 	str.w	sl, [sp]
 8003bac:	464b      	mov	r3, r9
 8003bae:	aa03      	add	r2, sp, #12
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f7ff fee2 	bl	800397c <_printf_common>
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d14c      	bne.n	8003c56 <_printf_i+0x1fe>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	b004      	add	sp, #16
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	4835      	ldr	r0, [pc, #212]	; (8003c9c <_printf_i+0x244>)
 8003bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bcc:	6829      	ldr	r1, [r5, #0]
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bd4:	6029      	str	r1, [r5, #0]
 8003bd6:	061d      	lsls	r5, r3, #24
 8003bd8:	d514      	bpl.n	8003c04 <_printf_i+0x1ac>
 8003bda:	07df      	lsls	r7, r3, #31
 8003bdc:	bf44      	itt	mi
 8003bde:	f043 0320 	orrmi.w	r3, r3, #32
 8003be2:	6023      	strmi	r3, [r4, #0]
 8003be4:	b91e      	cbnz	r6, 8003bee <_printf_i+0x196>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	f023 0320 	bic.w	r3, r3, #32
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	2310      	movs	r3, #16
 8003bf0:	e7b0      	b.n	8003b54 <_printf_i+0xfc>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	f043 0320 	orr.w	r3, r3, #32
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	2378      	movs	r3, #120	; 0x78
 8003bfc:	4828      	ldr	r0, [pc, #160]	; (8003ca0 <_printf_i+0x248>)
 8003bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c02:	e7e3      	b.n	8003bcc <_printf_i+0x174>
 8003c04:	0659      	lsls	r1, r3, #25
 8003c06:	bf48      	it	mi
 8003c08:	b2b6      	uxthmi	r6, r6
 8003c0a:	e7e6      	b.n	8003bda <_printf_i+0x182>
 8003c0c:	4615      	mov	r5, r2
 8003c0e:	e7bb      	b.n	8003b88 <_printf_i+0x130>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	6826      	ldr	r6, [r4, #0]
 8003c14:	6961      	ldr	r1, [r4, #20]
 8003c16:	1d18      	adds	r0, r3, #4
 8003c18:	6028      	str	r0, [r5, #0]
 8003c1a:	0635      	lsls	r5, r6, #24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	d501      	bpl.n	8003c24 <_printf_i+0x1cc>
 8003c20:	6019      	str	r1, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <_printf_i+0x1d2>
 8003c24:	0670      	lsls	r0, r6, #25
 8003c26:	d5fb      	bpl.n	8003c20 <_printf_i+0x1c8>
 8003c28:	8019      	strh	r1, [r3, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6123      	str	r3, [r4, #16]
 8003c2e:	4615      	mov	r5, r2
 8003c30:	e7ba      	b.n	8003ba8 <_printf_i+0x150>
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	1d1a      	adds	r2, r3, #4
 8003c36:	602a      	str	r2, [r5, #0]
 8003c38:	681d      	ldr	r5, [r3, #0]
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7fc fae6 	bl	8000210 <memchr>
 8003c44:	b108      	cbz	r0, 8003c4a <_printf_i+0x1f2>
 8003c46:	1b40      	subs	r0, r0, r5
 8003c48:	6060      	str	r0, [r4, #4]
 8003c4a:	6863      	ldr	r3, [r4, #4]
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c54:	e7a8      	b.n	8003ba8 <_printf_i+0x150>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	462a      	mov	r2, r5
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	47d0      	blx	sl
 8003c60:	3001      	adds	r0, #1
 8003c62:	d0ab      	beq.n	8003bbc <_printf_i+0x164>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	079b      	lsls	r3, r3, #30
 8003c68:	d413      	bmi.n	8003c92 <_printf_i+0x23a>
 8003c6a:	68e0      	ldr	r0, [r4, #12]
 8003c6c:	9b03      	ldr	r3, [sp, #12]
 8003c6e:	4298      	cmp	r0, r3
 8003c70:	bfb8      	it	lt
 8003c72:	4618      	movlt	r0, r3
 8003c74:	e7a4      	b.n	8003bc0 <_printf_i+0x168>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	47d0      	blx	sl
 8003c80:	3001      	adds	r0, #1
 8003c82:	d09b      	beq.n	8003bbc <_printf_i+0x164>
 8003c84:	3501      	adds	r5, #1
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	9903      	ldr	r1, [sp, #12]
 8003c8a:	1a5b      	subs	r3, r3, r1
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dcf2      	bgt.n	8003c76 <_printf_i+0x21e>
 8003c90:	e7eb      	b.n	8003c6a <_printf_i+0x212>
 8003c92:	2500      	movs	r5, #0
 8003c94:	f104 0619 	add.w	r6, r4, #25
 8003c98:	e7f5      	b.n	8003c86 <_printf_i+0x22e>
 8003c9a:	bf00      	nop
 8003c9c:	08003ee5 	.word	0x08003ee5
 8003ca0:	08003ef6 	.word	0x08003ef6

08003ca4 <_sbrk_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	4d06      	ldr	r5, [pc, #24]	; (8003cc0 <_sbrk_r+0x1c>)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	f7fd fc94 	bl	80015dc <_sbrk>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_sbrk_r+0x1a>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_sbrk_r+0x1a>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200002bc 	.word	0x200002bc

08003cc4 <__sread>:
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ccc:	f000 f8a0 	bl	8003e10 <_read_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bfab      	itete	ge
 8003cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cd8:	181b      	addge	r3, r3, r0
 8003cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cde:	bfac      	ite	ge
 8003ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ce2:	81a3      	strhlt	r3, [r4, #12]
 8003ce4:	bd10      	pop	{r4, pc}

08003ce6 <__swrite>:
 8003ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cea:	461f      	mov	r7, r3
 8003cec:	898b      	ldrh	r3, [r1, #12]
 8003cee:	05db      	lsls	r3, r3, #23
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4616      	mov	r6, r2
 8003cf6:	d505      	bpl.n	8003d04 <__swrite+0x1e>
 8003cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f000 f868 	bl	8003dd4 <_lseek_r>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d0e:	81a3      	strh	r3, [r4, #12]
 8003d10:	4632      	mov	r2, r6
 8003d12:	463b      	mov	r3, r7
 8003d14:	4628      	mov	r0, r5
 8003d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1a:	f000 b817 	b.w	8003d4c <_write_r>

08003d1e <__sseek>:
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	460c      	mov	r4, r1
 8003d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d26:	f000 f855 	bl	8003dd4 <_lseek_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	bf15      	itete	ne
 8003d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d3a:	81a3      	strheq	r3, [r4, #12]
 8003d3c:	bf18      	it	ne
 8003d3e:	81a3      	strhne	r3, [r4, #12]
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <__sclose>:
 8003d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d46:	f000 b813 	b.w	8003d70 <_close_r>
	...

08003d4c <_write_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4d07      	ldr	r5, [pc, #28]	; (8003d6c <_write_r+0x20>)
 8003d50:	4604      	mov	r4, r0
 8003d52:	4608      	mov	r0, r1
 8003d54:	4611      	mov	r1, r2
 8003d56:	2200      	movs	r2, #0
 8003d58:	602a      	str	r2, [r5, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f7fc fc2a 	bl	80005b4 <_write>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_write_r+0x1e>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_write_r+0x1e>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	200002bc 	.word	0x200002bc

08003d70 <_close_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d06      	ldr	r5, [pc, #24]	; (8003d8c <_close_r+0x1c>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	f7fd fc20 	bl	80015c0 <_close>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_close_r+0x1a>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_close_r+0x1a>
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	200002bc 	.word	0x200002bc

08003d90 <_fstat_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4d07      	ldr	r5, [pc, #28]	; (8003db0 <_fstat_r+0x20>)
 8003d94:	2300      	movs	r3, #0
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	f7fd fc13 	bl	80015c8 <_fstat>
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	d102      	bne.n	8003dac <_fstat_r+0x1c>
 8003da6:	682b      	ldr	r3, [r5, #0]
 8003da8:	b103      	cbz	r3, 8003dac <_fstat_r+0x1c>
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	bf00      	nop
 8003db0:	200002bc 	.word	0x200002bc

08003db4 <_isatty_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4d06      	ldr	r5, [pc, #24]	; (8003dd0 <_isatty_r+0x1c>)
 8003db8:	2300      	movs	r3, #0
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	602b      	str	r3, [r5, #0]
 8003dc0:	f7fd fc08 	bl	80015d4 <_isatty>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_isatty_r+0x1a>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_isatty_r+0x1a>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	200002bc 	.word	0x200002bc

08003dd4 <_lseek_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d07      	ldr	r5, [pc, #28]	; (8003df4 <_lseek_r+0x20>)
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4608      	mov	r0, r1
 8003ddc:	4611      	mov	r1, r2
 8003dde:	2200      	movs	r2, #0
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fd fbf8 	bl	80015d8 <_lseek>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_lseek_r+0x1e>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_lseek_r+0x1e>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	200002bc 	.word	0x200002bc

08003df8 <__malloc_lock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__malloc_lock+0x8>)
 8003dfa:	f7ff bb1d 	b.w	8003438 <__retarget_lock_acquire_recursive>
 8003dfe:	bf00      	nop
 8003e00:	200002b0 	.word	0x200002b0

08003e04 <__malloc_unlock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <__malloc_unlock+0x8>)
 8003e06:	f7ff bb18 	b.w	800343a <__retarget_lock_release_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200002b0 	.word	0x200002b0

08003e10 <_read_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d07      	ldr	r5, [pc, #28]	; (8003e30 <_read_r+0x20>)
 8003e14:	4604      	mov	r4, r0
 8003e16:	4608      	mov	r0, r1
 8003e18:	4611      	mov	r1, r2
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	602a      	str	r2, [r5, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7fd fbc0 	bl	80015a4 <_read>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d102      	bne.n	8003e2e <_read_r+0x1e>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b103      	cbz	r3, 8003e2e <_read_r+0x1e>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	200002bc 	.word	0x200002bc

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
